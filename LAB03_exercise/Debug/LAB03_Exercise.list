
LAB03_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002de8  08002de8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de8  08002de8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000068  08002e58  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002e58  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bb3  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc1  00000000  00000000  00029c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171d0  00000000  00000000  0002cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c959  00000000  00000000  00043f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825ea  00000000  00000000  00050881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2e6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000d2ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dac 	.word	0x08002dac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002dac 	.word	0x08002dac

0800014c <isButtonPressed>:
int KeyReg3[NUM_button] = {NORMAL_STATE};
int TimerForKeyPress = 200;

int button_flag[NUM_button] = {0};

int isButtonPressed(int but){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[but] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[but] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000084 	.word	0x20000084

08000180 <getKeyInput>:

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int but = 0; but < 3; but ++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e123      	b.n	80003d4 <getKeyInput+0x254>
		KeyReg0[but] = KeyReg1[but];
 800018c:	4a96      	ldr	r2, [pc, #600]	; (80003e8 <getKeyInput+0x268>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4995      	ldr	r1, [pc, #596]	; (80003ec <getKeyInput+0x26c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[but] = KeyReg2[but];
 800019c:	4a94      	ldr	r2, [pc, #592]	; (80003f0 <getKeyInput+0x270>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4990      	ldr	r1, [pc, #576]	; (80003e8 <getKeyInput+0x268>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(but == 0){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d15b      	bne.n	800026a <getKeyInput+0xea>
			KeyReg2[but] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001b2:	2110      	movs	r1, #16
 80001b4:	488f      	ldr	r0, [pc, #572]	; (80003f4 <getKeyInput+0x274>)
 80001b6:	f001 fdcd 	bl	8001d54 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4619      	mov	r1, r3
 80001be:	4a8c      	ldr	r2, [pc, #560]	; (80003f0 <getKeyInput+0x270>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 80001c6:	4a89      	ldr	r2, [pc, #548]	; (80003ec <getKeyInput+0x26c>)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ce:	4986      	ldr	r1, [pc, #536]	; (80003e8 <getKeyInput+0x268>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	f040 80f9 	bne.w	80003ce <getKeyInput+0x24e>
 80001dc:	4a82      	ldr	r2, [pc, #520]	; (80003e8 <getKeyInput+0x268>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	4982      	ldr	r1, [pc, #520]	; (80003f0 <getKeyInput+0x270>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	f040 80ee 	bne.w	80003ce <getKeyInput+0x24e>
				// Nhấn nhanh
				if(KeyReg3[but] != KeyReg2[but]){
 80001f2:	4a81      	ldr	r2, [pc, #516]	; (80003f8 <getKeyInput+0x278>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	497d      	ldr	r1, [pc, #500]	; (80003f0 <getKeyInput+0x270>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000202:	429a      	cmp	r2, r3
 8000204:	d017      	beq.n	8000236 <getKeyInput+0xb6>
					KeyReg3[but] = KeyReg2[but];
 8000206:	4a7a      	ldr	r2, [pc, #488]	; (80003f0 <getKeyInput+0x270>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	497a      	ldr	r1, [pc, #488]	; (80003f8 <getKeyInput+0x278>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(KeyReg2[but] == PRESSED_STATE){
 8000216:	4a76      	ldr	r2, [pc, #472]	; (80003f0 <getKeyInput+0x270>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 80d5 	bne.w	80003ce <getKeyInput+0x24e>
						//TODO
						button_flag[but] = 1;
 8000224:	4a75      	ldr	r2, [pc, #468]	; (80003fc <getKeyInput+0x27c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2101      	movs	r1, #1
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						TimerForKeyPress = 200;
 800022e:	4b74      	ldr	r3, [pc, #464]	; (8000400 <getKeyInput+0x280>)
 8000230:	22c8      	movs	r2, #200	; 0xc8
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	e0cb      	b.n	80003ce <getKeyInput+0x24e>
					}
				}
				// Nhấn đè
				else{
					if(KeyReg2[but] == PRESSED_STATE){
 8000236:	4a6e      	ldr	r2, [pc, #440]	; (80003f0 <getKeyInput+0x270>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 80c5 	bne.w	80003ce <getKeyInput+0x24e>
						TimerForKeyPress --;
 8000244:	4b6e      	ldr	r3, [pc, #440]	; (8000400 <getKeyInput+0x280>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	3b01      	subs	r3, #1
 800024a:	4a6d      	ldr	r2, [pc, #436]	; (8000400 <getKeyInput+0x280>)
 800024c:	6013      	str	r3, [r2, #0]
						if(TimerForKeyPress == 0){
 800024e:	4b6c      	ldr	r3, [pc, #432]	; (8000400 <getKeyInput+0x280>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 80bb 	bne.w	80003ce <getKeyInput+0x24e>
							button_flag[but] = 1;
 8000258:	4a68      	ldr	r2, [pc, #416]	; (80003fc <getKeyInput+0x27c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2101      	movs	r1, #1
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							TimerForKeyPress = 200;
 8000262:	4b67      	ldr	r3, [pc, #412]	; (8000400 <getKeyInput+0x280>)
 8000264:	22c8      	movs	r2, #200	; 0xc8
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	e0b1      	b.n	80003ce <getKeyInput+0x24e>
						}
					}
				}
			}
		}else if(but == 1){
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d158      	bne.n	8000322 <getKeyInput+0x1a2>
			KeyReg2[but] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000270:	2120      	movs	r1, #32
 8000272:	4860      	ldr	r0, [pc, #384]	; (80003f4 <getKeyInput+0x274>)
 8000274:	f001 fd6e 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	4619      	mov	r1, r3
 800027c:	4a5c      	ldr	r2, [pc, #368]	; (80003f0 <getKeyInput+0x270>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 8000284:	4a59      	ldr	r2, [pc, #356]	; (80003ec <getKeyInput+0x26c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4956      	ldr	r1, [pc, #344]	; (80003e8 <getKeyInput+0x268>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000294:	429a      	cmp	r2, r3
 8000296:	f040 809a 	bne.w	80003ce <getKeyInput+0x24e>
 800029a:	4a53      	ldr	r2, [pc, #332]	; (80003e8 <getKeyInput+0x268>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a2:	4953      	ldr	r1, [pc, #332]	; (80003f0 <getKeyInput+0x270>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	f040 808f 	bne.w	80003ce <getKeyInput+0x24e>
				if(KeyReg3[but] != KeyReg2[but]){
 80002b0:	4a51      	ldr	r2, [pc, #324]	; (80003f8 <getKeyInput+0x278>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	494d      	ldr	r1, [pc, #308]	; (80003f0 <getKeyInput+0x270>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d016      	beq.n	80002f2 <getKeyInput+0x172>
					KeyReg3[but] = KeyReg2[but];
 80002c4:	4a4a      	ldr	r2, [pc, #296]	; (80003f0 <getKeyInput+0x270>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002cc:	494a      	ldr	r1, [pc, #296]	; (80003f8 <getKeyInput+0x278>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(KeyReg2[but] == PRESSED_STATE){
 80002d4:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <getKeyInput+0x270>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d176      	bne.n	80003ce <getKeyInput+0x24e>
						//TODO
						button_flag[but] = 1;
 80002e0:	4a46      	ldr	r2, [pc, #280]	; (80003fc <getKeyInput+0x27c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2101      	movs	r1, #1
 80002e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						TimerForKeyPress = 200;
 80002ea:	4b45      	ldr	r3, [pc, #276]	; (8000400 <getKeyInput+0x280>)
 80002ec:	22c8      	movs	r2, #200	; 0xc8
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	e06d      	b.n	80003ce <getKeyInput+0x24e>
					}
				}else{
					if(KeyReg2[but] == PRESSED_STATE){
 80002f2:	4a3f      	ldr	r2, [pc, #252]	; (80003f0 <getKeyInput+0x270>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d167      	bne.n	80003ce <getKeyInput+0x24e>
						TimerForKeyPress --;
 80002fe:	4b40      	ldr	r3, [pc, #256]	; (8000400 <getKeyInput+0x280>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	3b01      	subs	r3, #1
 8000304:	4a3e      	ldr	r2, [pc, #248]	; (8000400 <getKeyInput+0x280>)
 8000306:	6013      	str	r3, [r2, #0]
						if(TimerForKeyPress == 0){
 8000308:	4b3d      	ldr	r3, [pc, #244]	; (8000400 <getKeyInput+0x280>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d15e      	bne.n	80003ce <getKeyInput+0x24e>
							button_flag[but] = 1;
 8000310:	4a3a      	ldr	r2, [pc, #232]	; (80003fc <getKeyInput+0x27c>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2101      	movs	r1, #1
 8000316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							TimerForKeyPress = 200;
 800031a:	4b39      	ldr	r3, [pc, #228]	; (8000400 <getKeyInput+0x280>)
 800031c:	22c8      	movs	r2, #200	; 0xc8
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	e055      	b.n	80003ce <getKeyInput+0x24e>
						}
					}
				}
			}
		}else{
			KeyReg2[but] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000322:	2140      	movs	r1, #64	; 0x40
 8000324:	4833      	ldr	r0, [pc, #204]	; (80003f4 <getKeyInput+0x274>)
 8000326:	f001 fd15 	bl	8001d54 <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	4619      	mov	r1, r3
 800032e:	4a30      	ldr	r2, [pc, #192]	; (80003f0 <getKeyInput+0x270>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 8000336:	4a2d      	ldr	r2, [pc, #180]	; (80003ec <getKeyInput+0x26c>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033e:	492a      	ldr	r1, [pc, #168]	; (80003e8 <getKeyInput+0x268>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000346:	429a      	cmp	r2, r3
 8000348:	d141      	bne.n	80003ce <getKeyInput+0x24e>
 800034a:	4a27      	ldr	r2, [pc, #156]	; (80003e8 <getKeyInput+0x268>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000352:	4927      	ldr	r1, [pc, #156]	; (80003f0 <getKeyInput+0x270>)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800035a:	429a      	cmp	r2, r3
 800035c:	d137      	bne.n	80003ce <getKeyInput+0x24e>
				if(KeyReg3[but] != KeyReg2[but]){
 800035e:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <getKeyInput+0x278>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000366:	4922      	ldr	r1, [pc, #136]	; (80003f0 <getKeyInput+0x270>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800036e:	429a      	cmp	r2, r3
 8000370:	d016      	beq.n	80003a0 <getKeyInput+0x220>
					KeyReg3[but] = KeyReg2[but];
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <getKeyInput+0x270>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800037a:	491f      	ldr	r1, [pc, #124]	; (80003f8 <getKeyInput+0x278>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(KeyReg2[but] == PRESSED_STATE){
 8000382:	4a1b      	ldr	r2, [pc, #108]	; (80003f0 <getKeyInput+0x270>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d11f      	bne.n	80003ce <getKeyInput+0x24e>
						//TODO
						button_flag[but] = 1;
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <getKeyInput+0x27c>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2101      	movs	r1, #1
 8000394:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						TimerForKeyPress = 200;
 8000398:	4b19      	ldr	r3, [pc, #100]	; (8000400 <getKeyInput+0x280>)
 800039a:	22c8      	movs	r2, #200	; 0xc8
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	e016      	b.n	80003ce <getKeyInput+0x24e>
					}
				}else{
					if(KeyReg2[but] == PRESSED_STATE){
 80003a0:	4a13      	ldr	r2, [pc, #76]	; (80003f0 <getKeyInput+0x270>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d110      	bne.n	80003ce <getKeyInput+0x24e>
						TimerForKeyPress --;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <getKeyInput+0x280>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	3b01      	subs	r3, #1
 80003b2:	4a13      	ldr	r2, [pc, #76]	; (8000400 <getKeyInput+0x280>)
 80003b4:	6013      	str	r3, [r2, #0]
						if(TimerForKeyPress == 0){
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <getKeyInput+0x280>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d107      	bne.n	80003ce <getKeyInput+0x24e>
							button_flag[but] = 1;
 80003be:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <getKeyInput+0x27c>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2101      	movs	r1, #1
 80003c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							TimerForKeyPress = 200;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <getKeyInput+0x280>)
 80003ca:	22c8      	movs	r2, #200	; 0xc8
 80003cc:	601a      	str	r2, [r3, #0]
	for(int but = 0; but < 3; but ++){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	f77f aed8 	ble.w	800018c <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000000c 	.word	0x2000000c
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000018 	.word	0x20000018
 80003f4:	40010800 	.word	0x40010800
 80003f8:	20000024 	.word	0x20000024
 80003fc:	20000084 	.word	0x20000084
 8000400:	20000030 	.word	0x20000030

08000404 <fsm_automatic_run>:
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	if (STATUS_MODE != MODE1) return;
 8000408:	4b9c      	ldr	r3, [pc, #624]	; (800067c <fsm_automatic_run+0x278>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b16      	cmp	r3, #22
 800040e:	f040 812a 	bne.w	8000666 <fsm_automatic_run+0x262>
	//
	if (TimeRed != TimeYellow + TimeGreen) {
 8000412:	4b9b      	ldr	r3, [pc, #620]	; (8000680 <fsm_automatic_run+0x27c>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	4b9b      	ldr	r3, [pc, #620]	; (8000684 <fsm_automatic_run+0x280>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	441a      	add	r2, r3
 800041c:	4b9a      	ldr	r3, [pc, #616]	; (8000688 <fsm_automatic_run+0x284>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	429a      	cmp	r2, r3
 8000422:	d008      	beq.n	8000436 <fsm_automatic_run+0x32>
        TimeRed = 5;
 8000424:	4b98      	ldr	r3, [pc, #608]	; (8000688 <fsm_automatic_run+0x284>)
 8000426:	2205      	movs	r2, #5
 8000428:	601a      	str	r2, [r3, #0]
        TimeYellow = 2;
 800042a:	4b95      	ldr	r3, [pc, #596]	; (8000680 <fsm_automatic_run+0x27c>)
 800042c:	2202      	movs	r2, #2
 800042e:	601a      	str	r2, [r3, #0]
        TimeGreen = 3;
 8000430:	4b94      	ldr	r3, [pc, #592]	; (8000684 <fsm_automatic_run+0x280>)
 8000432:	2203      	movs	r2, #3
 8000434:	601a      	str	r2, [r3, #0]
    }

	switch(STATUS_LED1){
 8000436:	4b95      	ldr	r3, [pc, #596]	; (800068c <fsm_automatic_run+0x288>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	3b01      	subs	r3, #1
 800043c:	2b03      	cmp	r3, #3
 800043e:	d87d      	bhi.n	800053c <fsm_automatic_run+0x138>
 8000440:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <fsm_automatic_run+0x44>)
 8000442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000446:	bf00      	nop
 8000448:	08000459 	.word	0x08000459
 800044c:	08000477 	.word	0x08000477
 8000450:	080004fb 	.word	0x080004fb
 8000454:	080004b9 	.word	0x080004b9
	case INIT:
		OffAll1();
 8000458:	f001 f800 	bl	800145c <OffAll1>

		STATUS_LED1 = AUTO_RED1;
 800045c:	4b8b      	ldr	r3, [pc, #556]	; (800068c <fsm_automatic_run+0x288>)
 800045e:	2202      	movs	r2, #2
 8000460:	601a      	str	r2, [r3, #0]
		TimeForLed1 = TimeRed;
 8000462:	4b89      	ldr	r3, [pc, #548]	; (8000688 <fsm_automatic_run+0x284>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a8a      	ldr	r2, [pc, #552]	; (8000690 <fsm_automatic_run+0x28c>)
 8000468:	6013      	str	r3, [r2, #0]
		setTimer(2, 1000);
 800046a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800046e:	2002      	movs	r0, #2
 8000470:	f000 ff16 	bl	80012a0 <setTimer>
		break;
 8000474:	e069      	b.n	800054a <fsm_automatic_run+0x146>
	case AUTO_RED1:
		OnLedRed1();
 8000476:	f001 f821 	bl	80014bc <OnLedRed1>

	    updateBuffer(MODE1);
 800047a:	2016      	movs	r0, #22
 800047c:	f000 fc8e 	bl	8000d9c <updateBuffer>
	    display_led7seg();
 8000480:	f000 fd44 	bl	8000f0c <display_led7seg>

		if(timer_flag[2] == 1){
 8000484:	4b83      	ldr	r3, [pc, #524]	; (8000694 <fsm_automatic_run+0x290>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d159      	bne.n	8000540 <fsm_automatic_run+0x13c>
			setTimer(2, 1000);
 800048c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000490:	2002      	movs	r0, #2
 8000492:	f000 ff05 	bl	80012a0 <setTimer>
			TimeForLed1 --;
 8000496:	4b7e      	ldr	r3, [pc, #504]	; (8000690 <fsm_automatic_run+0x28c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3b01      	subs	r3, #1
 800049c:	4a7c      	ldr	r2, [pc, #496]	; (8000690 <fsm_automatic_run+0x28c>)
 800049e:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 80004a0:	4b7b      	ldr	r3, [pc, #492]	; (8000690 <fsm_automatic_run+0x28c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dc4b      	bgt.n	8000540 <fsm_automatic_run+0x13c>
				TimeForLed1 = TimeGreen;
 80004a8:	4b76      	ldr	r3, [pc, #472]	; (8000684 <fsm_automatic_run+0x280>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a78      	ldr	r2, [pc, #480]	; (8000690 <fsm_automatic_run+0x28c>)
 80004ae:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_GREEN1;
 80004b0:	4b76      	ldr	r3, [pc, #472]	; (800068c <fsm_automatic_run+0x288>)
 80004b2:	2204      	movs	r2, #4
 80004b4:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004b6:	e043      	b.n	8000540 <fsm_automatic_run+0x13c>
	case AUTO_GREEN1:
		OnLedGreen1();
 80004b8:	f001 f860 	bl	800157c <OnLedGreen1>

	    updateBuffer(MODE1);
 80004bc:	2016      	movs	r0, #22
 80004be:	f000 fc6d 	bl	8000d9c <updateBuffer>
	    display_led7seg();
 80004c2:	f000 fd23 	bl	8000f0c <display_led7seg>

		if(timer_flag[2] == 1){
 80004c6:	4b73      	ldr	r3, [pc, #460]	; (8000694 <fsm_automatic_run+0x290>)
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d13a      	bne.n	8000544 <fsm_automatic_run+0x140>
			setTimer(2, 1000);
 80004ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d2:	2002      	movs	r0, #2
 80004d4:	f000 fee4 	bl	80012a0 <setTimer>
			TimeForLed1 --;
 80004d8:	4b6d      	ldr	r3, [pc, #436]	; (8000690 <fsm_automatic_run+0x28c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3b01      	subs	r3, #1
 80004de:	4a6c      	ldr	r2, [pc, #432]	; (8000690 <fsm_automatic_run+0x28c>)
 80004e0:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 80004e2:	4b6b      	ldr	r3, [pc, #428]	; (8000690 <fsm_automatic_run+0x28c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dc2c      	bgt.n	8000544 <fsm_automatic_run+0x140>
				TimeForLed1 = TimeYellow;
 80004ea:	4b65      	ldr	r3, [pc, #404]	; (8000680 <fsm_automatic_run+0x27c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a68      	ldr	r2, [pc, #416]	; (8000690 <fsm_automatic_run+0x28c>)
 80004f0:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_YELLOW1;
 80004f2:	4b66      	ldr	r3, [pc, #408]	; (800068c <fsm_automatic_run+0x288>)
 80004f4:	2203      	movs	r2, #3
 80004f6:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004f8:	e024      	b.n	8000544 <fsm_automatic_run+0x140>
	case AUTO_YELLOW1:
		OnLedYellow1();
 80004fa:	f001 f80f 	bl	800151c <OnLedYellow1>

	    updateBuffer(MODE1);
 80004fe:	2016      	movs	r0, #22
 8000500:	f000 fc4c 	bl	8000d9c <updateBuffer>
	    display_led7seg();
 8000504:	f000 fd02 	bl	8000f0c <display_led7seg>

		if(timer_flag[2] == 1){
 8000508:	4b62      	ldr	r3, [pc, #392]	; (8000694 <fsm_automatic_run+0x290>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d11b      	bne.n	8000548 <fsm_automatic_run+0x144>
			setTimer(2, 1000);
 8000510:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000514:	2002      	movs	r0, #2
 8000516:	f000 fec3 	bl	80012a0 <setTimer>
			TimeForLed1 --;
 800051a:	4b5d      	ldr	r3, [pc, #372]	; (8000690 <fsm_automatic_run+0x28c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	4a5b      	ldr	r2, [pc, #364]	; (8000690 <fsm_automatic_run+0x28c>)
 8000522:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 8000524:	4b5a      	ldr	r3, [pc, #360]	; (8000690 <fsm_automatic_run+0x28c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	dc0d      	bgt.n	8000548 <fsm_automatic_run+0x144>
				TimeForLed1 = TimeRed;
 800052c:	4b56      	ldr	r3, [pc, #344]	; (8000688 <fsm_automatic_run+0x284>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a57      	ldr	r2, [pc, #348]	; (8000690 <fsm_automatic_run+0x28c>)
 8000532:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_RED1;
 8000534:	4b55      	ldr	r3, [pc, #340]	; (800068c <fsm_automatic_run+0x288>)
 8000536:	2202      	movs	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 800053a:	e005      	b.n	8000548 <fsm_automatic_run+0x144>
	default:
		break;
 800053c:	bf00      	nop
 800053e:	e004      	b.n	800054a <fsm_automatic_run+0x146>
		break;
 8000540:	bf00      	nop
 8000542:	e002      	b.n	800054a <fsm_automatic_run+0x146>
		break;
 8000544:	bf00      	nop
 8000546:	e000      	b.n	800054a <fsm_automatic_run+0x146>
		break;
 8000548:	bf00      	nop
	}
	//
	switch(STATUS_LED2){
 800054a:	4b53      	ldr	r3, [pc, #332]	; (8000698 <fsm_automatic_run+0x294>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	2b06      	cmp	r3, #6
 8000552:	f200 808a 	bhi.w	800066a <fsm_automatic_run+0x266>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <fsm_automatic_run+0x158>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	08000579 	.word	0x08000579
 8000560:	0800066b 	.word	0x0800066b
 8000564:	0800066b 	.word	0x0800066b
 8000568:	0800066b 	.word	0x0800066b
 800056c:	080005a1 	.word	0x080005a1
 8000570:	08000625 	.word	0x08000625
 8000574:	080005e3 	.word	0x080005e3
	case INIT:
		OffAll2();
 8000578:	f000 ff88 	bl	800148c <OffAll2>

	    updateBuffer(MODE1);
 800057c:	2016      	movs	r0, #22
 800057e:	f000 fc0d 	bl	8000d9c <updateBuffer>
	    display_led7seg();
 8000582:	f000 fcc3 	bl	8000f0c <display_led7seg>

		STATUS_LED2 = AUTO_GREEN2;
 8000586:	4b44      	ldr	r3, [pc, #272]	; (8000698 <fsm_automatic_run+0x294>)
 8000588:	2207      	movs	r2, #7
 800058a:	601a      	str	r2, [r3, #0]
		TimeForLed2 = TimeGreen;
 800058c:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <fsm_automatic_run+0x280>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a42      	ldr	r2, [pc, #264]	; (800069c <fsm_automatic_run+0x298>)
 8000592:	6013      	str	r3, [r2, #0]
		setTimer(3, 1000);
 8000594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000598:	2003      	movs	r0, #3
 800059a:	f000 fe81 	bl	80012a0 <setTimer>
		break;
 800059e:	e06b      	b.n	8000678 <fsm_automatic_run+0x274>
	case AUTO_RED2:
		OnLedRed2();
 80005a0:	f000 ffa4 	bl	80014ec <OnLedRed2>

	    updateBuffer(MODE1);
 80005a4:	2016      	movs	r0, #22
 80005a6:	f000 fbf9 	bl	8000d9c <updateBuffer>
	    display_led7seg();
 80005aa:	f000 fcaf 	bl	8000f0c <display_led7seg>

		if(timer_flag[3] == 1){
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <fsm_automatic_run+0x290>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d15b      	bne.n	800066e <fsm_automatic_run+0x26a>
			setTimer(3, 1000);
 80005b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ba:	2003      	movs	r0, #3
 80005bc:	f000 fe70 	bl	80012a0 <setTimer>
			TimeForLed2 --;
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <fsm_automatic_run+0x298>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	4a35      	ldr	r2, [pc, #212]	; (800069c <fsm_automatic_run+0x298>)
 80005c8:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <fsm_automatic_run+0x298>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	dc4d      	bgt.n	800066e <fsm_automatic_run+0x26a>
				TimeForLed2 = TimeGreen;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <fsm_automatic_run+0x280>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a31      	ldr	r2, [pc, #196]	; (800069c <fsm_automatic_run+0x298>)
 80005d8:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_GREEN2;
 80005da:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <fsm_automatic_run+0x294>)
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80005e0:	e045      	b.n	800066e <fsm_automatic_run+0x26a>
	case AUTO_GREEN2:
		OnLedGreen2();
 80005e2:	f000 ffe3 	bl	80015ac <OnLedGreen2>

	    updateBuffer(MODE1);
 80005e6:	2016      	movs	r0, #22
 80005e8:	f000 fbd8 	bl	8000d9c <updateBuffer>
	    display_led7seg();
 80005ec:	f000 fc8e 	bl	8000f0c <display_led7seg>

		if(timer_flag[3] == 1){
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <fsm_automatic_run+0x290>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d13c      	bne.n	8000672 <fsm_automatic_run+0x26e>
			setTimer(3, 1000);
 80005f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 fe4f 	bl	80012a0 <setTimer>
			TimeForLed2 --;
 8000602:	4b26      	ldr	r3, [pc, #152]	; (800069c <fsm_automatic_run+0x298>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3b01      	subs	r3, #1
 8000608:	4a24      	ldr	r2, [pc, #144]	; (800069c <fsm_automatic_run+0x298>)
 800060a:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <fsm_automatic_run+0x298>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	dc2e      	bgt.n	8000672 <fsm_automatic_run+0x26e>
				TimeForLed2 = TimeYellow;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <fsm_automatic_run+0x27c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <fsm_automatic_run+0x298>)
 800061a:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_YELLOW2;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <fsm_automatic_run+0x294>)
 800061e:	2206      	movs	r2, #6
 8000620:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000622:	e026      	b.n	8000672 <fsm_automatic_run+0x26e>
	case AUTO_YELLOW2:
		OnLedYellow2();
 8000624:	f000 ff92 	bl	800154c <OnLedYellow2>

	    updateBuffer(MODE1);
 8000628:	2016      	movs	r0, #22
 800062a:	f000 fbb7 	bl	8000d9c <updateBuffer>
	    display_led7seg();
 800062e:	f000 fc6d 	bl	8000f0c <display_led7seg>

		if(timer_flag[3] == 1){
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <fsm_automatic_run+0x290>)
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d11d      	bne.n	8000676 <fsm_automatic_run+0x272>
			setTimer(3, 1000);
 800063a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063e:	2003      	movs	r0, #3
 8000640:	f000 fe2e 	bl	80012a0 <setTimer>
			TimeForLed2 --;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <fsm_automatic_run+0x298>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3b01      	subs	r3, #1
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <fsm_automatic_run+0x298>)
 800064c:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <fsm_automatic_run+0x298>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	dc0f      	bgt.n	8000676 <fsm_automatic_run+0x272>
				TimeForLed2 = TimeRed;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <fsm_automatic_run+0x284>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a10      	ldr	r2, [pc, #64]	; (800069c <fsm_automatic_run+0x298>)
 800065c:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_RED2;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <fsm_automatic_run+0x294>)
 8000660:	2205      	movs	r2, #5
 8000662:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000664:	e007      	b.n	8000676 <fsm_automatic_run+0x272>
	if (STATUS_MODE != MODE1) return;
 8000666:	bf00      	nop
 8000668:	e006      	b.n	8000678 <fsm_automatic_run+0x274>
	default:
		break;
 800066a:	bf00      	nop
 800066c:	e004      	b.n	8000678 <fsm_automatic_run+0x274>
		break;
 800066e:	bf00      	nop
 8000670:	e002      	b.n	8000678 <fsm_automatic_run+0x274>
		break;
 8000672:	bf00      	nop
 8000674:	e000      	b.n	8000678 <fsm_automatic_run+0x274>
		break;
 8000676:	bf00      	nop
	}
}
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000040 	.word	0x20000040
 8000680:	20000050 	.word	0x20000050
 8000684:	2000004c 	.word	0x2000004c
 8000688:	20000048 	.word	0x20000048
 800068c:	20000034 	.word	0x20000034
 8000690:	20000054 	.word	0x20000054
 8000694:	200000bc 	.word	0x200000bc
 8000698:	20000038 	.word	0x20000038
 800069c:	20000058 	.word	0x20000058

080006a0 <fsm_manual_run>:
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 80006a4:	4b33      	ldr	r3, [pc, #204]	; (8000774 <fsm_manual_run+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b19      	cmp	r3, #25
 80006aa:	d03e      	beq.n	800072a <fsm_manual_run+0x8a>
 80006ac:	2b19      	cmp	r3, #25
 80006ae:	dc58      	bgt.n	8000762 <fsm_manual_run+0xc2>
 80006b0:	2b17      	cmp	r3, #23
 80006b2:	d002      	beq.n	80006ba <fsm_manual_run+0x1a>
 80006b4:	2b18      	cmp	r3, #24
 80006b6:	d01c      	beq.n	80006f2 <fsm_manual_run+0x52>
		if(isButtonPressed(1)){
			value = (value < 99) ? value + 1 : 1;
		}
		break;
	default:
		break;
 80006b8:	e053      	b.n	8000762 <fsm_manual_run+0xc2>
		BlinkyLed(RED);
 80006ba:	2028      	movs	r0, #40	; 0x28
 80006bc:	f000 ffd4 	bl	8001668 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <fsm_manual_run+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fb69 	bl	8000d9c <updateBuffer>
		display_led7seg();
 80006ca:	f000 fc1f 	bl	8000f0c <display_led7seg>
		if(isButtonPressed(1)){
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff fd3c 	bl	800014c <isButtonPressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d045      	beq.n	8000766 <fsm_manual_run+0xc6>
			value = (value < 99) ? value + 1 : 1;
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <fsm_manual_run+0xd8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b62      	cmp	r3, #98	; 0x62
 80006e0:	dc03      	bgt.n	80006ea <fsm_manual_run+0x4a>
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <fsm_manual_run+0xd8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	e000      	b.n	80006ec <fsm_manual_run+0x4c>
 80006ea:	2301      	movs	r3, #1
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <fsm_manual_run+0xd8>)
 80006ee:	6013      	str	r3, [r2, #0]
		break;
 80006f0:	e039      	b.n	8000766 <fsm_manual_run+0xc6>
		BlinkyLed(YELLOW);
 80006f2:	2029      	movs	r0, #41	; 0x29
 80006f4:	f000 ffb8 	bl	8001668 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <fsm_manual_run+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fb4d 	bl	8000d9c <updateBuffer>
		display_led7seg();
 8000702:	f000 fc03 	bl	8000f0c <display_led7seg>
		if(isButtonPressed(1)){
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff fd20 	bl	800014c <isButtonPressed>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d02b      	beq.n	800076a <fsm_manual_run+0xca>
			value = (value < 99) ? value + 1 : 1;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <fsm_manual_run+0xd8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b62      	cmp	r3, #98	; 0x62
 8000718:	dc03      	bgt.n	8000722 <fsm_manual_run+0x82>
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <fsm_manual_run+0xd8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	e000      	b.n	8000724 <fsm_manual_run+0x84>
 8000722:	2301      	movs	r3, #1
 8000724:	4a14      	ldr	r2, [pc, #80]	; (8000778 <fsm_manual_run+0xd8>)
 8000726:	6013      	str	r3, [r2, #0]
		break;
 8000728:	e01f      	b.n	800076a <fsm_manual_run+0xca>
		BlinkyLed(GREEN);
 800072a:	202a      	movs	r0, #42	; 0x2a
 800072c:	f000 ff9c 	bl	8001668 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <fsm_manual_run+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fb31 	bl	8000d9c <updateBuffer>
		display_led7seg();
 800073a:	f000 fbe7 	bl	8000f0c <display_led7seg>
		if(isButtonPressed(1)){
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fd04 	bl	800014c <isButtonPressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d011      	beq.n	800076e <fsm_manual_run+0xce>
			value = (value < 99) ? value + 1 : 1;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <fsm_manual_run+0xd8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b62      	cmp	r3, #98	; 0x62
 8000750:	dc03      	bgt.n	800075a <fsm_manual_run+0xba>
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <fsm_manual_run+0xd8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	e000      	b.n	800075c <fsm_manual_run+0xbc>
 800075a:	2301      	movs	r3, #1
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <fsm_manual_run+0xd8>)
 800075e:	6013      	str	r3, [r2, #0]
		break;
 8000760:	e005      	b.n	800076e <fsm_manual_run+0xce>
		break;
 8000762:	bf00      	nop
 8000764:	e004      	b.n	8000770 <fsm_manual_run+0xd0>
		break;
 8000766:	bf00      	nop
 8000768:	e002      	b.n	8000770 <fsm_manual_run+0xd0>
		break;
 800076a:	bf00      	nop
 800076c:	e000      	b.n	8000770 <fsm_manual_run+0xd0>
		break;
 800076e:	bf00      	nop
	}
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000040 	.word	0x20000040
 8000778:	200000a0 	.word	0x200000a0

0800077c <fsm_setting_run>:
 *  Created on: Nov 4, 2024
 *      Author: Admin
 */
#include "fsm_setting.h"

void fsm_setting_run(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 8000780:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <fsm_setting_run+0x170>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3b01      	subs	r3, #1
 8000786:	2b18      	cmp	r3, #24
 8000788:	f200 80a4 	bhi.w	80008d4 <fsm_setting_run+0x158>
 800078c:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <fsm_setting_run+0x18>)
 800078e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000792:	bf00      	nop
 8000794:	080007f9 	.word	0x080007f9
 8000798:	080008d5 	.word	0x080008d5
 800079c:	080008d5 	.word	0x080008d5
 80007a0:	080008d5 	.word	0x080008d5
 80007a4:	080008d5 	.word	0x080008d5
 80007a8:	080008d5 	.word	0x080008d5
 80007ac:	080008d5 	.word	0x080008d5
 80007b0:	080008d5 	.word	0x080008d5
 80007b4:	080008d5 	.word	0x080008d5
 80007b8:	080008d5 	.word	0x080008d5
 80007bc:	080008d5 	.word	0x080008d5
 80007c0:	080008d5 	.word	0x080008d5
 80007c4:	080008d5 	.word	0x080008d5
 80007c8:	080008d5 	.word	0x080008d5
 80007cc:	080008d5 	.word	0x080008d5
 80007d0:	080008d5 	.word	0x080008d5
 80007d4:	080008d5 	.word	0x080008d5
 80007d8:	080008d5 	.word	0x080008d5
 80007dc:	080008d5 	.word	0x080008d5
 80007e0:	080008d5 	.word	0x080008d5
 80007e4:	080008d5 	.word	0x080008d5
 80007e8:	08000801 	.word	0x08000801
 80007ec:	08000823 	.word	0x08000823
 80007f0:	0800085b 	.word	0x0800085b
 80007f4:	08000893 	.word	0x08000893
	case INIT:
		STATUS_MODE= MODE1;
 80007f8:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <fsm_setting_run+0x170>)
 80007fa:	2216      	movs	r2, #22
 80007fc:	601a      	str	r2, [r3, #0]
		break;
 80007fe:	e072      	b.n	80008e6 <fsm_setting_run+0x16a>
	case MODE1:
		if(isButtonPressed(0)){
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff fca3 	bl	800014c <isButtonPressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d065      	beq.n	80008d8 <fsm_setting_run+0x15c>
			STATUS_MODE = MODE2;
 800080c:	4b37      	ldr	r3, [pc, #220]	; (80008ec <fsm_setting_run+0x170>)
 800080e:	2217      	movs	r2, #23
 8000810:	601a      	str	r2, [r3, #0]
			value = TimeRed;
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <fsm_setting_run+0x174>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a37      	ldr	r2, [pc, #220]	; (80008f4 <fsm_setting_run+0x178>)
 8000818:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <fsm_setting_run+0x17c>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000820:	e05a      	b.n	80008d8 <fsm_setting_run+0x15c>
	case MODE2:
		if(isButtonPressed(0)){
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fc92 	bl	800014c <isButtonPressed>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00a      	beq.n	8000844 <fsm_setting_run+0xc8>
			STATUS_MODE = MODE3;
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <fsm_setting_run+0x170>)
 8000830:	2218      	movs	r2, #24
 8000832:	601a      	str	r2, [r3, #0]
			value = TimeYellow;
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <fsm_setting_run+0x180>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <fsm_setting_run+0x178>)
 800083a:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <fsm_setting_run+0x17c>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeRed = value;
		}
		break;
 8000842:	e04b      	b.n	80008dc <fsm_setting_run+0x160>
		else if(isButtonPressed(2)){
 8000844:	2002      	movs	r0, #2
 8000846:	f7ff fc81 	bl	800014c <isButtonPressed>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d045      	beq.n	80008dc <fsm_setting_run+0x160>
			TimeRed = value;
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <fsm_setting_run+0x178>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <fsm_setting_run+0x174>)
 8000856:	6013      	str	r3, [r2, #0]
		break;
 8000858:	e040      	b.n	80008dc <fsm_setting_run+0x160>
	case MODE3:
		if(isButtonPressed(0)){
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fc76 	bl	800014c <isButtonPressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00a      	beq.n	800087c <fsm_setting_run+0x100>
			STATUS_MODE = MODE4;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <fsm_setting_run+0x170>)
 8000868:	2219      	movs	r2, #25
 800086a:	601a      	str	r2, [r3, #0]
			value = TimeGreen;
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <fsm_setting_run+0x184>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a20      	ldr	r2, [pc, #128]	; (80008f4 <fsm_setting_run+0x178>)
 8000872:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <fsm_setting_run+0x17c>)
 8000876:	2201      	movs	r2, #1
 8000878:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeYellow = value;
		}
		break;
 800087a:	e031      	b.n	80008e0 <fsm_setting_run+0x164>
		else if(isButtonPressed(2)){
 800087c:	2002      	movs	r0, #2
 800087e:	f7ff fc65 	bl	800014c <isButtonPressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d02b      	beq.n	80008e0 <fsm_setting_run+0x164>
			TimeYellow = value;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <fsm_setting_run+0x178>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <fsm_setting_run+0x180>)
 800088e:	6013      	str	r3, [r2, #0]
		break;
 8000890:	e026      	b.n	80008e0 <fsm_setting_run+0x164>
	case MODE4:
		if(isButtonPressed(0)){
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fc5a 	bl	800014c <isButtonPressed>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00f      	beq.n	80008be <fsm_setting_run+0x142>
			STATUS_MODE = MODE1;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <fsm_setting_run+0x170>)
 80008a0:	2216      	movs	r2, #22
 80008a2:	601a      	str	r2, [r3, #0]

			STATUS_LED1 = INIT;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <fsm_setting_run+0x188>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
			STATUS_LED2 = INIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <fsm_setting_run+0x18c>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	601a      	str	r2, [r3, #0]
			STATUS_7SEG = INIT;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <fsm_setting_run+0x190>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]

			STATUS_BLINKY = INIT;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <fsm_setting_run+0x17c>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeGreen = value;
		}
		break;
 80008bc:	e012      	b.n	80008e4 <fsm_setting_run+0x168>
		else if(isButtonPressed(2)){
 80008be:	2002      	movs	r0, #2
 80008c0:	f7ff fc44 	bl	800014c <isButtonPressed>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00c      	beq.n	80008e4 <fsm_setting_run+0x168>
			TimeGreen = value;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <fsm_setting_run+0x178>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <fsm_setting_run+0x184>)
 80008d0:	6013      	str	r3, [r2, #0]
		break;
 80008d2:	e007      	b.n	80008e4 <fsm_setting_run+0x168>
	default:
		break;
 80008d4:	bf00      	nop
 80008d6:	e006      	b.n	80008e6 <fsm_setting_run+0x16a>
		break;
 80008d8:	bf00      	nop
 80008da:	e004      	b.n	80008e6 <fsm_setting_run+0x16a>
		break;
 80008dc:	bf00      	nop
 80008de:	e002      	b.n	80008e6 <fsm_setting_run+0x16a>
		break;
 80008e0:	bf00      	nop
 80008e2:	e000      	b.n	80008e6 <fsm_setting_run+0x16a>
		break;
 80008e4:	bf00      	nop
	}


}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000040 	.word	0x20000040
 80008f0:	20000048 	.word	0x20000048
 80008f4:	200000a0 	.word	0x200000a0
 80008f8:	20000044 	.word	0x20000044
 80008fc:	20000050 	.word	0x20000050
 8000900:	2000004c 	.word	0x2000004c
 8000904:	20000034 	.word	0x20000034
 8000908:	20000038 	.word	0x20000038
 800090c:	2000003c 	.word	0x2000003c

08000910 <display7SEG>:
 *      Author: Admin
 */

#include "led7_segment.h"

void display7SEG(int num){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b09      	cmp	r3, #9
 800091c:	f200 819e 	bhi.w	8000c5c <display7SEG+0x34c>
 8000920:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <display7SEG+0x18>)
 8000922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000926:	bf00      	nop
 8000928:	08000951 	.word	0x08000951
 800092c:	0800099f 	.word	0x0800099f
 8000930:	080009ed 	.word	0x080009ed
 8000934:	08000a3b 	.word	0x08000a3b
 8000938:	08000a89 	.word	0x08000a89
 800093c:	08000ad7 	.word	0x08000ad7
 8000940:	08000b25 	.word	0x08000b25
 8000944:	08000b73 	.word	0x08000b73
 8000948:	08000bc1 	.word	0x08000bc1
 800094c:	08000c0f 	.word	0x08000c0f
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	48c4      	ldr	r0, [pc, #784]	; (8000c68 <display7SEG+0x358>)
 8000958:	f001 fa13 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	48c1      	ldr	r0, [pc, #772]	; (8000c68 <display7SEG+0x358>)
 8000964:	f001 fa0d 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096e:	48be      	ldr	r0, [pc, #760]	; (8000c68 <display7SEG+0x358>)
 8000970:	f001 fa07 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2101      	movs	r1, #1
 8000978:	48bc      	ldr	r0, [pc, #752]	; (8000c6c <display7SEG+0x35c>)
 800097a:	f001 fa02 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	48ba      	ldr	r0, [pc, #744]	; (8000c6c <display7SEG+0x35c>)
 8000984:	f001 f9fd 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2104      	movs	r1, #4
 800098c:	48b7      	ldr	r0, [pc, #732]	; (8000c6c <display7SEG+0x35c>)
 800098e:	f001 f9f8 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2108      	movs	r1, #8
 8000996:	48b5      	ldr	r0, [pc, #724]	; (8000c6c <display7SEG+0x35c>)
 8000998:	f001 f9f3 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 800099c:	e15f      	b.n	8000c5e <display7SEG+0x34e>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	48b0      	ldr	r0, [pc, #704]	; (8000c68 <display7SEG+0x358>)
 80009a6:	f001 f9ec 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b0:	48ad      	ldr	r0, [pc, #692]	; (8000c68 <display7SEG+0x358>)
 80009b2:	f001 f9e6 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009bc:	48aa      	ldr	r0, [pc, #680]	; (8000c68 <display7SEG+0x358>)
 80009be:	f001 f9e0 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2101      	movs	r1, #1
 80009c6:	48a9      	ldr	r0, [pc, #676]	; (8000c6c <display7SEG+0x35c>)
 80009c8:	f001 f9db 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2102      	movs	r1, #2
 80009d0:	48a6      	ldr	r0, [pc, #664]	; (8000c6c <display7SEG+0x35c>)
 80009d2:	f001 f9d6 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2104      	movs	r1, #4
 80009da:	48a4      	ldr	r0, [pc, #656]	; (8000c6c <display7SEG+0x35c>)
 80009dc:	f001 f9d1 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2108      	movs	r1, #8
 80009e4:	48a1      	ldr	r0, [pc, #644]	; (8000c6c <display7SEG+0x35c>)
 80009e6:	f001 f9cc 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 80009ea:	e138      	b.n	8000c5e <display7SEG+0x34e>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f2:	489d      	ldr	r0, [pc, #628]	; (8000c68 <display7SEG+0x358>)
 80009f4:	f001 f9c5 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fe:	489a      	ldr	r0, [pc, #616]	; (8000c68 <display7SEG+0x358>)
 8000a00:	f001 f9bf 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0a:	4897      	ldr	r0, [pc, #604]	; (8000c68 <display7SEG+0x358>)
 8000a0c:	f001 f9b9 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	4895      	ldr	r0, [pc, #596]	; (8000c6c <display7SEG+0x35c>)
 8000a16:	f001 f9b4 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4893      	ldr	r0, [pc, #588]	; (8000c6c <display7SEG+0x35c>)
 8000a20:	f001 f9af 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2104      	movs	r1, #4
 8000a28:	4890      	ldr	r0, [pc, #576]	; (8000c6c <display7SEG+0x35c>)
 8000a2a:	f001 f9aa 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2108      	movs	r1, #8
 8000a32:	488e      	ldr	r0, [pc, #568]	; (8000c6c <display7SEG+0x35c>)
 8000a34:	f001 f9a5 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000a38:	e111      	b.n	8000c5e <display7SEG+0x34e>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a40:	4889      	ldr	r0, [pc, #548]	; (8000c68 <display7SEG+0x358>)
 8000a42:	f001 f99e 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4c:	4886      	ldr	r0, [pc, #536]	; (8000c68 <display7SEG+0x358>)
 8000a4e:	f001 f998 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a58:	4883      	ldr	r0, [pc, #524]	; (8000c68 <display7SEG+0x358>)
 8000a5a:	f001 f992 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2101      	movs	r1, #1
 8000a62:	4882      	ldr	r0, [pc, #520]	; (8000c6c <display7SEG+0x35c>)
 8000a64:	f001 f98d 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	487f      	ldr	r0, [pc, #508]	; (8000c6c <display7SEG+0x35c>)
 8000a6e:	f001 f988 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2104      	movs	r1, #4
 8000a76:	487d      	ldr	r0, [pc, #500]	; (8000c6c <display7SEG+0x35c>)
 8000a78:	f001 f983 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2108      	movs	r1, #8
 8000a80:	487a      	ldr	r0, [pc, #488]	; (8000c6c <display7SEG+0x35c>)
 8000a82:	f001 f97e 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000a86:	e0ea      	b.n	8000c5e <display7SEG+0x34e>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4876      	ldr	r0, [pc, #472]	; (8000c68 <display7SEG+0x358>)
 8000a90:	f001 f977 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a9a:	4873      	ldr	r0, [pc, #460]	; (8000c68 <display7SEG+0x358>)
 8000a9c:	f001 f971 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa6:	4870      	ldr	r0, [pc, #448]	; (8000c68 <display7SEG+0x358>)
 8000aa8:	f001 f96b 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2101      	movs	r1, #1
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <display7SEG+0x35c>)
 8000ab2:	f001 f966 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2102      	movs	r1, #2
 8000aba:	486c      	ldr	r0, [pc, #432]	; (8000c6c <display7SEG+0x35c>)
 8000abc:	f001 f961 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4869      	ldr	r0, [pc, #420]	; (8000c6c <display7SEG+0x35c>)
 8000ac6:	f001 f95c 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2108      	movs	r1, #8
 8000ace:	4867      	ldr	r0, [pc, #412]	; (8000c6c <display7SEG+0x35c>)
 8000ad0:	f001 f957 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000ad4:	e0c3      	b.n	8000c5e <display7SEG+0x34e>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	4862      	ldr	r0, [pc, #392]	; (8000c68 <display7SEG+0x358>)
 8000ade:	f001 f950 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae8:	485f      	ldr	r0, [pc, #380]	; (8000c68 <display7SEG+0x358>)
 8000aea:	f001 f94a 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af4:	485c      	ldr	r0, [pc, #368]	; (8000c68 <display7SEG+0x358>)
 8000af6:	f001 f944 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2101      	movs	r1, #1
 8000afe:	485b      	ldr	r0, [pc, #364]	; (8000c6c <display7SEG+0x35c>)
 8000b00:	f001 f93f 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2102      	movs	r1, #2
 8000b08:	4858      	ldr	r0, [pc, #352]	; (8000c6c <display7SEG+0x35c>)
 8000b0a:	f001 f93a 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2104      	movs	r1, #4
 8000b12:	4856      	ldr	r0, [pc, #344]	; (8000c6c <display7SEG+0x35c>)
 8000b14:	f001 f935 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	4853      	ldr	r0, [pc, #332]	; (8000c6c <display7SEG+0x35c>)
 8000b1e:	f001 f930 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000b22:	e09c      	b.n	8000c5e <display7SEG+0x34e>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	484f      	ldr	r0, [pc, #316]	; (8000c68 <display7SEG+0x358>)
 8000b2c:	f001 f929 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	484c      	ldr	r0, [pc, #304]	; (8000c68 <display7SEG+0x358>)
 8000b38:	f001 f923 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b42:	4849      	ldr	r0, [pc, #292]	; (8000c68 <display7SEG+0x358>)
 8000b44:	f001 f91d 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4847      	ldr	r0, [pc, #284]	; (8000c6c <display7SEG+0x35c>)
 8000b4e:	f001 f918 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2102      	movs	r1, #2
 8000b56:	4845      	ldr	r0, [pc, #276]	; (8000c6c <display7SEG+0x35c>)
 8000b58:	f001 f913 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2104      	movs	r1, #4
 8000b60:	4842      	ldr	r0, [pc, #264]	; (8000c6c <display7SEG+0x35c>)
 8000b62:	f001 f90e 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2108      	movs	r1, #8
 8000b6a:	4840      	ldr	r0, [pc, #256]	; (8000c6c <display7SEG+0x35c>)
 8000b6c:	f001 f909 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000b70:	e075      	b.n	8000c5e <display7SEG+0x34e>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b78:	483b      	ldr	r0, [pc, #236]	; (8000c68 <display7SEG+0x358>)
 8000b7a:	f001 f902 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	4838      	ldr	r0, [pc, #224]	; (8000c68 <display7SEG+0x358>)
 8000b86:	f001 f8fc 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b90:	4835      	ldr	r0, [pc, #212]	; (8000c68 <display7SEG+0x358>)
 8000b92:	f001 f8f6 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4834      	ldr	r0, [pc, #208]	; (8000c6c <display7SEG+0x35c>)
 8000b9c:	f001 f8f1 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4831      	ldr	r0, [pc, #196]	; (8000c6c <display7SEG+0x35c>)
 8000ba6:	f001 f8ec 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2104      	movs	r1, #4
 8000bae:	482f      	ldr	r0, [pc, #188]	; (8000c6c <display7SEG+0x35c>)
 8000bb0:	f001 f8e7 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	482c      	ldr	r0, [pc, #176]	; (8000c6c <display7SEG+0x35c>)
 8000bba:	f001 f8e2 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000bbe:	e04e      	b.n	8000c5e <display7SEG+0x34e>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc6:	4828      	ldr	r0, [pc, #160]	; (8000c68 <display7SEG+0x358>)
 8000bc8:	f001 f8db 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd2:	4825      	ldr	r0, [pc, #148]	; (8000c68 <display7SEG+0x358>)
 8000bd4:	f001 f8d5 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bde:	4822      	ldr	r0, [pc, #136]	; (8000c68 <display7SEG+0x358>)
 8000be0:	f001 f8cf 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	4820      	ldr	r0, [pc, #128]	; (8000c6c <display7SEG+0x35c>)
 8000bea:	f001 f8ca 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <display7SEG+0x35c>)
 8000bf4:	f001 f8c5 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <display7SEG+0x35c>)
 8000bfe:	f001 f8c0 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	4819      	ldr	r0, [pc, #100]	; (8000c6c <display7SEG+0x35c>)
 8000c08:	f001 f8bb 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000c0c:	e027      	b.n	8000c5e <display7SEG+0x34e>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <display7SEG+0x358>)
 8000c16:	f001 f8b4 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <display7SEG+0x358>)
 8000c22:	f001 f8ae 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <display7SEG+0x358>)
 8000c2e:	f001 f8a8 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2101      	movs	r1, #1
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <display7SEG+0x35c>)
 8000c38:	f001 f8a3 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2102      	movs	r1, #2
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <display7SEG+0x35c>)
 8000c42:	f001 f89e 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <display7SEG+0x35c>)
 8000c4c:	f001 f899 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2108      	movs	r1, #8
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <display7SEG+0x35c>)
 8000c56:	f001 f894 	bl	8001d82 <HAL_GPIO_WritePin>
		break;
 8000c5a:	e000      	b.n	8000c5e <display7SEG+0x34e>
	default:
		break;
 8000c5c:	bf00      	nop
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <update7SEG>:


void update7SEG(int index){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	f200 8084 	bhi.w	8000d88 <update7SEG+0x118>
 8000c80:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <update7SEG+0x18>)
 8000c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c86:	bf00      	nop
 8000c88:	08000c99 	.word	0x08000c99
 8000c8c:	08000cd5 	.word	0x08000cd5
 8000c90:	08000d11 	.word	0x08000d11
 8000c94:	08000d4d 	.word	0x08000d4d
	switch (index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9e:	483d      	ldr	r0, [pc, #244]	; (8000d94 <update7SEG+0x124>)
 8000ca0:	f001 f86f 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000caa:	483a      	ldr	r0, [pc, #232]	; (8000d94 <update7SEG+0x124>)
 8000cac:	f001 f869 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb6:	4837      	ldr	r0, [pc, #220]	; (8000d94 <update7SEG+0x124>)
 8000cb8:	f001 f863 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc2:	4834      	ldr	r0, [pc, #208]	; (8000d94 <update7SEG+0x124>)
 8000cc4:	f001 f85d 	bl	8001d82 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[0]);
 8000cc8:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <update7SEG+0x128>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fe1f 	bl	8000910 <display7SEG>
		break;
 8000cd2:	e05a      	b.n	8000d8a <update7SEG+0x11a>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cda:	482e      	ldr	r0, [pc, #184]	; (8000d94 <update7SEG+0x124>)
 8000cdc:	f001 f851 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	482b      	ldr	r0, [pc, #172]	; (8000d94 <update7SEG+0x124>)
 8000ce8:	f001 f84b 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf2:	4828      	ldr	r0, [pc, #160]	; (8000d94 <update7SEG+0x124>)
 8000cf4:	f001 f845 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfe:	4825      	ldr	r0, [pc, #148]	; (8000d94 <update7SEG+0x124>)
 8000d00:	f001 f83f 	bl	8001d82 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[1]);
 8000d04:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <update7SEG+0x128>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fe01 	bl	8000910 <display7SEG>
		break;
 8000d0e:	e03c      	b.n	8000d8a <update7SEG+0x11a>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d16:	481f      	ldr	r0, [pc, #124]	; (8000d94 <update7SEG+0x124>)
 8000d18:	f001 f833 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d22:	481c      	ldr	r0, [pc, #112]	; (8000d94 <update7SEG+0x124>)
 8000d24:	f001 f82d 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2e:	4819      	ldr	r0, [pc, #100]	; (8000d94 <update7SEG+0x124>)
 8000d30:	f001 f827 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3a:	4816      	ldr	r0, [pc, #88]	; (8000d94 <update7SEG+0x124>)
 8000d3c:	f001 f821 	bl	8001d82 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[2]);
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <update7SEG+0x128>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fde3 	bl	8000910 <display7SEG>
		break;
 8000d4a:	e01e      	b.n	8000d8a <update7SEG+0x11a>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d52:	4810      	ldr	r0, [pc, #64]	; (8000d94 <update7SEG+0x124>)
 8000d54:	f001 f815 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <update7SEG+0x124>)
 8000d60:	f001 f80f 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6a:	480a      	ldr	r0, [pc, #40]	; (8000d94 <update7SEG+0x124>)
 8000d6c:	f001 f809 	bl	8001d82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <update7SEG+0x124>)
 8000d78:	f001 f803 	bl	8001d82 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[3]);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <update7SEG+0x128>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fdc5 	bl	8000910 <display7SEG>
		break;
 8000d86:	e000      	b.n	8000d8a <update7SEG+0x11a>
	default:
		break;
 8000d88:	bf00      	nop
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	20000090 	.word	0x20000090

08000d9c <updateBuffer>:

void updateBuffer(int mode){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b16      	subs	r3, #22
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	f200 809e 	bhi.w	8000eea <updateBuffer+0x14e>
 8000dae:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <updateBuffer+0x18>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000dc5 	.word	0x08000dc5
 8000db8:	08000e2b 	.word	0x08000e2b
 8000dbc:	08000e6b 	.word	0x08000e6b
 8000dc0:	08000eab 	.word	0x08000eab
	switch(mode){
	case MODE1:
		buffer_7seg[0] = TimeForLed1 / 10;
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <updateBuffer+0x15c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a4c      	ldr	r2, [pc, #304]	; (8000efc <updateBuffer+0x160>)
 8000dca:	fb82 1203 	smull	r1, r2, r2, r3
 8000dce:	1092      	asrs	r2, r2, #2
 8000dd0:	17db      	asrs	r3, r3, #31
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	4a4a      	ldr	r2, [pc, #296]	; (8000f00 <updateBuffer+0x164>)
 8000dd6:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = TimeForLed1 % 10;
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <updateBuffer+0x15c>)
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	4b47      	ldr	r3, [pc, #284]	; (8000efc <updateBuffer+0x160>)
 8000dde:	fb83 2301 	smull	r2, r3, r3, r1
 8000de2:	109a      	asrs	r2, r3, #2
 8000de4:	17cb      	asrs	r3, r1, #31
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	1aca      	subs	r2, r1, r3
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <updateBuffer+0x164>)
 8000df4:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = TimeForLed2 / 10;
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <updateBuffer+0x168>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a40      	ldr	r2, [pc, #256]	; (8000efc <updateBuffer+0x160>)
 8000dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000e00:	1092      	asrs	r2, r2, #2
 8000e02:	17db      	asrs	r3, r3, #31
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	4a3e      	ldr	r2, [pc, #248]	; (8000f00 <updateBuffer+0x164>)
 8000e08:	6093      	str	r3, [r2, #8]
		buffer_7seg[3] = TimeForLed2 % 10;
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <updateBuffer+0x168>)
 8000e0c:	6819      	ldr	r1, [r3, #0]
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <updateBuffer+0x160>)
 8000e10:	fb83 2301 	smull	r2, r3, r3, r1
 8000e14:	109a      	asrs	r2, r3, #2
 8000e16:	17cb      	asrs	r3, r1, #31
 8000e18:	1ad2      	subs	r2, r2, r3
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	1aca      	subs	r2, r1, r3
 8000e24:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <updateBuffer+0x164>)
 8000e26:	60da      	str	r2, [r3, #12]
		break;
 8000e28:	e060      	b.n	8000eec <updateBuffer+0x150>
	case MODE2:
		buffer_7seg[0] = value / 10;
 8000e2a:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <updateBuffer+0x16c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a33      	ldr	r2, [pc, #204]	; (8000efc <updateBuffer+0x160>)
 8000e30:	fb82 1203 	smull	r1, r2, r2, r3
 8000e34:	1092      	asrs	r2, r2, #2
 8000e36:	17db      	asrs	r3, r3, #31
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	4a31      	ldr	r2, [pc, #196]	; (8000f00 <updateBuffer+0x164>)
 8000e3c:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <updateBuffer+0x16c>)
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <updateBuffer+0x160>)
 8000e44:	fb83 2301 	smull	r2, r3, r3, r1
 8000e48:	109a      	asrs	r2, r3, #2
 8000e4a:	17cb      	asrs	r3, r1, #31
 8000e4c:	1ad2      	subs	r2, r2, r3
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1aca      	subs	r2, r1, r3
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <updateBuffer+0x164>)
 8000e5a:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <updateBuffer+0x164>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 2;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <updateBuffer+0x164>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	60da      	str	r2, [r3, #12]
		break;
 8000e68:	e040      	b.n	8000eec <updateBuffer+0x150>
	case MODE3:
		buffer_7seg[0] = value / 10;
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <updateBuffer+0x16c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <updateBuffer+0x160>)
 8000e70:	fb82 1203 	smull	r1, r2, r2, r3
 8000e74:	1092      	asrs	r2, r2, #2
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <updateBuffer+0x164>)
 8000e7c:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <updateBuffer+0x16c>)
 8000e80:	6819      	ldr	r1, [r3, #0]
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <updateBuffer+0x160>)
 8000e84:	fb83 2301 	smull	r2, r3, r3, r1
 8000e88:	109a      	asrs	r2, r3, #2
 8000e8a:	17cb      	asrs	r3, r1, #31
 8000e8c:	1ad2      	subs	r2, r2, r3
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	1aca      	subs	r2, r1, r3
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <updateBuffer+0x164>)
 8000e9a:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <updateBuffer+0x164>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 3;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <updateBuffer+0x164>)
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	60da      	str	r2, [r3, #12]
		break;
 8000ea8:	e020      	b.n	8000eec <updateBuffer+0x150>
	case MODE4:
		buffer_7seg[0] = value / 10;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <updateBuffer+0x16c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <updateBuffer+0x160>)
 8000eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb4:	1092      	asrs	r2, r2, #2
 8000eb6:	17db      	asrs	r3, r3, #31
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <updateBuffer+0x164>)
 8000ebc:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <updateBuffer+0x16c>)
 8000ec0:	6819      	ldr	r1, [r3, #0]
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <updateBuffer+0x160>)
 8000ec4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ec8:	109a      	asrs	r2, r3, #2
 8000eca:	17cb      	asrs	r3, r1, #31
 8000ecc:	1ad2      	subs	r2, r2, r3
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1aca      	subs	r2, r1, r3
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <updateBuffer+0x164>)
 8000eda:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <updateBuffer+0x164>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 4;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <updateBuffer+0x164>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	60da      	str	r2, [r3, #12]
		break;
 8000ee8:	e000      	b.n	8000eec <updateBuffer+0x150>
	default:
		break;
 8000eea:	bf00      	nop
	}
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000054 	.word	0x20000054
 8000efc:	66666667 	.word	0x66666667
 8000f00:	20000090 	.word	0x20000090
 8000f04:	20000058 	.word	0x20000058
 8000f08:	200000a0 	.word	0x200000a0

08000f0c <display_led7seg>:
// hiển thị led 7 đoạn với T = 0.25s
void display_led7seg(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	switch(STATUS_7SEG){
 8000f10:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <display_led7seg+0x13c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	2b20      	cmp	r3, #32
 8000f18:	f200 808a 	bhi.w	8001030 <display_led7seg+0x124>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <display_led7seg+0x18>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000fa9 	.word	0x08000fa9
 8000f28:	08001031 	.word	0x08001031
 8000f2c:	08001031 	.word	0x08001031
 8000f30:	08001031 	.word	0x08001031
 8000f34:	08001031 	.word	0x08001031
 8000f38:	08001031 	.word	0x08001031
 8000f3c:	08001031 	.word	0x08001031
 8000f40:	08001031 	.word	0x08001031
 8000f44:	08001031 	.word	0x08001031
 8000f48:	08001031 	.word	0x08001031
 8000f4c:	08001031 	.word	0x08001031
 8000f50:	08001031 	.word	0x08001031
 8000f54:	08001031 	.word	0x08001031
 8000f58:	08001031 	.word	0x08001031
 8000f5c:	08001031 	.word	0x08001031
 8000f60:	08001031 	.word	0x08001031
 8000f64:	08001031 	.word	0x08001031
 8000f68:	08001031 	.word	0x08001031
 8000f6c:	08001031 	.word	0x08001031
 8000f70:	08001031 	.word	0x08001031
 8000f74:	08001031 	.word	0x08001031
 8000f78:	08001031 	.word	0x08001031
 8000f7c:	08001031 	.word	0x08001031
 8000f80:	08001031 	.word	0x08001031
 8000f84:	08001031 	.word	0x08001031
 8000f88:	08001031 	.word	0x08001031
 8000f8c:	08001031 	.word	0x08001031
 8000f90:	08001031 	.word	0x08001031
 8000f94:	08001031 	.word	0x08001031
 8000f98:	08000fb9 	.word	0x08000fb9
 8000f9c:	08000fd7 	.word	0x08000fd7
 8000fa0:	08000ff5 	.word	0x08000ff5
 8000fa4:	08001013 	.word	0x08001013
	case INIT:
		STATUS_7SEG = LED7SEG1;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <display_led7seg+0x13c>)
 8000faa:	221e      	movs	r2, #30
 8000fac:	601a      	str	r2, [r3, #0]
		setTimer(5, 250);
 8000fae:	21fa      	movs	r1, #250	; 0xfa
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f000 f975 	bl	80012a0 <setTimer>
		break;
 8000fb6:	e044      	b.n	8001042 <display_led7seg+0x136>
	case LED7SEG1:
		update7SEG(0);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fe59 	bl	8000c70 <update7SEG>
		if(timer_flag[5] == 1){
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <display_led7seg+0x140>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d136      	bne.n	8001034 <display_led7seg+0x128>
			setTimer(5, 250);
 8000fc6:	21fa      	movs	r1, #250	; 0xfa
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f000 f969 	bl	80012a0 <setTimer>
			STATUS_7SEG = LED7SEG2;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <display_led7seg+0x13c>)
 8000fd0:	221f      	movs	r2, #31
 8000fd2:	601a      	str	r2, [r3, #0]
		}
		break;
 8000fd4:	e02e      	b.n	8001034 <display_led7seg+0x128>
	case LED7SEG2:
		update7SEG(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff fe4a 	bl	8000c70 <update7SEG>
		if(timer_flag[5] == 1){
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <display_led7seg+0x140>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d129      	bne.n	8001038 <display_led7seg+0x12c>
			setTimer(5, 250);
 8000fe4:	21fa      	movs	r1, #250	; 0xfa
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f000 f95a 	bl	80012a0 <setTimer>
			STATUS_7SEG = LED7SEG3;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <display_led7seg+0x13c>)
 8000fee:	2220      	movs	r2, #32
 8000ff0:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ff2:	e021      	b.n	8001038 <display_led7seg+0x12c>
	case LED7SEG3:
		update7SEG(2);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff fe3b 	bl	8000c70 <update7SEG>
		if(timer_flag[5] == 1){
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <display_led7seg+0x140>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d11c      	bne.n	800103c <display_led7seg+0x130>
			setTimer(5, 250);
 8001002:	21fa      	movs	r1, #250	; 0xfa
 8001004:	2005      	movs	r0, #5
 8001006:	f000 f94b 	bl	80012a0 <setTimer>
			STATUS_7SEG = LED7SEG4;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <display_led7seg+0x13c>)
 800100c:	2221      	movs	r2, #33	; 0x21
 800100e:	601a      	str	r2, [r3, #0]
		}
		break;
 8001010:	e014      	b.n	800103c <display_led7seg+0x130>
	case LED7SEG4:
		update7SEG(3);
 8001012:	2003      	movs	r0, #3
 8001014:	f7ff fe2c 	bl	8000c70 <update7SEG>
		if(timer_flag[5] == 1){
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <display_led7seg+0x140>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10f      	bne.n	8001040 <display_led7seg+0x134>
			setTimer(5, 250);
 8001020:	21fa      	movs	r1, #250	; 0xfa
 8001022:	2005      	movs	r0, #5
 8001024:	f000 f93c 	bl	80012a0 <setTimer>
			STATUS_7SEG = LED7SEG1;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <display_led7seg+0x13c>)
 800102a:	221e      	movs	r2, #30
 800102c:	601a      	str	r2, [r3, #0]
		}
		break;
 800102e:	e007      	b.n	8001040 <display_led7seg+0x134>
	default:
		break;
 8001030:	bf00      	nop
 8001032:	e006      	b.n	8001042 <display_led7seg+0x136>
		break;
 8001034:	bf00      	nop
 8001036:	e004      	b.n	8001042 <display_led7seg+0x136>
		break;
 8001038:	bf00      	nop
 800103a:	e002      	b.n	8001042 <display_led7seg+0x136>
		break;
 800103c:	bf00      	nop
 800103e:	e000      	b.n	8001042 <display_led7seg+0x136>
		break;
 8001040:	bf00      	nop
	}
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000003c 	.word	0x2000003c
 800104c:	200000bc 	.word	0x200000bc

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f000 fb94 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f826 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 f8ac 	bl	80011b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001060:	f000 f85e 	bl	8001120 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <main+0x4c>)
 8001066:	f001 fae9 	bl	800263c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //STATUS_7SEG = INIT;
  //STATUS_MODE = MODE1;
  //STATUS_MODE = MODE2;
  setTimer(0, 500);
 800106a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f916 	bl	80012a0 <setTimer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // DEBUG
	  if(timer_flag[0] == 1){
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <main+0x50>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d108      	bne.n	800108e <main+0x3e>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800107c:	2102      	movs	r1, #2
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <main+0x54>)
 8001080:	f000 fe97 	bl	8001db2 <HAL_GPIO_TogglePin>
		  setTimer(0, 500);
 8001084:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f909 	bl	80012a0 <setTimer>
//	  }
//	  if(isButtonPressed(2) == 1) {
//		  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
//	  }

	  fsm_setting_run();
 800108e:	f7ff fb75 	bl	800077c <fsm_setting_run>
	  fsm_automatic_run();
 8001092:	f7ff f9b7 	bl	8000404 <fsm_automatic_run>
	  fsm_manual_run();
 8001096:	f7ff fb03 	bl	80006a0 <fsm_manual_run>
	  if(timer_flag[0] == 1){
 800109a:	e7eb      	b.n	8001074 <main+0x24>
 800109c:	200000d4 	.word	0x200000d4
 80010a0:	200000bc 	.word	0x200000bc
 80010a4:	40010800 	.word	0x40010800

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fe70 	bl	8002d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d2:	2310      	movs	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fe80 	bl	8001de4 <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ea:	f000 f8d3 	bl	8001294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f8ec 	bl	80022e4 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001112:	f000 f8bf 	bl	8001294 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3740      	adds	r7, #64	; 0x40
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM2_Init+0x94>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001146:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800114a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM2_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001154:	2209      	movs	r2, #9
 8001156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_TIM2_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001166:	f001 fa19 	bl	800259c <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001170:	f000 f890 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001182:	f001 fb97 	bl	80028b4 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800118c:	f000 f882 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM2_Init+0x94>)
 800119e:	f001 fd6f 	bl	8002c80 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f000 f874 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000d4 	.word	0x200000d4

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_GPIO_Init+0xb8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <MX_GPIO_Init+0xb8>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_GPIO_Init+0xb8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_GPIO_Init+0xb8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_GPIO_Init+0xb8>)
 80011ea:	f043 0308 	orr.w	r3, r3, #8
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_GPIO_Init+0xb8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 80011fc:	2200      	movs	r2, #0
 80011fe:	f64f 718e 	movw	r1, #65422	; 0xff8e
 8001202:	481c      	ldr	r0, [pc, #112]	; (8001274 <MX_GPIO_Init+0xbc>)
 8001204:	f000 fdbd 	bl	8001d82 <HAL_GPIO_WritePin>
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 8001208:	2200      	movs	r2, #0
 800120a:	f24f 010f 	movw	r1, #61455	; 0xf00f
 800120e:	481a      	ldr	r0, [pc, #104]	; (8001278 <MX_GPIO_Init+0xc0>)
 8001210:	f000 fdb7 	bl	8001d82 <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin RED1_Pin
                           YELLOW1_Pin GREEN1_Pin RED2_Pin YELLOW2_Pin
                           GREEN2_Pin SEG_0_Pin SEG_1_Pin SEG_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 8001214:	f64f 738e 	movw	r3, #65422	; 0xff8e
 8001218:	60bb      	str	r3, [r7, #8]
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2302      	movs	r3, #2
 8001224:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4619      	mov	r1, r3
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_GPIO_Init+0xbc>)
 800122e:	f000 fc17 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001232:	2370      	movs	r3, #112	; 0x70
 8001234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123a:	2301      	movs	r3, #1
 800123c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4619      	mov	r1, r3
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0xbc>)
 8001246:	f000 fc0b 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_3_Pin SEG_4_Pin SEG_5_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 800124a:	f24f 030f 	movw	r3, #61455	; 0xf00f
 800124e:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2302      	movs	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_GPIO_Init+0xc0>)
 8001264:	f000 fbfc 	bl	8001a60 <HAL_GPIO_Init>

}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40010800 	.word	0x40010800
 8001278:	40010c00 	.word	0x40010c00

0800127c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	timerRun();
 8001284:	f000 f82c 	bl	80012e0 <timerRun>
	getKeyInput();
 8001288:	f7fe ff7a 	bl	8000180 <getKeyInput>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <setTimer>:
 *      Author: Admin
 */
#include "software_timer.h"
#define TICK 	10

void setTimer(int index, int duration){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <setTimer+0x34>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2100      	movs	r1, #0
 80012b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration / TICK;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <setTimer+0x38>)
 80012b8:	fb82 1203 	smull	r1, r2, r2, r3
 80012bc:	1092      	asrs	r2, r2, #2
 80012be:	17db      	asrs	r3, r3, #31
 80012c0:	1ad2      	subs	r2, r2, r3
 80012c2:	4906      	ldr	r1, [pc, #24]	; (80012dc <setTimer+0x3c>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	200000bc 	.word	0x200000bc
 80012d8:	66666667 	.word	0x66666667
 80012dc:	200000a4 	.word	0x200000a4

080012e0 <timerRun>:

void timerRun(){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_BUFFER; i++){
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e01c      	b.n	8001326 <timerRun+0x46>
		if(timer_counter[i] > 0){
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <timerRun+0x58>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dd13      	ble.n	8001320 <timerRun+0x40>
			timer_counter[i] --;
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <timerRun+0x58>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <timerRun+0x58>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <timerRun+0x58>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	2b00      	cmp	r3, #0
 8001314:	dc04      	bgt.n	8001320 <timerRun+0x40>
				timer_flag[i] = 1;
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <timerRun+0x5c>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2101      	movs	r1, #1
 800131c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_BUFFER; i++){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3301      	adds	r3, #1
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b05      	cmp	r3, #5
 800132a:	dddf      	ble.n	80012ec <timerRun+0xc>
			}
		}
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	200000a4 	.word	0x200000a4
 800133c:	200000bc 	.word	0x200000bc

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_MspInit+0x5c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_MspInit+0x5c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_MspInit+0x5c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_MspInit+0x5c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x60>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_MspInit+0x60>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b4:	d113      	bne.n	80013de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x44>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201c      	movs	r0, #28
 80013d4:	f000 fb0d 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d8:	201c      	movs	r0, #28
 80013da:	f000 fb26 	bl	8001a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <NMI_Handler+0x4>

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f9eb 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM2_IRQHandler+0x10>)
 8001442:	f001 f947 	bl	80026d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000d4 	.word	0x200000d4

08001450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <OffAll1>:
 *  Created on: Oct 31, 2024
 *      Author: Admin
 */
#include "traffic_light.h"

void OffAll1(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <OffAll1+0x2c>)
 8001466:	f000 fc8c 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <OffAll1+0x2c>)
 8001472:	f000 fc86 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <OffAll1+0x2c>)
 800147e:	f000 fc80 	bl	8001d82 <HAL_GPIO_WritePin>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010800 	.word	0x40010800

0800148c <OffAll2>:
void OffAll2(){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001496:	4808      	ldr	r0, [pc, #32]	; (80014b8 <OffAll2+0x2c>)
 8001498:	f000 fc73 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <OffAll2+0x2c>)
 80014a4:	f000 fc6d 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	4802      	ldr	r0, [pc, #8]	; (80014b8 <OffAll2+0x2c>)
 80014b0:	f000 fc67 	bl	8001d82 <HAL_GPIO_WritePin>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010800 	.word	0x40010800

080014bc <OnLedRed1>:
void OnLedRed1(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <OnLedRed1+0x2c>)
 80014c6:	f000 fc5c 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <OnLedRed1+0x2c>)
 80014d2:	f000 fc56 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <OnLedRed1+0x2c>)
 80014de:	f000 fc50 	bl	8001d82 <HAL_GPIO_WritePin>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40010800 	.word	0x40010800

080014ec <OnLedRed2>:
void OnLedRed2(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f6:	4808      	ldr	r0, [pc, #32]	; (8001518 <OnLedRed2+0x2c>)
 80014f8:	f000 fc43 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <OnLedRed2+0x2c>)
 8001504:	f000 fc3d 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150e:	4802      	ldr	r0, [pc, #8]	; (8001518 <OnLedRed2+0x2c>)
 8001510:	f000 fc37 	bl	8001d82 <HAL_GPIO_WritePin>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40010800 	.word	0x40010800

0800151c <OnLedYellow1>:
void OnLedYellow1(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <OnLedYellow1+0x2c>)
 8001526:	f000 fc2c 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <OnLedYellow1+0x2c>)
 8001532:	f000 fc26 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <OnLedYellow1+0x2c>)
 800153e:	f000 fc20 	bl	8001d82 <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40010800 	.word	0x40010800

0800154c <OnLedYellow2>:
void OnLedYellow2(){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001556:	4808      	ldr	r0, [pc, #32]	; (8001578 <OnLedYellow2+0x2c>)
 8001558:	f000 fc13 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <OnLedYellow2+0x2c>)
 8001564:	f000 fc0d 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156e:	4802      	ldr	r0, [pc, #8]	; (8001578 <OnLedYellow2+0x2c>)
 8001570:	f000 fc07 	bl	8001d82 <HAL_GPIO_WritePin>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40010800 	.word	0x40010800

0800157c <OnLedGreen1>:
void OnLedGreen1(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <OnLedGreen1+0x2c>)
 8001586:	f000 fbfc 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <OnLedGreen1+0x2c>)
 8001592:	f000 fbf6 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <OnLedGreen1+0x2c>)
 800159e:	f000 fbf0 	bl	8001d82 <HAL_GPIO_WritePin>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40010800 	.word	0x40010800

080015ac <OnLedGreen2>:
void OnLedGreen2(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <OnLedGreen2+0x2c>)
 80015b8:	f000 fbe3 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <OnLedGreen2+0x2c>)
 80015c4:	f000 fbdd 	bl	8001d82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ce:	4802      	ldr	r0, [pc, #8]	; (80015d8 <OnLedGreen2+0x2c>)
 80015d0:	f000 fbd7 	bl	8001d82 <HAL_GPIO_WritePin>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010800 	.word	0x40010800

080015dc <BlinkyLedRed1>:


void BlinkyLedRed1(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	4802      	ldr	r0, [pc, #8]	; (80015ec <BlinkyLedRed1+0x10>)
 80015e4:	f000 fbe5 	bl	8001db2 <HAL_GPIO_TogglePin>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010800 	.word	0x40010800

080015f0 <BlinkyLedRed2>:
void BlinkyLedRed2(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80015f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <BlinkyLedRed2+0x14>)
 80015fa:	f000 fbda 	bl	8001db2 <HAL_GPIO_TogglePin>
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40010800 	.word	0x40010800

08001608 <BlinkyLedYellow1>:
void BlinkyLedYellow1(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 800160c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <BlinkyLedYellow1+0x14>)
 8001612:	f000 fbce 	bl	8001db2 <HAL_GPIO_TogglePin>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40010800 	.word	0x40010800

08001620 <BlinkyLedGreen1>:
void BlinkyLedGreen1(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8001624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <BlinkyLedGreen1+0x14>)
 800162a:	f000 fbc2 	bl	8001db2 <HAL_GPIO_TogglePin>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40010800 	.word	0x40010800

08001638 <BlinkyLedYellow2>:
void BlinkyLedYellow2(){
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 800163c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <BlinkyLedYellow2+0x14>)
 8001642:	f000 fbb6 	bl	8001db2 <HAL_GPIO_TogglePin>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010800 	.word	0x40010800

08001650 <BlinkyLedGreen2>:
void BlinkyLedGreen2(){
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <BlinkyLedGreen2+0x14>)
 800165a:	f000 fbaa 	bl	8001db2 <HAL_GPIO_TogglePin>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40010800 	.word	0x40010800

08001668 <BlinkyLed>:
void BlinkyLed(int led){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	switch(STATUS_BLINKY){
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <BlinkyLed+0xc4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b2a      	cmp	r3, #42	; 0x2a
 8001676:	d03f      	beq.n	80016f8 <BlinkyLed+0x90>
 8001678:	2b2a      	cmp	r3, #42	; 0x2a
 800167a:	dc4a      	bgt.n	8001712 <BlinkyLed+0xaa>
 800167c:	2b29      	cmp	r3, #41	; 0x29
 800167e:	d02e      	beq.n	80016de <BlinkyLed+0x76>
 8001680:	2b29      	cmp	r3, #41	; 0x29
 8001682:	dc46      	bgt.n	8001712 <BlinkyLed+0xaa>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <BlinkyLed+0x26>
 8001688:	2b28      	cmp	r3, #40	; 0x28
 800168a:	d01b      	beq.n	80016c4 <BlinkyLed+0x5c>
			BlinkyLedGreen1();
			BlinkyLedGreen2();
		}
		break;
	default:
		break;
 800168c:	e041      	b.n	8001712 <BlinkyLed+0xaa>
		OffAll1();
 800168e:	f7ff fee5 	bl	800145c <OffAll1>
		OffAll2();
 8001692:	f7ff fefb 	bl	800148c <OffAll2>
		setTimer(4, 250);
 8001696:	21fa      	movs	r1, #250	; 0xfa
 8001698:	2004      	movs	r0, #4
 800169a:	f7ff fe01 	bl	80012a0 <setTimer>
		if(led == RED) STATUS_BLINKY = RED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b28      	cmp	r3, #40	; 0x28
 80016a2:	d102      	bne.n	80016aa <BlinkyLed+0x42>
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <BlinkyLed+0xc4>)
 80016a6:	2228      	movs	r2, #40	; 0x28
 80016a8:	601a      	str	r2, [r3, #0]
		if(led == YELLOW) STATUS_BLINKY = YELLOW;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b29      	cmp	r3, #41	; 0x29
 80016ae:	d102      	bne.n	80016b6 <BlinkyLed+0x4e>
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <BlinkyLed+0xc4>)
 80016b2:	2229      	movs	r2, #41	; 0x29
 80016b4:	601a      	str	r2, [r3, #0]
		if(led == GREEN) STATUS_BLINKY = GREEN;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b2a      	cmp	r3, #42	; 0x2a
 80016ba:	d12c      	bne.n	8001716 <BlinkyLed+0xae>
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <BlinkyLed+0xc4>)
 80016be:	222a      	movs	r2, #42	; 0x2a
 80016c0:	601a      	str	r2, [r3, #0]
		break;
 80016c2:	e028      	b.n	8001716 <BlinkyLed+0xae>
		if(timer_flag[4] == 1){
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <BlinkyLed+0xc8>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d126      	bne.n	800171a <BlinkyLed+0xb2>
			setTimer(4, 250);
 80016cc:	21fa      	movs	r1, #250	; 0xfa
 80016ce:	2004      	movs	r0, #4
 80016d0:	f7ff fde6 	bl	80012a0 <setTimer>
			BlinkyLedRed1();
 80016d4:	f7ff ff82 	bl	80015dc <BlinkyLedRed1>
			BlinkyLedRed2();
 80016d8:	f7ff ff8a 	bl	80015f0 <BlinkyLedRed2>
		break;
 80016dc:	e01d      	b.n	800171a <BlinkyLed+0xb2>
		if(timer_flag[4] == 1){
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <BlinkyLed+0xc8>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d11b      	bne.n	800171e <BlinkyLed+0xb6>
			setTimer(4, 250);
 80016e6:	21fa      	movs	r1, #250	; 0xfa
 80016e8:	2004      	movs	r0, #4
 80016ea:	f7ff fdd9 	bl	80012a0 <setTimer>
			BlinkyLedYellow1();
 80016ee:	f7ff ff8b 	bl	8001608 <BlinkyLedYellow1>
			BlinkyLedYellow2();
 80016f2:	f7ff ffa1 	bl	8001638 <BlinkyLedYellow2>
		break;
 80016f6:	e012      	b.n	800171e <BlinkyLed+0xb6>
		if(timer_flag[4] == 1){
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <BlinkyLed+0xc8>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d110      	bne.n	8001722 <BlinkyLed+0xba>
			setTimer(4, 250);
 8001700:	21fa      	movs	r1, #250	; 0xfa
 8001702:	2004      	movs	r0, #4
 8001704:	f7ff fdcc 	bl	80012a0 <setTimer>
			BlinkyLedGreen1();
 8001708:	f7ff ff8a 	bl	8001620 <BlinkyLedGreen1>
			BlinkyLedGreen2();
 800170c:	f7ff ffa0 	bl	8001650 <BlinkyLedGreen2>
		break;
 8001710:	e007      	b.n	8001722 <BlinkyLed+0xba>
		break;
 8001712:	bf00      	nop
 8001714:	e006      	b.n	8001724 <BlinkyLed+0xbc>
		break;
 8001716:	bf00      	nop
 8001718:	e004      	b.n	8001724 <BlinkyLed+0xbc>
		break;
 800171a:	bf00      	nop
 800171c:	e002      	b.n	8001724 <BlinkyLed+0xbc>
		break;
 800171e:	bf00      	nop
 8001720:	e000      	b.n	8001724 <BlinkyLed+0xbc>
		break;
 8001722:	bf00      	nop
	}
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000044 	.word	0x20000044
 8001730:	200000bc 	.word	0x200000bc

08001734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001734:	f7ff fe8c 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800173a:	490c      	ldr	r1, [pc, #48]	; (800176c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <LoopFillZerobss+0x16>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001750:	4c09      	ldr	r4, [pc, #36]	; (8001778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f001 faf9 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001762:	f7ff fc75 	bl	8001050 <main>
  bx lr
 8001766:	4770      	bx	lr
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001770:	08002df0 	.word	0x08002df0
  ldr r2, =_sbss
 8001774:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001778:	20000120 	.word	0x20000120

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_Init+0x28>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_Init+0x28>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 f923 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fdd0 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f93b 	bl	8001a46 <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 f903 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000005c 	.word	0x2000005c
 8001804:	20000064 	.word	0x20000064
 8001808:	20000060 	.word	0x20000060

0800180c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_IncTick+0x1c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x20>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a03      	ldr	r2, [pc, #12]	; (800182c <HAL_IncTick+0x20>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000064 	.word	0x20000064
 800182c:	2000011c 	.word	0x2000011c

08001830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <HAL_GetTick+0x10>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	2000011c 	.word	0x2000011c

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4906      	ldr	r1, [pc, #24]	; (80018dc <__NVIC_EnableIRQ+0x34>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff90 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff2d 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff42 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff90 	bl	8001934 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5f 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff35 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffa2 	bl	8001998 <SysTick_Config>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b08b      	sub	sp, #44	; 0x2c
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	e148      	b.n	8001d06 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a74:	2201      	movs	r2, #1
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f040 8137 	bne.w	8001d00 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4aa3      	ldr	r2, [pc, #652]	; (8001d24 <HAL_GPIO_Init+0x2c4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d05e      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001a9c:	4aa1      	ldr	r2, [pc, #644]	; (8001d24 <HAL_GPIO_Init+0x2c4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d875      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aa2:	4aa1      	ldr	r2, [pc, #644]	; (8001d28 <HAL_GPIO_Init+0x2c8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d058      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001aa8:	4a9f      	ldr	r2, [pc, #636]	; (8001d28 <HAL_GPIO_Init+0x2c8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d86f      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aae:	4a9f      	ldr	r2, [pc, #636]	; (8001d2c <HAL_GPIO_Init+0x2cc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d052      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ab4:	4a9d      	ldr	r2, [pc, #628]	; (8001d2c <HAL_GPIO_Init+0x2cc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d869      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001aba:	4a9d      	ldr	r2, [pc, #628]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d04c      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001ac0:	4a9b      	ldr	r2, [pc, #620]	; (8001d30 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d863      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ac6:	4a9b      	ldr	r2, [pc, #620]	; (8001d34 <HAL_GPIO_Init+0x2d4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d046      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
 8001acc:	4a99      	ldr	r2, [pc, #612]	; (8001d34 <HAL_GPIO_Init+0x2d4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d85d      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d82a      	bhi.n	8001b2c <HAL_GPIO_Init+0xcc>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d859      	bhi.n	8001b8e <HAL_GPIO_Init+0x12e>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <HAL_GPIO_Init+0x80>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001b5b 	.word	0x08001b5b
 8001ae4:	08001b35 	.word	0x08001b35
 8001ae8:	08001b47 	.word	0x08001b47
 8001aec:	08001b89 	.word	0x08001b89
 8001af0:	08001b8f 	.word	0x08001b8f
 8001af4:	08001b8f 	.word	0x08001b8f
 8001af8:	08001b8f 	.word	0x08001b8f
 8001afc:	08001b8f 	.word	0x08001b8f
 8001b00:	08001b8f 	.word	0x08001b8f
 8001b04:	08001b8f 	.word	0x08001b8f
 8001b08:	08001b8f 	.word	0x08001b8f
 8001b0c:	08001b8f 	.word	0x08001b8f
 8001b10:	08001b8f 	.word	0x08001b8f
 8001b14:	08001b8f 	.word	0x08001b8f
 8001b18:	08001b8f 	.word	0x08001b8f
 8001b1c:	08001b8f 	.word	0x08001b8f
 8001b20:	08001b8f 	.word	0x08001b8f
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	4a82      	ldr	r2, [pc, #520]	; (8001d38 <HAL_GPIO_Init+0x2d8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b32:	e02c      	b.n	8001b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e029      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	3304      	adds	r3, #4
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e024      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e01f      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	330c      	adds	r3, #12
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e01a      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b62:	2304      	movs	r3, #4
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e013      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	611a      	str	r2, [r3, #16]
          break;
 8001b7a:	e009      	b.n	8001b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	615a      	str	r2, [r3, #20]
          break;
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x130>
          break;
 8001b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d801      	bhi.n	8001b9a <HAL_GPIO_Init+0x13a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_Init+0x13e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	d802      	bhi.n	8001bac <HAL_GPIO_Init+0x14c>
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x152>
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3b08      	subs	r3, #8
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	210f      	movs	r1, #15
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8090 	beq.w	8001d00 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be0:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <HAL_GPIO_Init+0x2dc>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a55      	ldr	r2, [pc, #340]	; (8001d3c <HAL_GPIO_Init+0x2dc>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_GPIO_Init+0x2dc>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x2e0>)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a49      	ldr	r2, [pc, #292]	; (8001d44 <HAL_GPIO_Init+0x2e4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00d      	beq.n	8001c40 <HAL_GPIO_Init+0x1e0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a48      	ldr	r2, [pc, #288]	; (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x1dc>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a47      	ldr	r2, [pc, #284]	; (8001d4c <HAL_GPIO_Init+0x2ec>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_GPIO_Init+0x1d8>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e004      	b.n	8001c42 <HAL_GPIO_Init+0x1e2>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x1e2>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_GPIO_Init+0x1e2>
 8001c40:	2300      	movs	r3, #0
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c52:	493b      	ldr	r1, [pc, #236]	; (8001d40 <HAL_GPIO_Init+0x2e0>)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4937      	ldr	r1, [pc, #220]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c7a:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4933      	ldr	r1, [pc, #204]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	492d      	ldr	r1, [pc, #180]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4929      	ldr	r1, [pc, #164]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4923      	ldr	r1, [pc, #140]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	491f      	ldr	r1, [pc, #124]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4919      	ldr	r1, [pc, #100]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4915      	ldr	r1, [pc, #84]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	3301      	adds	r3, #1
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f47f aeaf 	bne.w	8001a74 <HAL_GPIO_Init+0x14>
  }
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	372c      	adds	r7, #44	; 0x2c
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	10320000 	.word	0x10320000
 8001d28:	10310000 	.word	0x10310000
 8001d2c:	10220000 	.word	0x10220000
 8001d30:	10210000 	.word	0x10210000
 8001d34:	10120000 	.word	0x10120000
 8001d38:	10110000 	.word	0x10110000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d92:	787b      	ldrb	r3, [r7, #1]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d9e:	e003      	b.n	8001da8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	041a      	lsls	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	611a      	str	r2, [r3, #16]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dc4:	887a      	ldrh	r2, [r7, #2]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	041a      	lsls	r2, r3, #16
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	611a      	str	r2, [r3, #16]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e26c      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8087 	beq.w	8001f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e04:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d00c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e10:	4b8f      	ldr	r3, [pc, #572]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d112      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5e>
 8001e1c:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d10b      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2a:	4b89      	ldr	r3, [pc, #548]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d06c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x12c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d168      	bne.n	8001f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e246      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x76>
 8001e4c:	4b80      	ldr	r3, [pc, #512]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a7f      	ldr	r2, [pc, #508]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e02e      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x98>
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b78      	ldr	r3, [pc, #480]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a77      	ldr	r2, [pc, #476]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xbc>
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a71      	ldr	r2, [pc, #452]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6e      	ldr	r2, [pc, #440]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001ea0:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fcb6 	bl	8001830 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fcb2 	bl	8001830 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1fa      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe4>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fca2 	bl	8001830 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fc9e 	bl	8001830 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1e6      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x10c>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d063      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f2a:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d11c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x18c>
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d116      	bne.n	8001f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_RCC_OscConfig+0x176>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e1ba      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4939      	ldr	r1, [pc, #228]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	e03a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f78:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff fc57 	bl	8001830 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff fc53 	bl	8001830 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e19b      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc36 	bl	8001830 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fc32 	bl	8001830 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e17a      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d03a      	beq.n	8002068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d019      	beq.n	800202e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7ff fc16 	bl	8001830 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fc12 	bl	8001830 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e15a      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002026:	2001      	movs	r0, #1
 8002028:	f000 fa9a 	bl	8002560 <RCC_Delay>
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff fbfc 	bl	8001830 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203a:	e00f      	b.n	800205c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fbf8 	bl	8001830 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d908      	bls.n	800205c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e140      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	42420000 	.word	0x42420000
 8002058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b9e      	ldr	r3, [pc, #632]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e9      	bne.n	800203c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a6 	beq.w	80021c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b97      	ldr	r3, [pc, #604]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10d      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b94      	ldr	r3, [pc, #592]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a93      	ldr	r2, [pc, #588]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	61d3      	str	r3, [r2, #28]
 8002092:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a8a      	ldr	r2, [pc, #552]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff fbb9 	bl	8001830 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7ff fbb5 	bl	8001830 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0fd      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b81      	ldr	r3, [pc, #516]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x312>
 80020e8:	4b7b      	ldr	r3, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a7a      	ldr	r2, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6213      	str	r3, [r2, #32]
 80020f4:	e02d      	b.n	8002152 <HAL_RCC_OscConfig+0x36e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x334>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	e01c      	b.n	8002152 <HAL_RCC_OscConfig+0x36e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b05      	cmp	r3, #5
 800211e:	d10c      	bne.n	800213a <HAL_RCC_OscConfig+0x356>
 8002120:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a6c      	ldr	r2, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	e00b      	b.n	8002152 <HAL_RCC_OscConfig+0x36e>
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d015      	beq.n	8002186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff fb69 	bl	8001830 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff fb65 	bl	8001830 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0ab      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ee      	beq.n	8002162 <HAL_RCC_OscConfig+0x37e>
 8002184:	e014      	b.n	80021b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7ff fb53 	bl	8001830 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff fb4f 	bl	8001830 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e095      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d105      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b6:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8081 	beq.w	80022ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d061      	beq.n	800229c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d146      	bne.n	800226e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_OscConfig+0x4fc>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fb23 	bl	8001830 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff fb1f 	bl	8001830 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e067      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002214:	d108      	bne.n	8002228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	492d      	ldr	r1, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a19      	ldr	r1, [r3, #32]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	430b      	orrs	r3, r1
 800223a:	4927      	ldr	r1, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x4fc>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff faf3 	bl	8001830 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff faef 	bl	8001830 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e037      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x46a>
 800226c:	e02f      	b.n	80022ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_RCC_OscConfig+0x4fc>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fadc 	bl	8001830 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff fad8 	bl	8001830 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e020      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x498>
 800229a:	e018      	b.n	80022ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e013      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420060 	.word	0x42420060

080022e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0d0      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b6a      	ldr	r3, [pc, #424]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d910      	bls.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b67      	ldr	r3, [pc, #412]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 0207 	bic.w	r2, r3, #7
 800230e:	4965      	ldr	r1, [pc, #404]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800234a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002362:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d040      	beq.n	8002404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d115      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e073      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06b      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f023 0203 	bic.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4936      	ldr	r1, [pc, #216]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d4:	f7ff fa2c 	bl	8001830 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f7ff fa28 	bl	8001830 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e053      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 020c 	and.w	r2, r3, #12
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	429a      	cmp	r2, r3
 8002402:	d1eb      	bne.n	80023dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d210      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	4922      	ldr	r1, [pc, #136]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f821 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002476:	4602      	mov	r2, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	490a      	ldr	r1, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1cc>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff f98a 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40022000 	.word	0x40022000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08002dc4 	.word	0x08002dc4
 80024b0:	2000005c 	.word	0x2000005c
 80024b4:	20000060 	.word	0x20000060

080024b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_GetSysClockFreq+0x94>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x30>
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x36>
 80024e6:	e027      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ea:	613b      	str	r3, [r7, #16]
      break;
 80024ec:	e027      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	0c9b      	lsrs	r3, r3, #18
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d010      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_RCC_GetSysClockFreq+0x94>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0c5b      	lsrs	r3, r3, #17
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <HAL_RCC_GetSysClockFreq+0x98>)
 800251a:	fb02 f203 	mul.w	r2, r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e004      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_RCC_GetSysClockFreq+0xa4>)
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	613b      	str	r3, [r7, #16]
      break;
 8002536:	e002      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCC_GetSysClockFreq+0x98>)
 800253a:	613b      	str	r3, [r7, #16]
      break;
 800253c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253e:	693b      	ldr	r3, [r7, #16]
}
 8002540:	4618      	mov	r0, r3
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	007a1200 	.word	0x007a1200
 8002554:	08002dd4 	.word	0x08002dd4
 8002558:	08002de4 	.word	0x08002de4
 800255c:	003d0900 	.word	0x003d0900

08002560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <RCC_Delay+0x34>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <RCC_Delay+0x38>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0a5b      	lsrs	r3, r3, #9
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800257c:	bf00      	nop
  }
  while (Delay --);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1e5a      	subs	r2, r3, #1
 8002582:	60fa      	str	r2, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f9      	bne.n	800257c <RCC_Delay+0x1c>
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	2000005c 	.word	0x2000005c
 8002598:	10624dd3 	.word	0x10624dd3

0800259c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e041      	b.n	8002632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe feee 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f000 fa56 	bl	8002a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e035      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_TIM_Base_Start_IT+0x90>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_TIM_Base_Start_IT+0x4e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d004      	beq.n	800268a <HAL_TIM_Base_Start_IT+0x4e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d111      	bne.n	80026ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d010      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ac:	e007      	b.n	80026be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40000400 	.word	0x40000400

080026d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0202 	mvn.w	r2, #2
 8002708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f998 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f98b 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f99a 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d020      	beq.n	8002784 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0204 	mvn.w	r2, #4
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f972 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f965 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f974 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d020      	beq.n	80027d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01b      	beq.n	80027d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0208 	mvn.w	r2, #8
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2204      	movs	r2, #4
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f94c 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f93f 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f94e 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d020      	beq.n	800281c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0210 	mvn.w	r2, #16
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2208      	movs	r2, #8
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f926 	bl	8002a54 <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f919 	bl	8002a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f928 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00c      	beq.n	8002840 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0201 	mvn.w	r2, #1
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fd1e 	bl	800127c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00c      	beq.n	8002864 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fa6f 	bl	8002d42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8f8 	bl	8002a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00c      	beq.n	80028ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0220 	mvn.w	r2, #32
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa42 	bl	8002d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_ConfigClockSource+0x1c>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0b4      	b.n	8002a3a <HAL_TIM_ConfigClockSource+0x186>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002908:	d03e      	beq.n	8002988 <HAL_TIM_ConfigClockSource+0xd4>
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290e:	f200 8087 	bhi.w	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	f000 8086 	beq.w	8002a26 <HAL_TIM_ConfigClockSource+0x172>
 800291a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291e:	d87f      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d01a      	beq.n	800295a <HAL_TIM_ConfigClockSource+0xa6>
 8002924:	2b70      	cmp	r3, #112	; 0x70
 8002926:	d87b      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b60      	cmp	r3, #96	; 0x60
 800292a:	d050      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x11a>
 800292c:	2b60      	cmp	r3, #96	; 0x60
 800292e:	d877      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b50      	cmp	r3, #80	; 0x50
 8002932:	d03c      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xfa>
 8002934:	2b50      	cmp	r3, #80	; 0x50
 8002936:	d873      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d058      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x13a>
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d86f      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b30      	cmp	r3, #48	; 0x30
 8002942:	d064      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b30      	cmp	r3, #48	; 0x30
 8002946:	d86b      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b20      	cmp	r3, #32
 800294a:	d060      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 800294c:	2b20      	cmp	r3, #32
 800294e:	d867      	bhi.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b00      	cmp	r3, #0
 8002952:	d05c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	2b10      	cmp	r3, #16
 8002956:	d05a      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x15a>
 8002958:	e062      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f000 f96a 	bl	8002c42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800297c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	609a      	str	r2, [r3, #8]
      break;
 8002986:	e04f      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f000 f953 	bl	8002c42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029aa:	609a      	str	r2, [r3, #8]
      break;
 80029ac:	e03c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 f8ca 	bl	8002b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2150      	movs	r1, #80	; 0x50
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f921 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80029cc:	e02c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 f8e8 	bl	8002bb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2160      	movs	r1, #96	; 0x60
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f911 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 80029ec:	e01c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f000 f8aa 	bl	8002b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f901 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e00c      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f000 f8f8 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002a1e:	e003      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e000      	b.n	8002a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <TIM_Base_SetConfig+0xc0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d007      	beq.n	8002ab4 <TIM_Base_SetConfig+0x28>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0x28>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a28      	ldr	r2, [pc, #160]	; (8002b50 <TIM_Base_SetConfig+0xc4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d108      	bne.n	8002ac6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <TIM_Base_SetConfig+0xc0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <TIM_Base_SetConfig+0x52>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d003      	beq.n	8002ade <TIM_Base_SetConfig+0x52>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <TIM_Base_SetConfig+0xc4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d108      	bne.n	8002af0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <TIM_Base_SetConfig+0xc0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d103      	bne.n	8002b24 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f023 0201 	bic.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	611a      	str	r2, [r3, #16]
  }
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400

08002b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f023 0201 	bic.w	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f023 030a 	bic.w	r3, r3, #10
 8002b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0210 	bic.w	r2, r3, #16
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	031b      	lsls	r3, r3, #12
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f043 0307 	orr.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	021a      	lsls	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	609a      	str	r2, [r3, #8]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e041      	b.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10c      	bne.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40000400 	.word	0x40000400

08002d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	2600      	movs	r6, #0
 8002d58:	4d0c      	ldr	r5, [pc, #48]	; (8002d8c <__libc_init_array+0x38>)
 8002d5a:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5c:	1b64      	subs	r4, r4, r5
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	42a6      	cmp	r6, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	f000 f822 	bl	8002dac <_init>
 8002d68:	2600      	movs	r6, #0
 8002d6a:	4d0a      	ldr	r5, [pc, #40]	; (8002d94 <__libc_init_array+0x40>)
 8002d6c:	4c0a      	ldr	r4, [pc, #40]	; (8002d98 <__libc_init_array+0x44>)
 8002d6e:	1b64      	subs	r4, r4, r5
 8002d70:	10a4      	asrs	r4, r4, #2
 8002d72:	42a6      	cmp	r6, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7c:	4798      	blx	r3
 8002d7e:	3601      	adds	r6, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d86:	4798      	blx	r3
 8002d88:	3601      	adds	r6, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08002de8 	.word	0x08002de8
 8002d90:	08002de8 	.word	0x08002de8
 8002d94:	08002de8 	.word	0x08002de8
 8002d98:	08002dec 	.word	0x08002dec

08002d9c <memset>:
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4402      	add	r2, r0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d100      	bne.n	8002da6 <memset+0xa>
 8002da4:	4770      	bx	lr
 8002da6:	f803 1b01 	strb.w	r1, [r3], #1
 8002daa:	e7f9      	b.n	8002da0 <memset+0x4>

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
