
LAB03_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c8c  08002c8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c8c  08002c8c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c8c  08002c8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08002d04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002d04  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bcb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf9  00000000  00000000  00029c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171dc  00000000  00000000  0002cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c88b  00000000  00000000  00043f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825e4  00000000  00000000  000507f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000d2e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c50 	.word	0x08002c50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002c50 	.word	0x08002c50

0800014c <get_input_button>:
int KeyReg3[NUM_button] = {NORMAL_STATE};
int TimerForKeyPress[NUM_button] = {TIME_INTO_LONG_PRESSED};

int button_flag[NUM_button] = {0};

void get_input_button(int index, GPIO_TypeDef *GPIOx, int GPIO_Pin){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	KeyReg0[index] = KeyReg1[index];
 8000158:	4a0f      	ldr	r2, [pc, #60]	; (8000198 <get_input_button+0x4c>)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	490e      	ldr	r1, [pc, #56]	; (800019c <get_input_button+0x50>)
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[index] = KeyReg2[index];
 8000168:	4a0d      	ldr	r2, [pc, #52]	; (80001a0 <get_input_button+0x54>)
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4909      	ldr	r1, [pc, #36]	; (8000198 <get_input_button+0x4c>)
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[index] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	b29b      	uxth	r3, r3
 800017c:	4619      	mov	r1, r3
 800017e:	68b8      	ldr	r0, [r7, #8]
 8000180:	f001 fd3a 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	4619      	mov	r1, r3
 8000188:	4a05      	ldr	r2, [pc, #20]	; (80001a0 <get_input_button+0x54>)
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000190:	bf00      	nop
 8000192:	3710      	adds	r7, #16
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	2000000c 	.word	0x2000000c
 800019c:	20000000 	.word	0x20000000
 80001a0:	20000018 	.word	0x20000018

080001a4 <isButtonPressed>:

int isButtonPressed(int but){
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	if(button_flag[but] == 1){
 80001ac:	4a09      	ldr	r2, [pc, #36]	; (80001d4 <isButtonPressed+0x30>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d106      	bne.n	80001c6 <isButtonPressed+0x22>
		button_flag[but] = 0;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <isButtonPressed+0x30>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2100      	movs	r1, #0
 80001be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001c2:	2301      	movs	r3, #1
 80001c4:	e000      	b.n	80001c8 <isButtonPressed+0x24>
	}
	return 0;
 80001c6:	2300      	movs	r3, #0
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	2000008c 	.word	0x2000008c

080001d8 <getKeyInput>:

void getKeyInput(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	get_input_button(0, Button1_GPIO_Port, Button1_Pin);
 80001de:	2210      	movs	r2, #16
 80001e0:	4938      	ldr	r1, [pc, #224]	; (80002c4 <getKeyInput+0xec>)
 80001e2:	2000      	movs	r0, #0
 80001e4:	f7ff ffb2 	bl	800014c <get_input_button>
	get_input_button(1, Button2_GPIO_Port, Button2_Pin);
 80001e8:	2220      	movs	r2, #32
 80001ea:	4936      	ldr	r1, [pc, #216]	; (80002c4 <getKeyInput+0xec>)
 80001ec:	2001      	movs	r0, #1
 80001ee:	f7ff ffad 	bl	800014c <get_input_button>
	get_input_button(2, Button3_GPIO_Port, Button3_Pin);
 80001f2:	2240      	movs	r2, #64	; 0x40
 80001f4:	4933      	ldr	r1, [pc, #204]	; (80002c4 <getKeyInput+0xec>)
 80001f6:	2002      	movs	r0, #2
 80001f8:	f7ff ffa8 	bl	800014c <get_input_button>

	for(int but = 0; but < 3; but ++){
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	e058      	b.n	80002b4 <getKeyInput+0xdc>
		if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 8000202:	4a31      	ldr	r2, [pc, #196]	; (80002c8 <getKeyInput+0xf0>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4930      	ldr	r1, [pc, #192]	; (80002cc <getKeyInput+0xf4>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d14b      	bne.n	80002ae <getKeyInput+0xd6>
 8000216:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <getKeyInput+0xf4>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	492c      	ldr	r1, [pc, #176]	; (80002d0 <getKeyInput+0xf8>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d141      	bne.n	80002ae <getKeyInput+0xd6>
			// Nháº¥n nhanh
			if(KeyReg3[but] != KeyReg2[but]){
 800022a:	4a2a      	ldr	r2, [pc, #168]	; (80002d4 <getKeyInput+0xfc>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4927      	ldr	r1, [pc, #156]	; (80002d0 <getKeyInput+0xf8>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d018      	beq.n	8000270 <getKeyInput+0x98>
				KeyReg3[but] = KeyReg2[but];
 800023e:	4a24      	ldr	r2, [pc, #144]	; (80002d0 <getKeyInput+0xf8>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	4923      	ldr	r1, [pc, #140]	; (80002d4 <getKeyInput+0xfc>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[but] == PRESSED_STATE){
 800024e:	4a20      	ldr	r2, [pc, #128]	; (80002d0 <getKeyInput+0xf8>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d129      	bne.n	80002ae <getKeyInput+0xd6>
					//TODO
					button_flag[but] = 1;
 800025a:	4a1f      	ldr	r2, [pc, #124]	; (80002d8 <getKeyInput+0x100>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2101      	movs	r1, #1
 8000260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[but] = TIME_INTO_LONG_PRESSED;
 8000264:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <getKeyInput+0x104>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	21c8      	movs	r1, #200	; 0xc8
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026e:	e01e      	b.n	80002ae <getKeyInput+0xd6>
					}
				}
				// Nháº¥n ÄÃ¨
				else{
					if(KeyReg2[but] == PRESSED_STATE){
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <getKeyInput+0xf8>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d118      	bne.n	80002ae <getKeyInput+0xd6>
						TimerForKeyPress[but] --;
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <getKeyInput+0x104>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	1e5a      	subs	r2, r3, #1
 8000286:	4915      	ldr	r1, [pc, #84]	; (80002dc <getKeyInput+0x104>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if(TimerForKeyPress[but] == 0){
 800028e:	4a13      	ldr	r2, [pc, #76]	; (80002dc <getKeyInput+0x104>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d109      	bne.n	80002ae <getKeyInput+0xd6>
							button_flag[but] = 1;
 800029a:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <getKeyInput+0x100>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2101      	movs	r1, #1
 80002a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							TimerForKeyPress[but] = TIME_INTO_LONG_PRESSED;
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <getKeyInput+0x104>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	21c8      	movs	r1, #200	; 0xc8
 80002aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int but = 0; but < 3; but ++){
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	dda3      	ble.n	8000202 <getKeyInput+0x2a>
						}
					}
				}
		}
	}
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40010800 	.word	0x40010800
 80002c8:	20000000 	.word	0x20000000
 80002cc:	2000000c 	.word	0x2000000c
 80002d0:	20000018 	.word	0x20000018
 80002d4:	20000024 	.word	0x20000024
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	20000030 	.word	0x20000030

080002e0 <fsm_automatic_run>:
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	if (STATUS_MODE != MODE1) return;
 80002e4:	4b9c      	ldr	r3, [pc, #624]	; (8000558 <fsm_automatic_run+0x278>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b16      	cmp	r3, #22
 80002ea:	f040 812a 	bne.w	8000542 <fsm_automatic_run+0x262>
	//
	if (TimeRed != TimeYellow + TimeGreen) {
 80002ee:	4b9b      	ldr	r3, [pc, #620]	; (800055c <fsm_automatic_run+0x27c>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b9b      	ldr	r3, [pc, #620]	; (8000560 <fsm_automatic_run+0x280>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	441a      	add	r2, r3
 80002f8:	4b9a      	ldr	r3, [pc, #616]	; (8000564 <fsm_automatic_run+0x284>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d008      	beq.n	8000312 <fsm_automatic_run+0x32>
        TimeRed = 5;
 8000300:	4b98      	ldr	r3, [pc, #608]	; (8000564 <fsm_automatic_run+0x284>)
 8000302:	2205      	movs	r2, #5
 8000304:	601a      	str	r2, [r3, #0]
        TimeYellow = 2;
 8000306:	4b95      	ldr	r3, [pc, #596]	; (800055c <fsm_automatic_run+0x27c>)
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
        TimeGreen = 3;
 800030c:	4b94      	ldr	r3, [pc, #592]	; (8000560 <fsm_automatic_run+0x280>)
 800030e:	2203      	movs	r2, #3
 8000310:	601a      	str	r2, [r3, #0]
    }

	switch(STATUS_LED1){
 8000312:	4b95      	ldr	r3, [pc, #596]	; (8000568 <fsm_automatic_run+0x288>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3b01      	subs	r3, #1
 8000318:	2b03      	cmp	r3, #3
 800031a:	d87d      	bhi.n	8000418 <fsm_automatic_run+0x138>
 800031c:	a201      	add	r2, pc, #4	; (adr r2, 8000324 <fsm_automatic_run+0x44>)
 800031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000322:	bf00      	nop
 8000324:	08000335 	.word	0x08000335
 8000328:	08000353 	.word	0x08000353
 800032c:	080003d7 	.word	0x080003d7
 8000330:	08000395 	.word	0x08000395
	case INIT:
		OffAll1();
 8000334:	f001 f800 	bl	8001338 <OffAll1>

		STATUS_LED1 = AUTO_RED1;
 8000338:	4b8b      	ldr	r3, [pc, #556]	; (8000568 <fsm_automatic_run+0x288>)
 800033a:	2202      	movs	r2, #2
 800033c:	601a      	str	r2, [r3, #0]
		TimeForLed1 = TimeRed;
 800033e:	4b89      	ldr	r3, [pc, #548]	; (8000564 <fsm_automatic_run+0x284>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a8a      	ldr	r2, [pc, #552]	; (800056c <fsm_automatic_run+0x28c>)
 8000344:	6013      	str	r3, [r2, #0]
		setTimer(2, 1000);
 8000346:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800034a:	2002      	movs	r0, #2
 800034c:	f000 ff16 	bl	800117c <setTimer>
		break;
 8000350:	e069      	b.n	8000426 <fsm_automatic_run+0x146>
	case AUTO_RED1:
		OnLedRed1();
 8000352:	f001 f821 	bl	8001398 <OnLedRed1>

	    updateBuffer(MODE1);
 8000356:	2016      	movs	r0, #22
 8000358:	f000 fc8e 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800035c:	f000 fd44 	bl	8000de8 <display_led7seg>

		if(timer_flag[2] == 1){
 8000360:	4b83      	ldr	r3, [pc, #524]	; (8000570 <fsm_automatic_run+0x290>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d159      	bne.n	800041c <fsm_automatic_run+0x13c>
			setTimer(2, 1000);
 8000368:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800036c:	2002      	movs	r0, #2
 800036e:	f000 ff05 	bl	800117c <setTimer>
			TimeForLed1 --;
 8000372:	4b7e      	ldr	r3, [pc, #504]	; (800056c <fsm_automatic_run+0x28c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3b01      	subs	r3, #1
 8000378:	4a7c      	ldr	r2, [pc, #496]	; (800056c <fsm_automatic_run+0x28c>)
 800037a:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 800037c:	4b7b      	ldr	r3, [pc, #492]	; (800056c <fsm_automatic_run+0x28c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	dc4b      	bgt.n	800041c <fsm_automatic_run+0x13c>
				TimeForLed1 = TimeGreen;
 8000384:	4b76      	ldr	r3, [pc, #472]	; (8000560 <fsm_automatic_run+0x280>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a78      	ldr	r2, [pc, #480]	; (800056c <fsm_automatic_run+0x28c>)
 800038a:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_GREEN1;
 800038c:	4b76      	ldr	r3, [pc, #472]	; (8000568 <fsm_automatic_run+0x288>)
 800038e:	2204      	movs	r2, #4
 8000390:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000392:	e043      	b.n	800041c <fsm_automatic_run+0x13c>
	case AUTO_GREEN1:
		OnLedGreen1();
 8000394:	f001 f860 	bl	8001458 <OnLedGreen1>

	    updateBuffer(MODE1);
 8000398:	2016      	movs	r0, #22
 800039a:	f000 fc6d 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800039e:	f000 fd23 	bl	8000de8 <display_led7seg>

		if(timer_flag[2] == 1){
 80003a2:	4b73      	ldr	r3, [pc, #460]	; (8000570 <fsm_automatic_run+0x290>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d13a      	bne.n	8000420 <fsm_automatic_run+0x140>
			setTimer(2, 1000);
 80003aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ae:	2002      	movs	r0, #2
 80003b0:	f000 fee4 	bl	800117c <setTimer>
			TimeForLed1 --;
 80003b4:	4b6d      	ldr	r3, [pc, #436]	; (800056c <fsm_automatic_run+0x28c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	4a6c      	ldr	r2, [pc, #432]	; (800056c <fsm_automatic_run+0x28c>)
 80003bc:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 80003be:	4b6b      	ldr	r3, [pc, #428]	; (800056c <fsm_automatic_run+0x28c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dc2c      	bgt.n	8000420 <fsm_automatic_run+0x140>
				TimeForLed1 = TimeYellow;
 80003c6:	4b65      	ldr	r3, [pc, #404]	; (800055c <fsm_automatic_run+0x27c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a68      	ldr	r2, [pc, #416]	; (800056c <fsm_automatic_run+0x28c>)
 80003cc:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_YELLOW1;
 80003ce:	4b66      	ldr	r3, [pc, #408]	; (8000568 <fsm_automatic_run+0x288>)
 80003d0:	2203      	movs	r2, #3
 80003d2:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80003d4:	e024      	b.n	8000420 <fsm_automatic_run+0x140>
	case AUTO_YELLOW1:
		OnLedYellow1();
 80003d6:	f001 f80f 	bl	80013f8 <OnLedYellow1>

	    updateBuffer(MODE1);
 80003da:	2016      	movs	r0, #22
 80003dc:	f000 fc4c 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 80003e0:	f000 fd02 	bl	8000de8 <display_led7seg>

		if(timer_flag[2] == 1){
 80003e4:	4b62      	ldr	r3, [pc, #392]	; (8000570 <fsm_automatic_run+0x290>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d11b      	bne.n	8000424 <fsm_automatic_run+0x144>
			setTimer(2, 1000);
 80003ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003f0:	2002      	movs	r0, #2
 80003f2:	f000 fec3 	bl	800117c <setTimer>
			TimeForLed1 --;
 80003f6:	4b5d      	ldr	r3, [pc, #372]	; (800056c <fsm_automatic_run+0x28c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a5b      	ldr	r2, [pc, #364]	; (800056c <fsm_automatic_run+0x28c>)
 80003fe:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 8000400:	4b5a      	ldr	r3, [pc, #360]	; (800056c <fsm_automatic_run+0x28c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	dc0d      	bgt.n	8000424 <fsm_automatic_run+0x144>
				TimeForLed1 = TimeRed;
 8000408:	4b56      	ldr	r3, [pc, #344]	; (8000564 <fsm_automatic_run+0x284>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a57      	ldr	r2, [pc, #348]	; (800056c <fsm_automatic_run+0x28c>)
 800040e:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_RED1;
 8000410:	4b55      	ldr	r3, [pc, #340]	; (8000568 <fsm_automatic_run+0x288>)
 8000412:	2202      	movs	r2, #2
 8000414:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000416:	e005      	b.n	8000424 <fsm_automatic_run+0x144>
	default:
		break;
 8000418:	bf00      	nop
 800041a:	e004      	b.n	8000426 <fsm_automatic_run+0x146>
		break;
 800041c:	bf00      	nop
 800041e:	e002      	b.n	8000426 <fsm_automatic_run+0x146>
		break;
 8000420:	bf00      	nop
 8000422:	e000      	b.n	8000426 <fsm_automatic_run+0x146>
		break;
 8000424:	bf00      	nop
	}
	//
	switch(STATUS_LED2){
 8000426:	4b53      	ldr	r3, [pc, #332]	; (8000574 <fsm_automatic_run+0x294>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	2b06      	cmp	r3, #6
 800042e:	f200 808a 	bhi.w	8000546 <fsm_automatic_run+0x266>
 8000432:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <fsm_automatic_run+0x158>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	08000455 	.word	0x08000455
 800043c:	08000547 	.word	0x08000547
 8000440:	08000547 	.word	0x08000547
 8000444:	08000547 	.word	0x08000547
 8000448:	0800047d 	.word	0x0800047d
 800044c:	08000501 	.word	0x08000501
 8000450:	080004bf 	.word	0x080004bf
	case INIT:
		OffAll2();
 8000454:	f000 ff88 	bl	8001368 <OffAll2>

	    updateBuffer(MODE1);
 8000458:	2016      	movs	r0, #22
 800045a:	f000 fc0d 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800045e:	f000 fcc3 	bl	8000de8 <display_led7seg>

		STATUS_LED2 = AUTO_GREEN2;
 8000462:	4b44      	ldr	r3, [pc, #272]	; (8000574 <fsm_automatic_run+0x294>)
 8000464:	2207      	movs	r2, #7
 8000466:	601a      	str	r2, [r3, #0]
		TimeForLed2 = TimeGreen;
 8000468:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <fsm_automatic_run+0x280>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a42      	ldr	r2, [pc, #264]	; (8000578 <fsm_automatic_run+0x298>)
 800046e:	6013      	str	r3, [r2, #0]
		setTimer(3, 1000);
 8000470:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000474:	2003      	movs	r0, #3
 8000476:	f000 fe81 	bl	800117c <setTimer>
		break;
 800047a:	e06b      	b.n	8000554 <fsm_automatic_run+0x274>
	case AUTO_RED2:
		OnLedRed2();
 800047c:	f000 ffa4 	bl	80013c8 <OnLedRed2>

	    updateBuffer(MODE1);
 8000480:	2016      	movs	r0, #22
 8000482:	f000 fbf9 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 8000486:	f000 fcaf 	bl	8000de8 <display_led7seg>

		if(timer_flag[3] == 1){
 800048a:	4b39      	ldr	r3, [pc, #228]	; (8000570 <fsm_automatic_run+0x290>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d15b      	bne.n	800054a <fsm_automatic_run+0x26a>
			setTimer(3, 1000);
 8000492:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000496:	2003      	movs	r0, #3
 8000498:	f000 fe70 	bl	800117c <setTimer>
			TimeForLed2 --;
 800049c:	4b36      	ldr	r3, [pc, #216]	; (8000578 <fsm_automatic_run+0x298>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a35      	ldr	r2, [pc, #212]	; (8000578 <fsm_automatic_run+0x298>)
 80004a4:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <fsm_automatic_run+0x298>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	dc4d      	bgt.n	800054a <fsm_automatic_run+0x26a>
				TimeForLed2 = TimeGreen;
 80004ae:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <fsm_automatic_run+0x280>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a31      	ldr	r2, [pc, #196]	; (8000578 <fsm_automatic_run+0x298>)
 80004b4:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_GREEN2;
 80004b6:	4b2f      	ldr	r3, [pc, #188]	; (8000574 <fsm_automatic_run+0x294>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004bc:	e045      	b.n	800054a <fsm_automatic_run+0x26a>
	case AUTO_GREEN2:
		OnLedGreen2();
 80004be:	f000 ffe3 	bl	8001488 <OnLedGreen2>

	    updateBuffer(MODE1);
 80004c2:	2016      	movs	r0, #22
 80004c4:	f000 fbd8 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 80004c8:	f000 fc8e 	bl	8000de8 <display_led7seg>

		if(timer_flag[3] == 1){
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <fsm_automatic_run+0x290>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d13c      	bne.n	800054e <fsm_automatic_run+0x26e>
			setTimer(3, 1000);
 80004d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d8:	2003      	movs	r0, #3
 80004da:	f000 fe4f 	bl	800117c <setTimer>
			TimeForLed2 --;
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <fsm_automatic_run+0x298>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	4a24      	ldr	r2, [pc, #144]	; (8000578 <fsm_automatic_run+0x298>)
 80004e6:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <fsm_automatic_run+0x298>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	dc2e      	bgt.n	800054e <fsm_automatic_run+0x26e>
				TimeForLed2 = TimeYellow;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <fsm_automatic_run+0x27c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a20      	ldr	r2, [pc, #128]	; (8000578 <fsm_automatic_run+0x298>)
 80004f6:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_YELLOW2;
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <fsm_automatic_run+0x294>)
 80004fa:	2206      	movs	r2, #6
 80004fc:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004fe:	e026      	b.n	800054e <fsm_automatic_run+0x26e>
	case AUTO_YELLOW2:
		OnLedYellow2();
 8000500:	f000 ff92 	bl	8001428 <OnLedYellow2>

	    updateBuffer(MODE1);
 8000504:	2016      	movs	r0, #22
 8000506:	f000 fbb7 	bl	8000c78 <updateBuffer>
	    display_led7seg();
 800050a:	f000 fc6d 	bl	8000de8 <display_led7seg>

		if(timer_flag[3] == 1){
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <fsm_automatic_run+0x290>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d11d      	bne.n	8000552 <fsm_automatic_run+0x272>
			setTimer(3, 1000);
 8000516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051a:	2003      	movs	r0, #3
 800051c:	f000 fe2e 	bl	800117c <setTimer>
			TimeForLed2 --;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <fsm_automatic_run+0x298>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3b01      	subs	r3, #1
 8000526:	4a14      	ldr	r2, [pc, #80]	; (8000578 <fsm_automatic_run+0x298>)
 8000528:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <fsm_automatic_run+0x298>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	dc0f      	bgt.n	8000552 <fsm_automatic_run+0x272>
				TimeForLed2 = TimeRed;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <fsm_automatic_run+0x284>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <fsm_automatic_run+0x298>)
 8000538:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_RED2;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <fsm_automatic_run+0x294>)
 800053c:	2205      	movs	r2, #5
 800053e:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000540:	e007      	b.n	8000552 <fsm_automatic_run+0x272>
	if (STATUS_MODE != MODE1) return;
 8000542:	bf00      	nop
 8000544:	e006      	b.n	8000554 <fsm_automatic_run+0x274>
	default:
		break;
 8000546:	bf00      	nop
 8000548:	e004      	b.n	8000554 <fsm_automatic_run+0x274>
		break;
 800054a:	bf00      	nop
 800054c:	e002      	b.n	8000554 <fsm_automatic_run+0x274>
		break;
 800054e:	bf00      	nop
 8000550:	e000      	b.n	8000554 <fsm_automatic_run+0x274>
		break;
 8000552:	bf00      	nop
	}
}
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000048 	.word	0x20000048
 800055c:	20000058 	.word	0x20000058
 8000560:	20000054 	.word	0x20000054
 8000564:	20000050 	.word	0x20000050
 8000568:	2000003c 	.word	0x2000003c
 800056c:	2000005c 	.word	0x2000005c
 8000570:	200000c4 	.word	0x200000c4
 8000574:	20000040 	.word	0x20000040
 8000578:	20000060 	.word	0x20000060

0800057c <fsm_manual_run>:
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 8000580:	4b33      	ldr	r3, [pc, #204]	; (8000650 <fsm_manual_run+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b19      	cmp	r3, #25
 8000586:	d03e      	beq.n	8000606 <fsm_manual_run+0x8a>
 8000588:	2b19      	cmp	r3, #25
 800058a:	dc58      	bgt.n	800063e <fsm_manual_run+0xc2>
 800058c:	2b17      	cmp	r3, #23
 800058e:	d002      	beq.n	8000596 <fsm_manual_run+0x1a>
 8000590:	2b18      	cmp	r3, #24
 8000592:	d01c      	beq.n	80005ce <fsm_manual_run+0x52>
		if(isButtonPressed(1)){
			value = (value < 99) ? value + 1 : 1;
		}
		break;
	default:
		break;
 8000594:	e053      	b.n	800063e <fsm_manual_run+0xc2>
		BlinkyLed(RED);
 8000596:	2028      	movs	r0, #40	; 0x28
 8000598:	f000 ffbe 	bl	8001518 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <fsm_manual_run+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fb69 	bl	8000c78 <updateBuffer>
		display_led7seg();
 80005a6:	f000 fc1f 	bl	8000de8 <display_led7seg>
		if(isButtonPressed(1)){
 80005aa:	2001      	movs	r0, #1
 80005ac:	f7ff fdfa 	bl	80001a4 <isButtonPressed>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d045      	beq.n	8000642 <fsm_manual_run+0xc6>
			value = (value < 99) ? value + 1 : 1;
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <fsm_manual_run+0xd8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b62      	cmp	r3, #98	; 0x62
 80005bc:	dc03      	bgt.n	80005c6 <fsm_manual_run+0x4a>
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <fsm_manual_run+0xd8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	e000      	b.n	80005c8 <fsm_manual_run+0x4c>
 80005c6:	2301      	movs	r3, #1
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <fsm_manual_run+0xd8>)
 80005ca:	6013      	str	r3, [r2, #0]
		break;
 80005cc:	e039      	b.n	8000642 <fsm_manual_run+0xc6>
		BlinkyLed(YELLOW);
 80005ce:	2029      	movs	r0, #41	; 0x29
 80005d0:	f000 ffa2 	bl	8001518 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <fsm_manual_run+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fb4d 	bl	8000c78 <updateBuffer>
		display_led7seg();
 80005de:	f000 fc03 	bl	8000de8 <display_led7seg>
		if(isButtonPressed(1)){
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff fdde 	bl	80001a4 <isButtonPressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d02b      	beq.n	8000646 <fsm_manual_run+0xca>
			value = (value < 99) ? value + 1 : 1;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <fsm_manual_run+0xd8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b62      	cmp	r3, #98	; 0x62
 80005f4:	dc03      	bgt.n	80005fe <fsm_manual_run+0x82>
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <fsm_manual_run+0xd8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	e000      	b.n	8000600 <fsm_manual_run+0x84>
 80005fe:	2301      	movs	r3, #1
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <fsm_manual_run+0xd8>)
 8000602:	6013      	str	r3, [r2, #0]
		break;
 8000604:	e01f      	b.n	8000646 <fsm_manual_run+0xca>
		BlinkyLed(GREEN);
 8000606:	202a      	movs	r0, #42	; 0x2a
 8000608:	f000 ff86 	bl	8001518 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <fsm_manual_run+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fb31 	bl	8000c78 <updateBuffer>
		display_led7seg();
 8000616:	f000 fbe7 	bl	8000de8 <display_led7seg>
		if(isButtonPressed(1)){
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fdc2 	bl	80001a4 <isButtonPressed>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d011      	beq.n	800064a <fsm_manual_run+0xce>
			value = (value < 99) ? value + 1 : 1;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <fsm_manual_run+0xd8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b62      	cmp	r3, #98	; 0x62
 800062c:	dc03      	bgt.n	8000636 <fsm_manual_run+0xba>
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <fsm_manual_run+0xd8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	e000      	b.n	8000638 <fsm_manual_run+0xbc>
 8000636:	2301      	movs	r3, #1
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <fsm_manual_run+0xd8>)
 800063a:	6013      	str	r3, [r2, #0]
		break;
 800063c:	e005      	b.n	800064a <fsm_manual_run+0xce>
		break;
 800063e:	bf00      	nop
 8000640:	e004      	b.n	800064c <fsm_manual_run+0xd0>
		break;
 8000642:	bf00      	nop
 8000644:	e002      	b.n	800064c <fsm_manual_run+0xd0>
		break;
 8000646:	bf00      	nop
 8000648:	e000      	b.n	800064c <fsm_manual_run+0xd0>
		break;
 800064a:	bf00      	nop
	}
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000048 	.word	0x20000048
 8000654:	200000a8 	.word	0x200000a8

08000658 <fsm_setting_run>:
 *  Created on: Nov 4, 2024
 *      Author: Admin
 */
#include "fsm_setting.h"

void fsm_setting_run(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 800065c:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <fsm_setting_run+0x170>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b18      	cmp	r3, #24
 8000664:	f200 80a4 	bhi.w	80007b0 <fsm_setting_run+0x158>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <fsm_setting_run+0x18>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006d5 	.word	0x080006d5
 8000674:	080007b1 	.word	0x080007b1
 8000678:	080007b1 	.word	0x080007b1
 800067c:	080007b1 	.word	0x080007b1
 8000680:	080007b1 	.word	0x080007b1
 8000684:	080007b1 	.word	0x080007b1
 8000688:	080007b1 	.word	0x080007b1
 800068c:	080007b1 	.word	0x080007b1
 8000690:	080007b1 	.word	0x080007b1
 8000694:	080007b1 	.word	0x080007b1
 8000698:	080007b1 	.word	0x080007b1
 800069c:	080007b1 	.word	0x080007b1
 80006a0:	080007b1 	.word	0x080007b1
 80006a4:	080007b1 	.word	0x080007b1
 80006a8:	080007b1 	.word	0x080007b1
 80006ac:	080007b1 	.word	0x080007b1
 80006b0:	080007b1 	.word	0x080007b1
 80006b4:	080007b1 	.word	0x080007b1
 80006b8:	080007b1 	.word	0x080007b1
 80006bc:	080007b1 	.word	0x080007b1
 80006c0:	080007b1 	.word	0x080007b1
 80006c4:	080006dd 	.word	0x080006dd
 80006c8:	080006ff 	.word	0x080006ff
 80006cc:	08000737 	.word	0x08000737
 80006d0:	0800076f 	.word	0x0800076f
	case INIT:
		STATUS_MODE = MODE1;
 80006d4:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <fsm_setting_run+0x170>)
 80006d6:	2216      	movs	r2, #22
 80006d8:	601a      	str	r2, [r3, #0]
		break;
 80006da:	e072      	b.n	80007c2 <fsm_setting_run+0x16a>
	case MODE1:
		if(isButtonPressed(0)){
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fd61 	bl	80001a4 <isButtonPressed>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d065      	beq.n	80007b4 <fsm_setting_run+0x15c>
			STATUS_MODE = MODE2;
 80006e8:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <fsm_setting_run+0x170>)
 80006ea:	2217      	movs	r2, #23
 80006ec:	601a      	str	r2, [r3, #0]
			value = TimeRed;
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <fsm_setting_run+0x174>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a37      	ldr	r2, [pc, #220]	; (80007d0 <fsm_setting_run+0x178>)
 80006f4:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 80006f6:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <fsm_setting_run+0x17c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
		}
		break;
 80006fc:	e05a      	b.n	80007b4 <fsm_setting_run+0x15c>
	case MODE2:
		if(isButtonPressed(0)){
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fd50 	bl	80001a4 <isButtonPressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00a      	beq.n	8000720 <fsm_setting_run+0xc8>
			STATUS_MODE = MODE3;
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <fsm_setting_run+0x170>)
 800070c:	2218      	movs	r2, #24
 800070e:	601a      	str	r2, [r3, #0]
			value = TimeYellow;
 8000710:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <fsm_setting_run+0x180>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <fsm_setting_run+0x178>)
 8000716:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <fsm_setting_run+0x17c>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeRed = value;
		}
		break;
 800071e:	e04b      	b.n	80007b8 <fsm_setting_run+0x160>
		else if(isButtonPressed(2)){
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff fd3f 	bl	80001a4 <isButtonPressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d045      	beq.n	80007b8 <fsm_setting_run+0x160>
			TimeRed = value;
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <fsm_setting_run+0x178>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a26      	ldr	r2, [pc, #152]	; (80007cc <fsm_setting_run+0x174>)
 8000732:	6013      	str	r3, [r2, #0]
		break;
 8000734:	e040      	b.n	80007b8 <fsm_setting_run+0x160>
	case MODE3:
		if(isButtonPressed(0)){
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fd34 	bl	80001a4 <isButtonPressed>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00a      	beq.n	8000758 <fsm_setting_run+0x100>
			STATUS_MODE = MODE4;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <fsm_setting_run+0x170>)
 8000744:	2219      	movs	r2, #25
 8000746:	601a      	str	r2, [r3, #0]
			value = TimeGreen;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <fsm_setting_run+0x184>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <fsm_setting_run+0x178>)
 800074e:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <fsm_setting_run+0x17c>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeYellow = value;
		}
		break;
 8000756:	e031      	b.n	80007bc <fsm_setting_run+0x164>
		else if(isButtonPressed(2)){
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fd23 	bl	80001a4 <isButtonPressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02b      	beq.n	80007bc <fsm_setting_run+0x164>
			TimeYellow = value;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <fsm_setting_run+0x178>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <fsm_setting_run+0x180>)
 800076a:	6013      	str	r3, [r2, #0]
		break;
 800076c:	e026      	b.n	80007bc <fsm_setting_run+0x164>
	case MODE4:
		if(isButtonPressed(0)){
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fd18 	bl	80001a4 <isButtonPressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00f      	beq.n	800079a <fsm_setting_run+0x142>
			STATUS_MODE = MODE1;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <fsm_setting_run+0x170>)
 800077c:	2216      	movs	r2, #22
 800077e:	601a      	str	r2, [r3, #0]

			STATUS_LED1 = INIT;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <fsm_setting_run+0x188>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
			STATUS_LED2 = INIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <fsm_setting_run+0x18c>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
			STATUS_7SEG = INIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <fsm_setting_run+0x190>)
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]

			STATUS_BLINKY = INIT;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <fsm_setting_run+0x17c>)
 8000794:	2201      	movs	r2, #1
 8000796:	601a      	str	r2, [r3, #0]
		}
		else if(isButtonPressed(2)){
			TimeGreen = value;
		}
		break;
 8000798:	e012      	b.n	80007c0 <fsm_setting_run+0x168>
		else if(isButtonPressed(2)){
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff fd02 	bl	80001a4 <isButtonPressed>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00c      	beq.n	80007c0 <fsm_setting_run+0x168>
			TimeGreen = value;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <fsm_setting_run+0x178>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <fsm_setting_run+0x184>)
 80007ac:	6013      	str	r3, [r2, #0]
		break;
 80007ae:	e007      	b.n	80007c0 <fsm_setting_run+0x168>
	default:
		break;
 80007b0:	bf00      	nop
 80007b2:	e006      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007b4:	bf00      	nop
 80007b6:	e004      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007b8:	bf00      	nop
 80007ba:	e002      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007bc:	bf00      	nop
 80007be:	e000      	b.n	80007c2 <fsm_setting_run+0x16a>
		break;
 80007c0:	bf00      	nop
	}


}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000048 	.word	0x20000048
 80007cc:	20000050 	.word	0x20000050
 80007d0:	200000a8 	.word	0x200000a8
 80007d4:	2000004c 	.word	0x2000004c
 80007d8:	20000058 	.word	0x20000058
 80007dc:	20000054 	.word	0x20000054
 80007e0:	2000003c 	.word	0x2000003c
 80007e4:	20000040 	.word	0x20000040
 80007e8:	20000044 	.word	0x20000044

080007ec <display7SEG>:
 *      Author: Admin
 */

#include "led7_segment.h"

void display7SEG(int num){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	f200 819e 	bhi.w	8000b38 <display7SEG+0x34c>
 80007fc:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <display7SEG+0x18>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	0800082d 	.word	0x0800082d
 8000808:	0800087b 	.word	0x0800087b
 800080c:	080008c9 	.word	0x080008c9
 8000810:	08000917 	.word	0x08000917
 8000814:	08000965 	.word	0x08000965
 8000818:	080009b3 	.word	0x080009b3
 800081c:	08000a01 	.word	0x08000a01
 8000820:	08000a4f 	.word	0x08000a4f
 8000824:	08000a9d 	.word	0x08000a9d
 8000828:	08000aeb 	.word	0x08000aeb
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000832:	48c4      	ldr	r0, [pc, #784]	; (8000b44 <display7SEG+0x358>)
 8000834:	f001 f9f7 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	48c1      	ldr	r0, [pc, #772]	; (8000b44 <display7SEG+0x358>)
 8000840:	f001 f9f1 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	48be      	ldr	r0, [pc, #760]	; (8000b44 <display7SEG+0x358>)
 800084c:	f001 f9eb 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	48bc      	ldr	r0, [pc, #752]	; (8000b48 <display7SEG+0x35c>)
 8000856:	f001 f9e6 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2102      	movs	r1, #2
 800085e:	48ba      	ldr	r0, [pc, #744]	; (8000b48 <display7SEG+0x35c>)
 8000860:	f001 f9e1 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	48b7      	ldr	r0, [pc, #732]	; (8000b48 <display7SEG+0x35c>)
 800086a:	f001 f9dc 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2108      	movs	r1, #8
 8000872:	48b5      	ldr	r0, [pc, #724]	; (8000b48 <display7SEG+0x35c>)
 8000874:	f001 f9d7 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000878:	e15f      	b.n	8000b3a <display7SEG+0x34e>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	48b0      	ldr	r0, [pc, #704]	; (8000b44 <display7SEG+0x358>)
 8000882:	f001 f9d0 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088c:	48ad      	ldr	r0, [pc, #692]	; (8000b44 <display7SEG+0x358>)
 800088e:	f001 f9ca 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000898:	48aa      	ldr	r0, [pc, #680]	; (8000b44 <display7SEG+0x358>)
 800089a:	f001 f9c4 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2101      	movs	r1, #1
 80008a2:	48a9      	ldr	r0, [pc, #676]	; (8000b48 <display7SEG+0x35c>)
 80008a4:	f001 f9bf 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2102      	movs	r1, #2
 80008ac:	48a6      	ldr	r0, [pc, #664]	; (8000b48 <display7SEG+0x35c>)
 80008ae:	f001 f9ba 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2104      	movs	r1, #4
 80008b6:	48a4      	ldr	r0, [pc, #656]	; (8000b48 <display7SEG+0x35c>)
 80008b8:	f001 f9b5 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2108      	movs	r1, #8
 80008c0:	48a1      	ldr	r0, [pc, #644]	; (8000b48 <display7SEG+0x35c>)
 80008c2:	f001 f9b0 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 80008c6:	e138      	b.n	8000b3a <display7SEG+0x34e>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	489d      	ldr	r0, [pc, #628]	; (8000b44 <display7SEG+0x358>)
 80008d0:	f001 f9a9 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008da:	489a      	ldr	r0, [pc, #616]	; (8000b44 <display7SEG+0x358>)
 80008dc:	f001 f9a3 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e6:	4897      	ldr	r0, [pc, #604]	; (8000b44 <display7SEG+0x358>)
 80008e8:	f001 f99d 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	4895      	ldr	r0, [pc, #596]	; (8000b48 <display7SEG+0x35c>)
 80008f2:	f001 f998 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	4893      	ldr	r0, [pc, #588]	; (8000b48 <display7SEG+0x35c>)
 80008fc:	f001 f993 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2104      	movs	r1, #4
 8000904:	4890      	ldr	r0, [pc, #576]	; (8000b48 <display7SEG+0x35c>)
 8000906:	f001 f98e 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2108      	movs	r1, #8
 800090e:	488e      	ldr	r0, [pc, #568]	; (8000b48 <display7SEG+0x35c>)
 8000910:	f001 f989 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000914:	e111      	b.n	8000b3a <display7SEG+0x34e>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	4889      	ldr	r0, [pc, #548]	; (8000b44 <display7SEG+0x358>)
 800091e:	f001 f982 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4886      	ldr	r0, [pc, #536]	; (8000b44 <display7SEG+0x358>)
 800092a:	f001 f97c 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000934:	4883      	ldr	r0, [pc, #524]	; (8000b44 <display7SEG+0x358>)
 8000936:	f001 f976 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2101      	movs	r1, #1
 800093e:	4882      	ldr	r0, [pc, #520]	; (8000b48 <display7SEG+0x35c>)
 8000940:	f001 f971 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2102      	movs	r1, #2
 8000948:	487f      	ldr	r0, [pc, #508]	; (8000b48 <display7SEG+0x35c>)
 800094a:	f001 f96c 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	487d      	ldr	r0, [pc, #500]	; (8000b48 <display7SEG+0x35c>)
 8000954:	f001 f967 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	487a      	ldr	r0, [pc, #488]	; (8000b48 <display7SEG+0x35c>)
 800095e:	f001 f962 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000962:	e0ea      	b.n	8000b3a <display7SEG+0x34e>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	4876      	ldr	r0, [pc, #472]	; (8000b44 <display7SEG+0x358>)
 800096c:	f001 f95b 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	4873      	ldr	r0, [pc, #460]	; (8000b44 <display7SEG+0x358>)
 8000978:	f001 f955 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	4870      	ldr	r0, [pc, #448]	; (8000b44 <display7SEG+0x358>)
 8000984:	f001 f94f 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	486e      	ldr	r0, [pc, #440]	; (8000b48 <display7SEG+0x35c>)
 800098e:	f001 f94a 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2102      	movs	r1, #2
 8000996:	486c      	ldr	r0, [pc, #432]	; (8000b48 <display7SEG+0x35c>)
 8000998:	f001 f945 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	4869      	ldr	r0, [pc, #420]	; (8000b48 <display7SEG+0x35c>)
 80009a2:	f001 f940 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	4867      	ldr	r0, [pc, #412]	; (8000b48 <display7SEG+0x35c>)
 80009ac:	f001 f93b 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 80009b0:	e0c3      	b.n	8000b3a <display7SEG+0x34e>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b8:	4862      	ldr	r0, [pc, #392]	; (8000b44 <display7SEG+0x358>)
 80009ba:	f001 f934 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c4:	485f      	ldr	r0, [pc, #380]	; (8000b44 <display7SEG+0x358>)
 80009c6:	f001 f92e 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d0:	485c      	ldr	r0, [pc, #368]	; (8000b44 <display7SEG+0x358>)
 80009d2:	f001 f928 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	485b      	ldr	r0, [pc, #364]	; (8000b48 <display7SEG+0x35c>)
 80009dc:	f001 f923 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2102      	movs	r1, #2
 80009e4:	4858      	ldr	r0, [pc, #352]	; (8000b48 <display7SEG+0x35c>)
 80009e6:	f001 f91e 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2104      	movs	r1, #4
 80009ee:	4856      	ldr	r0, [pc, #344]	; (8000b48 <display7SEG+0x35c>)
 80009f0:	f001 f919 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2108      	movs	r1, #8
 80009f8:	4853      	ldr	r0, [pc, #332]	; (8000b48 <display7SEG+0x35c>)
 80009fa:	f001 f914 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 80009fe:	e09c      	b.n	8000b3a <display7SEG+0x34e>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	484f      	ldr	r0, [pc, #316]	; (8000b44 <display7SEG+0x358>)
 8000a08:	f001 f90d 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	484c      	ldr	r0, [pc, #304]	; (8000b44 <display7SEG+0x358>)
 8000a14:	f001 f907 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1e:	4849      	ldr	r0, [pc, #292]	; (8000b44 <display7SEG+0x358>)
 8000a20:	f001 f901 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2101      	movs	r1, #1
 8000a28:	4847      	ldr	r0, [pc, #284]	; (8000b48 <display7SEG+0x35c>)
 8000a2a:	f001 f8fc 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	4845      	ldr	r0, [pc, #276]	; (8000b48 <display7SEG+0x35c>)
 8000a34:	f001 f8f7 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4842      	ldr	r0, [pc, #264]	; (8000b48 <display7SEG+0x35c>)
 8000a3e:	f001 f8f2 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2108      	movs	r1, #8
 8000a46:	4840      	ldr	r0, [pc, #256]	; (8000b48 <display7SEG+0x35c>)
 8000a48:	f001 f8ed 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000a4c:	e075      	b.n	8000b3a <display7SEG+0x34e>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	483b      	ldr	r0, [pc, #236]	; (8000b44 <display7SEG+0x358>)
 8000a56:	f001 f8e6 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	4838      	ldr	r0, [pc, #224]	; (8000b44 <display7SEG+0x358>)
 8000a62:	f001 f8e0 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6c:	4835      	ldr	r0, [pc, #212]	; (8000b44 <display7SEG+0x358>)
 8000a6e:	f001 f8da 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2101      	movs	r1, #1
 8000a76:	4834      	ldr	r0, [pc, #208]	; (8000b48 <display7SEG+0x35c>)
 8000a78:	f001 f8d5 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4831      	ldr	r0, [pc, #196]	; (8000b48 <display7SEG+0x35c>)
 8000a82:	f001 f8d0 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2104      	movs	r1, #4
 8000a8a:	482f      	ldr	r0, [pc, #188]	; (8000b48 <display7SEG+0x35c>)
 8000a8c:	f001 f8cb 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2108      	movs	r1, #8
 8000a94:	482c      	ldr	r0, [pc, #176]	; (8000b48 <display7SEG+0x35c>)
 8000a96:	f001 f8c6 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000a9a:	e04e      	b.n	8000b3a <display7SEG+0x34e>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	4828      	ldr	r0, [pc, #160]	; (8000b44 <display7SEG+0x358>)
 8000aa4:	f001 f8bf 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aae:	4825      	ldr	r0, [pc, #148]	; (8000b44 <display7SEG+0x358>)
 8000ab0:	f001 f8b9 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	4822      	ldr	r0, [pc, #136]	; (8000b44 <display7SEG+0x358>)
 8000abc:	f001 f8b3 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4820      	ldr	r0, [pc, #128]	; (8000b48 <display7SEG+0x35c>)
 8000ac6:	f001 f8ae 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2102      	movs	r1, #2
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <display7SEG+0x35c>)
 8000ad0:	f001 f8a9 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	481b      	ldr	r0, [pc, #108]	; (8000b48 <display7SEG+0x35c>)
 8000ada:	f001 f8a4 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4819      	ldr	r0, [pc, #100]	; (8000b48 <display7SEG+0x35c>)
 8000ae4:	f001 f89f 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000ae8:	e027      	b.n	8000b3a <display7SEG+0x34e>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	4814      	ldr	r0, [pc, #80]	; (8000b44 <display7SEG+0x358>)
 8000af2:	f001 f898 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afc:	4811      	ldr	r0, [pc, #68]	; (8000b44 <display7SEG+0x358>)
 8000afe:	f001 f892 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <display7SEG+0x358>)
 8000b0a:	f001 f88c 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2101      	movs	r1, #1
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <display7SEG+0x35c>)
 8000b14:	f001 f887 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <display7SEG+0x35c>)
 8000b1e:	f001 f882 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2104      	movs	r1, #4
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <display7SEG+0x35c>)
 8000b28:	f001 f87d 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <display7SEG+0x35c>)
 8000b32:	f001 f878 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 8000b36:	e000      	b.n	8000b3a <display7SEG+0x34e>
	default:
		break;
 8000b38:	bf00      	nop
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <update7SEG>:


void update7SEG(int index){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	f200 8084 	bhi.w	8000c64 <update7SEG+0x118>
 8000b5c:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <update7SEG+0x18>)
 8000b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b62:	bf00      	nop
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000bb1 	.word	0x08000bb1
 8000b6c:	08000bed 	.word	0x08000bed
 8000b70:	08000c29 	.word	0x08000c29
	switch (index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7a:	483d      	ldr	r0, [pc, #244]	; (8000c70 <update7SEG+0x124>)
 8000b7c:	f001 f853 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	483a      	ldr	r0, [pc, #232]	; (8000c70 <update7SEG+0x124>)
 8000b88:	f001 f84d 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4837      	ldr	r0, [pc, #220]	; (8000c70 <update7SEG+0x124>)
 8000b94:	f001 f847 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9e:	4834      	ldr	r0, [pc, #208]	; (8000c70 <update7SEG+0x124>)
 8000ba0:	f001 f841 	bl	8001c26 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[0]);
 8000ba4:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <update7SEG+0x128>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe1f 	bl	80007ec <display7SEG>
		break;
 8000bae:	e05a      	b.n	8000c66 <update7SEG+0x11a>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	482e      	ldr	r0, [pc, #184]	; (8000c70 <update7SEG+0x124>)
 8000bb8:	f001 f835 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <update7SEG+0x124>)
 8000bc4:	f001 f82f 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4828      	ldr	r0, [pc, #160]	; (8000c70 <update7SEG+0x124>)
 8000bd0:	f001 f829 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bda:	4825      	ldr	r0, [pc, #148]	; (8000c70 <update7SEG+0x124>)
 8000bdc:	f001 f823 	bl	8001c26 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[1]);
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <update7SEG+0x128>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe01 	bl	80007ec <display7SEG>
		break;
 8000bea:	e03c      	b.n	8000c66 <update7SEG+0x11a>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	481f      	ldr	r0, [pc, #124]	; (8000c70 <update7SEG+0x124>)
 8000bf4:	f001 f817 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <update7SEG+0x124>)
 8000c00:	f001 f811 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0a:	4819      	ldr	r0, [pc, #100]	; (8000c70 <update7SEG+0x124>)
 8000c0c:	f001 f80b 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	4816      	ldr	r0, [pc, #88]	; (8000c70 <update7SEG+0x124>)
 8000c18:	f001 f805 	bl	8001c26 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[2]);
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <update7SEG+0x128>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fde3 	bl	80007ec <display7SEG>
		break;
 8000c26:	e01e      	b.n	8000c66 <update7SEG+0x11a>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <update7SEG+0x124>)
 8000c30:	f000 fff9 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <update7SEG+0x124>)
 8000c3c:	f000 fff3 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <update7SEG+0x124>)
 8000c48:	f000 ffed 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <update7SEG+0x124>)
 8000c54:	f000 ffe7 	bl	8001c26 <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[3]);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <update7SEG+0x128>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fdc5 	bl	80007ec <display7SEG>
		break;
 8000c62:	e000      	b.n	8000c66 <update7SEG+0x11a>
	default:
		break;
 8000c64:	bf00      	nop
	}
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	20000098 	.word	0x20000098

08000c78 <updateBuffer>:

void updateBuffer(int mode){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b16      	subs	r3, #22
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	f200 809e 	bhi.w	8000dc6 <updateBuffer+0x14e>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <updateBuffer+0x18>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000d07 	.word	0x08000d07
 8000c98:	08000d47 	.word	0x08000d47
 8000c9c:	08000d87 	.word	0x08000d87
	switch(mode){
	case MODE1:
		buffer_7seg[0] = TimeForLed1 / 10;
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <updateBuffer+0x15c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <updateBuffer+0x160>)
 8000ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8000caa:	1092      	asrs	r2, r2, #2
 8000cac:	17db      	asrs	r3, r3, #31
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4a4a      	ldr	r2, [pc, #296]	; (8000ddc <updateBuffer+0x164>)
 8000cb2:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = TimeForLed1 % 10;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <updateBuffer+0x15c>)
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <updateBuffer+0x160>)
 8000cba:	fb83 2301 	smull	r2, r3, r3, r1
 8000cbe:	109a      	asrs	r2, r3, #2
 8000cc0:	17cb      	asrs	r3, r1, #31
 8000cc2:	1ad2      	subs	r2, r2, r3
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	1aca      	subs	r2, r1, r3
 8000cce:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <updateBuffer+0x164>)
 8000cd0:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = TimeForLed2 / 10;
 8000cd2:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <updateBuffer+0x168>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a40      	ldr	r2, [pc, #256]	; (8000dd8 <updateBuffer+0x160>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1092      	asrs	r2, r2, #2
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <updateBuffer+0x164>)
 8000ce4:	6093      	str	r3, [r2, #8]
		buffer_7seg[3] = TimeForLed2 % 10;
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <updateBuffer+0x168>)
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <updateBuffer+0x160>)
 8000cec:	fb83 2301 	smull	r2, r3, r3, r1
 8000cf0:	109a      	asrs	r2, r3, #2
 8000cf2:	17cb      	asrs	r3, r1, #31
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	1aca      	subs	r2, r1, r3
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <updateBuffer+0x164>)
 8000d02:	60da      	str	r2, [r3, #12]
		break;
 8000d04:	e060      	b.n	8000dc8 <updateBuffer+0x150>
	case MODE2:
		buffer_7seg[0] = value / 10;
 8000d06:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <updateBuffer+0x16c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a33      	ldr	r2, [pc, #204]	; (8000dd8 <updateBuffer+0x160>)
 8000d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d10:	1092      	asrs	r2, r2, #2
 8000d12:	17db      	asrs	r3, r3, #31
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <updateBuffer+0x164>)
 8000d18:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <updateBuffer+0x16c>)
 8000d1c:	6819      	ldr	r1, [r3, #0]
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <updateBuffer+0x160>)
 8000d20:	fb83 2301 	smull	r2, r3, r3, r1
 8000d24:	109a      	asrs	r2, r3, #2
 8000d26:	17cb      	asrs	r3, r1, #31
 8000d28:	1ad2      	subs	r2, r2, r3
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1aca      	subs	r2, r1, r3
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <updateBuffer+0x164>)
 8000d36:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <updateBuffer+0x164>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 2;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <updateBuffer+0x164>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	60da      	str	r2, [r3, #12]
		break;
 8000d44:	e040      	b.n	8000dc8 <updateBuffer+0x150>
	case MODE3:
		buffer_7seg[0] = value / 10;
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <updateBuffer+0x16c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <updateBuffer+0x160>)
 8000d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d50:	1092      	asrs	r2, r2, #2
 8000d52:	17db      	asrs	r3, r3, #31
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <updateBuffer+0x164>)
 8000d58:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <updateBuffer+0x16c>)
 8000d5c:	6819      	ldr	r1, [r3, #0]
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <updateBuffer+0x160>)
 8000d60:	fb83 2301 	smull	r2, r3, r3, r1
 8000d64:	109a      	asrs	r2, r3, #2
 8000d66:	17cb      	asrs	r3, r1, #31
 8000d68:	1ad2      	subs	r2, r2, r3
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	1aca      	subs	r2, r1, r3
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <updateBuffer+0x164>)
 8000d76:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <updateBuffer+0x164>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 3;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <updateBuffer+0x164>)
 8000d80:	2203      	movs	r2, #3
 8000d82:	60da      	str	r2, [r3, #12]
		break;
 8000d84:	e020      	b.n	8000dc8 <updateBuffer+0x150>
	case MODE4:
		buffer_7seg[0] = value / 10;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <updateBuffer+0x16c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <updateBuffer+0x160>)
 8000d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d90:	1092      	asrs	r2, r2, #2
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <updateBuffer+0x164>)
 8000d98:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <updateBuffer+0x16c>)
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <updateBuffer+0x160>)
 8000da0:	fb83 2301 	smull	r2, r3, r3, r1
 8000da4:	109a      	asrs	r2, r3, #2
 8000da6:	17cb      	asrs	r3, r1, #31
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	1aca      	subs	r2, r1, r3
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <updateBuffer+0x164>)
 8000db6:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <updateBuffer+0x164>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 4;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <updateBuffer+0x164>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	60da      	str	r2, [r3, #12]
		break;
 8000dc4:	e000      	b.n	8000dc8 <updateBuffer+0x150>
	default:
		break;
 8000dc6:	bf00      	nop
	}
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000005c 	.word	0x2000005c
 8000dd8:	66666667 	.word	0x66666667
 8000ddc:	20000098 	.word	0x20000098
 8000de0:	20000060 	.word	0x20000060
 8000de4:	200000a8 	.word	0x200000a8

08000de8 <display_led7seg>:
// hiá»n thá» led 7 Äoáº¡n vá»i T = 0.25s
void display_led7seg(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	switch(STATUS_7SEG){
 8000dec:	4b4d      	ldr	r3, [pc, #308]	; (8000f24 <display_led7seg+0x13c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	2b20      	cmp	r3, #32
 8000df4:	f200 808a 	bhi.w	8000f0c <display_led7seg+0x124>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <display_led7seg+0x18>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e85 	.word	0x08000e85
 8000e04:	08000f0d 	.word	0x08000f0d
 8000e08:	08000f0d 	.word	0x08000f0d
 8000e0c:	08000f0d 	.word	0x08000f0d
 8000e10:	08000f0d 	.word	0x08000f0d
 8000e14:	08000f0d 	.word	0x08000f0d
 8000e18:	08000f0d 	.word	0x08000f0d
 8000e1c:	08000f0d 	.word	0x08000f0d
 8000e20:	08000f0d 	.word	0x08000f0d
 8000e24:	08000f0d 	.word	0x08000f0d
 8000e28:	08000f0d 	.word	0x08000f0d
 8000e2c:	08000f0d 	.word	0x08000f0d
 8000e30:	08000f0d 	.word	0x08000f0d
 8000e34:	08000f0d 	.word	0x08000f0d
 8000e38:	08000f0d 	.word	0x08000f0d
 8000e3c:	08000f0d 	.word	0x08000f0d
 8000e40:	08000f0d 	.word	0x08000f0d
 8000e44:	08000f0d 	.word	0x08000f0d
 8000e48:	08000f0d 	.word	0x08000f0d
 8000e4c:	08000f0d 	.word	0x08000f0d
 8000e50:	08000f0d 	.word	0x08000f0d
 8000e54:	08000f0d 	.word	0x08000f0d
 8000e58:	08000f0d 	.word	0x08000f0d
 8000e5c:	08000f0d 	.word	0x08000f0d
 8000e60:	08000f0d 	.word	0x08000f0d
 8000e64:	08000f0d 	.word	0x08000f0d
 8000e68:	08000f0d 	.word	0x08000f0d
 8000e6c:	08000f0d 	.word	0x08000f0d
 8000e70:	08000f0d 	.word	0x08000f0d
 8000e74:	08000e95 	.word	0x08000e95
 8000e78:	08000eb3 	.word	0x08000eb3
 8000e7c:	08000ed1 	.word	0x08000ed1
 8000e80:	08000eef 	.word	0x08000eef
	case INIT:
		STATUS_7SEG = LED7SEG1;
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <display_led7seg+0x13c>)
 8000e86:	221e      	movs	r2, #30
 8000e88:	601a      	str	r2, [r3, #0]
		setTimer(5, 250);
 8000e8a:	21fa      	movs	r1, #250	; 0xfa
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f000 f975 	bl	800117c <setTimer>
		break;
 8000e92:	e044      	b.n	8000f1e <display_led7seg+0x136>
	case LED7SEG1:
		update7SEG(0);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fe59 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <display_led7seg+0x140>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d136      	bne.n	8000f10 <display_led7seg+0x128>
			setTimer(5, 250);
 8000ea2:	21fa      	movs	r1, #250	; 0xfa
 8000ea4:	2005      	movs	r0, #5
 8000ea6:	f000 f969 	bl	800117c <setTimer>
			STATUS_7SEG = LED7SEG2;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <display_led7seg+0x13c>)
 8000eac:	221f      	movs	r2, #31
 8000eae:	601a      	str	r2, [r3, #0]
		}
		break;
 8000eb0:	e02e      	b.n	8000f10 <display_led7seg+0x128>
	case LED7SEG2:
		update7SEG(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff fe4a 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <display_led7seg+0x140>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d129      	bne.n	8000f14 <display_led7seg+0x12c>
			setTimer(5, 250);
 8000ec0:	21fa      	movs	r1, #250	; 0xfa
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f000 f95a 	bl	800117c <setTimer>
			STATUS_7SEG = LED7SEG3;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <display_led7seg+0x13c>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ece:	e021      	b.n	8000f14 <display_led7seg+0x12c>
	case LED7SEG3:
		update7SEG(2);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff fe3b 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <display_led7seg+0x140>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d11c      	bne.n	8000f18 <display_led7seg+0x130>
			setTimer(5, 250);
 8000ede:	21fa      	movs	r1, #250	; 0xfa
 8000ee0:	2005      	movs	r0, #5
 8000ee2:	f000 f94b 	bl	800117c <setTimer>
			STATUS_7SEG = LED7SEG4;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <display_led7seg+0x13c>)
 8000ee8:	2221      	movs	r2, #33	; 0x21
 8000eea:	601a      	str	r2, [r3, #0]
		}
		break;
 8000eec:	e014      	b.n	8000f18 <display_led7seg+0x130>
	case LED7SEG4:
		update7SEG(3);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f7ff fe2c 	bl	8000b4c <update7SEG>
		if(timer_flag[5] == 1){
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <display_led7seg+0x140>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d10f      	bne.n	8000f1c <display_led7seg+0x134>
			setTimer(5, 250);
 8000efc:	21fa      	movs	r1, #250	; 0xfa
 8000efe:	2005      	movs	r0, #5
 8000f00:	f000 f93c 	bl	800117c <setTimer>
			STATUS_7SEG = LED7SEG1;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <display_led7seg+0x13c>)
 8000f06:	221e      	movs	r2, #30
 8000f08:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f0a:	e007      	b.n	8000f1c <display_led7seg+0x134>
	default:
		break;
 8000f0c:	bf00      	nop
 8000f0e:	e006      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f10:	bf00      	nop
 8000f12:	e004      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f14:	bf00      	nop
 8000f16:	e002      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f18:	bf00      	nop
 8000f1a:	e000      	b.n	8000f1e <display_led7seg+0x136>
		break;
 8000f1c:	bf00      	nop
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000044 	.word	0x20000044
 8000f28:	200000c4 	.word	0x200000c4

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fb78 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f826 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 f8ac 	bl	8001094 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f3c:	f000 f85e 	bl	8000ffc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <main+0x4c>)
 8000f42:	f001 facd 	bl	80024e0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //STATUS_7SEG = INIT;
  //STATUS_MODE = MODE1;
  //STATUS_MODE = MODE2;
  setTimer(0, 500);
 8000f46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f916 	bl	800117c <setTimer>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // DEBUG
	  if(timer_flag[0] == 1){
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <main+0x50>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <main+0x3e>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <main+0x54>)
 8000f5c:	f000 fe7b 	bl	8001c56 <HAL_GPIO_TogglePin>
		  setTimer(0, 500);
 8000f60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f909 	bl	800117c <setTimer>
//	  }
//	  if(isButtonPressed(2) == 1) {
//		  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
//	  }

	  fsm_setting_run();
 8000f6a:	f7ff fb75 	bl	8000658 <fsm_setting_run>
	  fsm_automatic_run();
 8000f6e:	f7ff f9b7 	bl	80002e0 <fsm_automatic_run>
	  fsm_manual_run();
 8000f72:	f7ff fb03 	bl	800057c <fsm_manual_run>
	  if(timer_flag[0] == 1){
 8000f76:	e7eb      	b.n	8000f50 <main+0x24>
 8000f78:	200000dc 	.word	0x200000dc
 8000f7c:	200000c4 	.word	0x200000c4
 8000f80:	40010800 	.word	0x40010800

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	; 0x40
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2228      	movs	r2, #40	; 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fe54 	bl	8002c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fe64 	bl	8001c88 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f8d3 	bl	8001170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 f8d0 	bl	8002188 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fee:	f000 f8bf 	bl	8001170 <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3740      	adds	r7, #64	; 0x40
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM2_Init+0x94>)
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM2_Init+0x94>)
 8001022:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_TIM2_Init+0x94>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM2_Init+0x94>)
 8001030:	2209      	movs	r2, #9
 8001032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM2_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM2_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM2_Init+0x94>)
 8001042:	f001 f9fd 	bl	8002440 <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800104c:	f000 f890 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_TIM2_Init+0x94>)
 800105e:	f001 fb7b 	bl	8002758 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001068:	f000 f882 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_TIM2_Init+0x94>)
 800107a:	f001 fd53 	bl	8002b24 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 f874 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000dc 	.word	0x200000dc

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_GPIO_Init+0xb8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <MX_GPIO_Init+0xb8>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_GPIO_Init+0xb8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_GPIO_Init+0xb8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <MX_GPIO_Init+0xb8>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_GPIO_Init+0xb8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 80010d8:	2200      	movs	r2, #0
 80010da:	f64f 718e 	movw	r1, #65422	; 0xff8e
 80010de:	481c      	ldr	r0, [pc, #112]	; (8001150 <MX_GPIO_Init+0xbc>)
 80010e0:	f000 fda1 	bl	8001c26 <HAL_GPIO_WritePin>
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 80010e4:	2200      	movs	r2, #0
 80010e6:	f24f 010f 	movw	r1, #61455	; 0xf00f
 80010ea:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_GPIO_Init+0xc0>)
 80010ec:	f000 fd9b 	bl	8001c26 <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin RED1_Pin
                           YELLOW1_Pin GREEN1_Pin RED2_Pin YELLOW2_Pin
                           GREEN2_Pin SEG_0_Pin SEG_1_Pin SEG_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 80010f0:	f64f 738e 	movw	r3, #65422	; 0xff8e
 80010f4:	60bb      	str	r3, [r7, #8]
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2302      	movs	r3, #2
 8001100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_GPIO_Init+0xbc>)
 800110a:	f000 fbfb 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800110e:	2370      	movs	r3, #112	; 0x70
 8001110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	480b      	ldr	r0, [pc, #44]	; (8001150 <MX_GPIO_Init+0xbc>)
 8001122:	f000 fbef 	bl	8001904 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_3_Pin SEG_4_Pin SEG_5_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 8001126:	f24f 030f 	movw	r3, #61455	; 0xf00f
 800112a:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2302      	movs	r3, #2
 8001136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_GPIO_Init+0xc0>)
 8001140:	f000 fbe0 	bl	8001904 <HAL_GPIO_Init>

}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000
 8001150:	40010800 	.word	0x40010800
 8001154:	40010c00 	.word	0x40010c00

08001158 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001160:	f000 f82c 	bl	80011bc <timerRun>
	getKeyInput();
 8001164:	f7ff f838 	bl	80001d8 <getKeyInput>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <setTimer>:
 *      Author: Admin
 */
#include "software_timer.h"
#define TICK 	10

void setTimer(int index, int duration){
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <setTimer+0x34>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2100      	movs	r1, #0
 800118c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = duration / TICK;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <setTimer+0x38>)
 8001194:	fb82 1203 	smull	r1, r2, r2, r3
 8001198:	1092      	asrs	r2, r2, #2
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad2      	subs	r2, r2, r3
 800119e:	4906      	ldr	r1, [pc, #24]	; (80011b8 <setTimer+0x3c>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200000c4 	.word	0x200000c4
 80011b4:	66666667 	.word	0x66666667
 80011b8:	200000ac 	.word	0x200000ac

080011bc <timerRun>:

void timerRun(){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_BUFFER; i++){
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e01c      	b.n	8001202 <timerRun+0x46>
		if(timer_counter[i] > 0){
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <timerRun+0x58>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dd13      	ble.n	80011fc <timerRun+0x40>
			timer_counter[i] --;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <timerRun+0x58>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <timerRun+0x58>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <timerRun+0x58>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dc04      	bgt.n	80011fc <timerRun+0x40>
				timer_flag[i] = 1;
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <timerRun+0x5c>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2101      	movs	r1, #1
 80011f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_BUFFER; i++){
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3301      	adds	r3, #1
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b05      	cmp	r3, #5
 8001206:	dddf      	ble.n	80011c8 <timerRun+0xc>
			}
		}
	}
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	200000ac 	.word	0x200000ac
 8001218:	200000c4 	.word	0x200000c4

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_MspInit+0x5c>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_MspInit+0x5c>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_MspInit+0x5c>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_MspInit+0x5c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_MspInit+0x60>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_MspInit+0x60>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000

08001280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001290:	d113      	bne.n	80012ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_TIM_Base_MspInit+0x44>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <HAL_TIM_Base_MspInit+0x44>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_TIM_Base_MspInit+0x44>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	201c      	movs	r0, #28
 80012b0:	f000 faf1 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b4:	201c      	movs	r0, #28
 80012b6:	f000 fb0a 	bl	80018ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130e:	f000 f9cf 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM2_IRQHandler+0x10>)
 800131e:	f001 f92b 	bl	8002578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000dc 	.word	0x200000dc

0800132c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <OffAll1>:
 *  Created on: Oct 31, 2024
 *      Author: Admin
 */
#include "traffic_light.h"

void OffAll1(){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <OffAll1+0x2c>)
 8001342:	f000 fc70 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <OffAll1+0x2c>)
 800134e:	f000 fc6a 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <OffAll1+0x2c>)
 800135a:	f000 fc64 	bl	8001c26 <HAL_GPIO_WritePin>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40010800 	.word	0x40010800

08001368 <OffAll2>:
void OffAll2(){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001372:	4808      	ldr	r0, [pc, #32]	; (8001394 <OffAll2+0x2c>)
 8001374:	f000 fc57 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <OffAll2+0x2c>)
 8001380:	f000 fc51 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	4802      	ldr	r0, [pc, #8]	; (8001394 <OffAll2+0x2c>)
 800138c:	f000 fc4b 	bl	8001c26 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800

08001398 <OnLedRed1>:
void OnLedRed1(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <OnLedRed1+0x2c>)
 80013a2:	f000 fc40 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <OnLedRed1+0x2c>)
 80013ae:	f000 fc3a 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <OnLedRed1+0x2c>)
 80013ba:	f000 fc34 	bl	8001c26 <HAL_GPIO_WritePin>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40010800 	.word	0x40010800

080013c8 <OnLedRed2>:
void OnLedRed2(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <OnLedRed2+0x2c>)
 80013d4:	f000 fc27 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <OnLedRed2+0x2c>)
 80013e0:	f000 fc21 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ea:	4802      	ldr	r0, [pc, #8]	; (80013f4 <OnLedRed2+0x2c>)
 80013ec:	f000 fc1b 	bl	8001c26 <HAL_GPIO_WritePin>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010800 	.word	0x40010800

080013f8 <OnLedYellow1>:
void OnLedYellow1(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	4808      	ldr	r0, [pc, #32]	; (8001424 <OnLedYellow1+0x2c>)
 8001402:	f000 fc10 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <OnLedYellow1+0x2c>)
 800140e:	f000 fc0a 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <OnLedYellow1+0x2c>)
 800141a:	f000 fc04 	bl	8001c26 <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40010800 	.word	0x40010800

08001428 <OnLedYellow2>:
void OnLedYellow2(){
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <OnLedYellow2+0x2c>)
 8001434:	f000 fbf7 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <OnLedYellow2+0x2c>)
 8001440:	f000 fbf1 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <OnLedYellow2+0x2c>)
 800144c:	f000 fbeb 	bl	8001c26 <HAL_GPIO_WritePin>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010800 	.word	0x40010800

08001458 <OnLedGreen1>:
void OnLedGreen1(){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <OnLedGreen1+0x2c>)
 8001462:	f000 fbe0 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <OnLedGreen1+0x2c>)
 800146e:	f000 fbda 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <OnLedGreen1+0x2c>)
 800147a:	f000 fbd4 	bl	8001c26 <HAL_GPIO_WritePin>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010800 	.word	0x40010800

08001488 <OnLedGreen2>:
void OnLedGreen2(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <OnLedGreen2+0x2c>)
 8001494:	f000 fbc7 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <OnLedGreen2+0x2c>)
 80014a0:	f000 fbc1 	bl	8001c26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <OnLedGreen2+0x2c>)
 80014ac:	f000 fbbb 	bl	8001c26 <HAL_GPIO_WritePin>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010800 	.word	0x40010800

080014b8 <BlinkyLedRed>:


void BlinkyLedRed(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <BlinkyLedRed+0x1c>)
 80014c0:	f000 fbc9 	bl	8001c56 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80014c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <BlinkyLedRed+0x1c>)
 80014ca:	f000 fbc4 	bl	8001c56 <HAL_GPIO_TogglePin>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40010800 	.word	0x40010800

080014d8 <BlinkyLedYellow>:
void BlinkyLedYellow(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80014dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <BlinkyLedYellow+0x1c>)
 80014e2:	f000 fbb8 	bl	8001c56 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80014e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ea:	4802      	ldr	r0, [pc, #8]	; (80014f4 <BlinkyLedYellow+0x1c>)
 80014ec:	f000 fbb3 	bl	8001c56 <HAL_GPIO_TogglePin>
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010800 	.word	0x40010800

080014f8 <BlinkyLedGreen>:
void BlinkyLedGreen(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80014fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <BlinkyLedGreen+0x1c>)
 8001502:	f000 fba8 	bl	8001c56 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8001506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <BlinkyLedGreen+0x1c>)
 800150c:	f000 fba3 	bl	8001c56 <HAL_GPIO_TogglePin>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40010800 	.word	0x40010800

08001518 <BlinkyLed>:
void BlinkyLed(int led){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	switch(STATUS_BLINKY){
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <BlinkyLed+0xb8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b2a      	cmp	r3, #42	; 0x2a
 8001526:	d03b      	beq.n	80015a0 <BlinkyLed+0x88>
 8001528:	2b2a      	cmp	r3, #42	; 0x2a
 800152a:	dc44      	bgt.n	80015b6 <BlinkyLed+0x9e>
 800152c:	2b29      	cmp	r3, #41	; 0x29
 800152e:	d02c      	beq.n	800158a <BlinkyLed+0x72>
 8001530:	2b29      	cmp	r3, #41	; 0x29
 8001532:	dc40      	bgt.n	80015b6 <BlinkyLed+0x9e>
 8001534:	2b01      	cmp	r3, #1
 8001536:	d002      	beq.n	800153e <BlinkyLed+0x26>
 8001538:	2b28      	cmp	r3, #40	; 0x28
 800153a:	d01b      	beq.n	8001574 <BlinkyLed+0x5c>
			setTimer(4, 250);
			BlinkyLedGreen();
		}
		break;
	default:
		break;
 800153c:	e03b      	b.n	80015b6 <BlinkyLed+0x9e>
		OffAll1();
 800153e:	f7ff fefb 	bl	8001338 <OffAll1>
		OffAll2();
 8001542:	f7ff ff11 	bl	8001368 <OffAll2>
		setTimer(4, 250);
 8001546:	21fa      	movs	r1, #250	; 0xfa
 8001548:	2004      	movs	r0, #4
 800154a:	f7ff fe17 	bl	800117c <setTimer>
		if(led == RED) STATUS_BLINKY = RED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b28      	cmp	r3, #40	; 0x28
 8001552:	d102      	bne.n	800155a <BlinkyLed+0x42>
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <BlinkyLed+0xb8>)
 8001556:	2228      	movs	r2, #40	; 0x28
 8001558:	601a      	str	r2, [r3, #0]
		if(led == YELLOW) STATUS_BLINKY = YELLOW;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b29      	cmp	r3, #41	; 0x29
 800155e:	d102      	bne.n	8001566 <BlinkyLed+0x4e>
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <BlinkyLed+0xb8>)
 8001562:	2229      	movs	r2, #41	; 0x29
 8001564:	601a      	str	r2, [r3, #0]
		if(led == GREEN) STATUS_BLINKY = GREEN;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b2a      	cmp	r3, #42	; 0x2a
 800156a:	d126      	bne.n	80015ba <BlinkyLed+0xa2>
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <BlinkyLed+0xb8>)
 800156e:	222a      	movs	r2, #42	; 0x2a
 8001570:	601a      	str	r2, [r3, #0]
		break;
 8001572:	e022      	b.n	80015ba <BlinkyLed+0xa2>
		if(timer_flag[4] == 1){
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <BlinkyLed+0xbc>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d120      	bne.n	80015be <BlinkyLed+0xa6>
			setTimer(4, 250);
 800157c:	21fa      	movs	r1, #250	; 0xfa
 800157e:	2004      	movs	r0, #4
 8001580:	f7ff fdfc 	bl	800117c <setTimer>
			BlinkyLedRed();
 8001584:	f7ff ff98 	bl	80014b8 <BlinkyLedRed>
		break;
 8001588:	e019      	b.n	80015be <BlinkyLed+0xa6>
		if(timer_flag[4] == 1){
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <BlinkyLed+0xbc>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d117      	bne.n	80015c2 <BlinkyLed+0xaa>
			setTimer(4, 250);
 8001592:	21fa      	movs	r1, #250	; 0xfa
 8001594:	2004      	movs	r0, #4
 8001596:	f7ff fdf1 	bl	800117c <setTimer>
			BlinkyLedYellow();
 800159a:	f7ff ff9d 	bl	80014d8 <BlinkyLedYellow>
		break;
 800159e:	e010      	b.n	80015c2 <BlinkyLed+0xaa>
		if(timer_flag[4] == 1){
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <BlinkyLed+0xbc>)
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10e      	bne.n	80015c6 <BlinkyLed+0xae>
			setTimer(4, 250);
 80015a8:	21fa      	movs	r1, #250	; 0xfa
 80015aa:	2004      	movs	r0, #4
 80015ac:	f7ff fde6 	bl	800117c <setTimer>
			BlinkyLedGreen();
 80015b0:	f7ff ffa2 	bl	80014f8 <BlinkyLedGreen>
		break;
 80015b4:	e007      	b.n	80015c6 <BlinkyLed+0xae>
		break;
 80015b6:	bf00      	nop
 80015b8:	e006      	b.n	80015c8 <BlinkyLed+0xb0>
		break;
 80015ba:	bf00      	nop
 80015bc:	e004      	b.n	80015c8 <BlinkyLed+0xb0>
		break;
 80015be:	bf00      	nop
 80015c0:	e002      	b.n	80015c8 <BlinkyLed+0xb0>
		break;
 80015c2:	bf00      	nop
 80015c4:	e000      	b.n	80015c8 <BlinkyLed+0xb0>
		break;
 80015c6:	bf00      	nop
	}
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000004c 	.word	0x2000004c
 80015d4:	200000c4 	.word	0x200000c4

080015d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d8:	f7ff fea8 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015de:	490c      	ldr	r1, [pc, #48]	; (8001610 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e0:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015f4:	4c09      	ldr	r4, [pc, #36]	; (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001602:	f001 faf9 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001606:	f7ff fc91 	bl	8000f2c <main>
  bx lr
 800160a:	4770      	bx	lr
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001614:	08002c94 	.word	0x08002c94
  ldr r2, =_sbss
 8001618:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800161c:	20000128 	.word	0x20000128

08001620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x28>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x28>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f923 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fdec 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f93b 	bl	80018ea <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 f903 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000064 	.word	0x20000064
 80016a8:	2000006c 	.word	0x2000006c
 80016ac:	20000068 	.word	0x20000068

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_IncTick+0x20>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	2000006c 	.word	0x2000006c
 80016d0:	20000124 	.word	0x20000124

080016d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_GetTick+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000124 	.word	0x20000124

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4906      	ldr	r1, [pc, #24]	; (8001780 <__NVIC_EnableIRQ+0x34>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff90 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff2d 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff42 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff90 	bl	80017d8 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5f 	bl	8001784 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff35 	bl	800174c <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b08b      	sub	sp, #44	; 0x2c
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001916:	e148      	b.n	8001baa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001918:	2201      	movs	r2, #1
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	429a      	cmp	r2, r3
 8001932:	f040 8137 	bne.w	8001ba4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4aa3      	ldr	r2, [pc, #652]	; (8001bc8 <HAL_GPIO_Init+0x2c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d05e      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001940:	4aa1      	ldr	r2, [pc, #644]	; (8001bc8 <HAL_GPIO_Init+0x2c4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d875      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 8001946:	4aa1      	ldr	r2, [pc, #644]	; (8001bcc <HAL_GPIO_Init+0x2c8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d058      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 800194c:	4a9f      	ldr	r2, [pc, #636]	; (8001bcc <HAL_GPIO_Init+0x2c8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d86f      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 8001952:	4a9f      	ldr	r2, [pc, #636]	; (8001bd0 <HAL_GPIO_Init+0x2cc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d052      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001958:	4a9d      	ldr	r2, [pc, #628]	; (8001bd0 <HAL_GPIO_Init+0x2cc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d869      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 800195e:	4a9d      	ldr	r2, [pc, #628]	; (8001bd4 <HAL_GPIO_Init+0x2d0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d04c      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001964:	4a9b      	ldr	r2, [pc, #620]	; (8001bd4 <HAL_GPIO_Init+0x2d0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d863      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 800196a:	4a9b      	ldr	r2, [pc, #620]	; (8001bd8 <HAL_GPIO_Init+0x2d4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d046      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
 8001970:	4a99      	ldr	r2, [pc, #612]	; (8001bd8 <HAL_GPIO_Init+0x2d4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d85d      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 8001976:	2b12      	cmp	r3, #18
 8001978:	d82a      	bhi.n	80019d0 <HAL_GPIO_Init+0xcc>
 800197a:	2b12      	cmp	r3, #18
 800197c:	d859      	bhi.n	8001a32 <HAL_GPIO_Init+0x12e>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <HAL_GPIO_Init+0x80>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	080019ff 	.word	0x080019ff
 8001988:	080019d9 	.word	0x080019d9
 800198c:	080019eb 	.word	0x080019eb
 8001990:	08001a2d 	.word	0x08001a2d
 8001994:	08001a33 	.word	0x08001a33
 8001998:	08001a33 	.word	0x08001a33
 800199c:	08001a33 	.word	0x08001a33
 80019a0:	08001a33 	.word	0x08001a33
 80019a4:	08001a33 	.word	0x08001a33
 80019a8:	08001a33 	.word	0x08001a33
 80019ac:	08001a33 	.word	0x08001a33
 80019b0:	08001a33 	.word	0x08001a33
 80019b4:	08001a33 	.word	0x08001a33
 80019b8:	08001a33 	.word	0x08001a33
 80019bc:	08001a33 	.word	0x08001a33
 80019c0:	08001a33 	.word	0x08001a33
 80019c4:	08001a33 	.word	0x08001a33
 80019c8:	080019e1 	.word	0x080019e1
 80019cc:	080019f5 	.word	0x080019f5
 80019d0:	4a82      	ldr	r2, [pc, #520]	; (8001bdc <HAL_GPIO_Init+0x2d8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019d6:	e02c      	b.n	8001a32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e029      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	3304      	adds	r3, #4
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e024      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	3308      	adds	r3, #8
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e01f      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	330c      	adds	r3, #12
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e01a      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a06:	2304      	movs	r3, #4
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e013      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a14:	2308      	movs	r3, #8
 8001a16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	611a      	str	r2, [r3, #16]
          break;
 8001a1e:	e009      	b.n	8001a34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a20:	2308      	movs	r3, #8
 8001a22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	615a      	str	r2, [r3, #20]
          break;
 8001a2a:	e003      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x130>
          break;
 8001a32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2bff      	cmp	r3, #255	; 0xff
 8001a38:	d801      	bhi.n	8001a3e <HAL_GPIO_Init+0x13a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	e001      	b.n	8001a42 <HAL_GPIO_Init+0x13e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3304      	adds	r3, #4
 8001a42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2bff      	cmp	r3, #255	; 0xff
 8001a48:	d802      	bhi.n	8001a50 <HAL_GPIO_Init+0x14c>
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x152>
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	3b08      	subs	r3, #8
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	6a39      	ldr	r1, [r7, #32]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	431a      	orrs	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8090 	beq.w	8001ba4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <HAL_GPIO_Init+0x2dc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a55      	ldr	r2, [pc, #340]	; (8001be0 <HAL_GPIO_Init+0x2dc>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_GPIO_Init+0x2dc>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a9c:	4a51      	ldr	r2, [pc, #324]	; (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a49      	ldr	r2, [pc, #292]	; (8001be8 <HAL_GPIO_Init+0x2e4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a48      	ldr	r2, [pc, #288]	; (8001bec <HAL_GPIO_Init+0x2e8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0x1dc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a47      	ldr	r2, [pc, #284]	; (8001bf0 <HAL_GPIO_Init+0x2ec>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_GPIO_Init+0x1d8>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x1e2>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af6:	493b      	ldr	r1, [pc, #236]	; (8001be4 <HAL_GPIO_Init+0x2e0>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b10:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b1e:	4b35      	ldr	r3, [pc, #212]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4933      	ldr	r1, [pc, #204]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	492d      	ldr	r1, [pc, #180]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4929      	ldr	r1, [pc, #164]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4923      	ldr	r1, [pc, #140]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	491f      	ldr	r1, [pc, #124]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4919      	ldr	r1, [pc, #100]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4915      	ldr	r1, [pc, #84]	; (8001bf4 <HAL_GPIO_Init+0x2f0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f47f aeaf 	bne.w	8001918 <HAL_GPIO_Init+0x14>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	372c      	adds	r7, #44	; 0x2c
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	10320000 	.word	0x10320000
 8001bcc:	10310000 	.word	0x10310000
 8001bd0:	10220000 	.word	0x10220000
 8001bd4:	10210000 	.word	0x10210000
 8001bd8:	10120000 	.word	0x10120000
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	807b      	strh	r3, [r7, #2]
 8001c32:	4613      	mov	r3, r2
 8001c34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c36:	787b      	ldrb	r3, [r7, #1]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3c:	887a      	ldrh	r2, [r7, #2]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c42:	e003      	b.n	8001c4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	041a      	lsls	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	611a      	str	r2, [r3, #16]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	400b      	ands	r3, r1
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e26c      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8087 	beq.w	8001db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca8:	4b92      	ldr	r3, [pc, #584]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d00c      	beq.n	8001cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d112      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
 8001cc0:	4b8c      	ldr	r3, [pc, #560]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b89      	ldr	r3, [pc, #548]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d06c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x12c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d168      	bne.n	8001db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e246      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x76>
 8001cf0:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a7f      	ldr	r2, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e02e      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b7b      	ldr	r3, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b78      	ldr	r3, [pc, #480]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e01d      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0xbc>
 8001d2a:	4b72      	ldr	r3, [pc, #456]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a71      	ldr	r2, [pc, #452]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a6e      	ldr	r2, [pc, #440]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0xd4>
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a67      	ldr	r2, [pc, #412]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d013      	beq.n	8001d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fcb6 	bl	80016d4 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fcb2 	bl	80016d4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1fa      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0xe4>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fca2 	bl	80016d4 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fc9e 	bl	80016d4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1e6      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x10c>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d063      	beq.n	8001e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d11c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d116      	bne.n	8001e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e1ba      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4939      	ldr	r1, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	e03a      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fc57 	bl	80016d4 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fc53 	bl	80016d4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e19b      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
 8001e5c:	e015      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fc36 	bl	80016d4 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fc32 	bl	80016d4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e17a      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d03a      	beq.n	8001f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d019      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fc16 	bl	80016d4 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff fc12 	bl	80016d4 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e15a      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 fa9a 	bl	8002404 <RCC_Delay>
 8001ed0:	e01c      	b.n	8001f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_OscConfig+0x274>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fbfc 	bl	80016d4 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ede:	e00f      	b.n	8001f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fbf8 	bl	80016d4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d908      	bls.n	8001f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e140      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	42420000 	.word	0x42420000
 8001efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b9e      	ldr	r3, [pc, #632]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e9      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a6 	beq.w	8002066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1e:	4b97      	ldr	r3, [pc, #604]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b94      	ldr	r3, [pc, #592]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a93      	ldr	r2, [pc, #588]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]
 8001f36:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	4b8e      	ldr	r3, [pc, #568]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f52:	4b8b      	ldr	r3, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a8a      	ldr	r2, [pc, #552]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fbb9 	bl	80016d4 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff fbb5 	bl	80016d4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0fd      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x312>
 8001f8c:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a7a      	ldr	r2, [pc, #488]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e02d      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x334>
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a75      	ldr	r2, [pc, #468]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a72      	ldr	r2, [pc, #456]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	e01c      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x356>
 8001fc4:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a69      	ldr	r2, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e00b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x36e>
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a66      	ldr	r2, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6213      	str	r3, [r2, #32]
 8001fea:	4b64      	ldr	r3, [pc, #400]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a63      	ldr	r2, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d015      	beq.n	800202a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb69 	bl	80016d4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7ff fb65 	bl	80016d4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0ab      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ee      	beq.n	8002006 <HAL_RCC_OscConfig+0x37e>
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202a:	f7ff fb53 	bl	80016d4 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff fb4f 	bl	80016d4 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e095      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	4b4c      	ldr	r3, [pc, #304]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ee      	bne.n	8002032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a47      	ldr	r2, [pc, #284]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8081 	beq.w	8002172 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d061      	beq.n	8002140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d146      	bne.n	8002112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fb23 	bl	80016d4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fb1f 	bl	80016d4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e067      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	492d      	ldr	r1, [pc, #180]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a19      	ldr	r1, [r3, #32]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	430b      	orrs	r3, r1
 80020de:	4927      	ldr	r1, [pc, #156]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff faf3 	bl	80016d4 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff faef 	bl	80016d4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e037      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46a>
 8002110:	e02f      	b.n	8002172 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_RCC_OscConfig+0x4fc>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fadc 	bl	80016d4 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff fad8 	bl	80016d4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e020      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x498>
 800213e:	e018      	b.n	8002172 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e013      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x4f4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
 8002184:	42420060 	.word	0x42420060

08002188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0d0      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4965      	ldr	r1, [pc, #404]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021fc:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	494d      	ldr	r1, [pc, #308]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07f      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e073      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06b      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4936      	ldr	r1, [pc, #216]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7ff fa2c 	bl	80016d4 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7ff fa28 	bl	80016d4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e053      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d210      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e032      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4916      	ldr	r1, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490e      	ldr	r1, [pc, #56]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	490a      	ldr	r1, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1cc>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f98a 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
 8002350:	08002c68 	.word	0x08002c68
 8002354:	20000064 	.word	0x20000064
 8002358:	20000068 	.word	0x20000068

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x30>
 8002386:	2b08      	cmp	r3, #8
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x36>
 800238a:	e027      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800238e:	613b      	str	r3, [r7, #16]
      break;
 8002390:	e027      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c5b      	lsrs	r3, r3, #17
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	fb02 f203 	mul.w	r2, r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e004      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	613b      	str	r3, [r7, #16]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023de:	613b      	str	r3, [r7, #16]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	693b      	ldr	r3, [r7, #16]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	08002c78 	.word	0x08002c78
 80023fc:	08002c88 	.word	0x08002c88
 8002400:	003d0900 	.word	0x003d0900

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000064 	.word	0x20000064
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e041      	b.n	80024d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe ff0a 	bl	8001280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 fa56 	bl	8002930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d001      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e035      	b.n	8002564 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a16      	ldr	r2, [pc, #88]	; (8002570 <HAL_TIM_Base_Start_IT+0x90>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_TIM_Base_Start_IT+0x4e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d004      	beq.n	800252e <HAL_TIM_Base_Start_IT+0x4e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <HAL_TIM_Base_Start_IT+0x94>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d111      	bne.n	8002552 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d010      	beq.n	8002562 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002550:	e007      	b.n	8002562 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400

08002578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d020      	beq.n	80025dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01b      	beq.n	80025dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0202 	mvn.w	r2, #2
 80025ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f998 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f98b 	bl	80028e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f99a 	bl	800290a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d020      	beq.n	8002628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0204 	mvn.w	r2, #4
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f972 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f965 	bl	80028e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f974 	bl	800290a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d020      	beq.n	8002674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01b      	beq.n	8002674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0208 	mvn.w	r2, #8
 8002644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2204      	movs	r2, #4
 800264a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f94c 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8002660:	e005      	b.n	800266e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f93f 	bl	80028e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f94e 	bl	800290a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d020      	beq.n	80026c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01b      	beq.n	80026c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0210 	mvn.w	r2, #16
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2208      	movs	r2, #8
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f926 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f919 	bl	80028e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f928 	bl	800290a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0201 	mvn.w	r2, #1
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fd3a 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00c      	beq.n	8002708 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa6f 	bl	8002be6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8f8 	bl	800291c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0220 	mvn.w	r2, #32
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa42 	bl	8002bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_TIM_ConfigClockSource+0x1c>
 8002770:	2302      	movs	r3, #2
 8002772:	e0b4      	b.n	80028de <HAL_TIM_ConfigClockSource+0x186>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ac:	d03e      	beq.n	800282c <HAL_TIM_ConfigClockSource+0xd4>
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b2:	f200 8087 	bhi.w	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ba:	f000 8086 	beq.w	80028ca <HAL_TIM_ConfigClockSource+0x172>
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d87f      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b70      	cmp	r3, #112	; 0x70
 80027c6:	d01a      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0xa6>
 80027c8:	2b70      	cmp	r3, #112	; 0x70
 80027ca:	d87b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b60      	cmp	r3, #96	; 0x60
 80027ce:	d050      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x11a>
 80027d0:	2b60      	cmp	r3, #96	; 0x60
 80027d2:	d877      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d03c      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0xfa>
 80027d8:	2b50      	cmp	r3, #80	; 0x50
 80027da:	d873      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d058      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x13a>
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d86f      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b30      	cmp	r3, #48	; 0x30
 80027e6:	d064      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027e8:	2b30      	cmp	r3, #48	; 0x30
 80027ea:	d86b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d060      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d867      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05c      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d05a      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	e062      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f000 f96a 	bl	8002ae6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	609a      	str	r2, [r3, #8]
      break;
 800282a:	e04f      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f000 f953 	bl	8002ae6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284e:	609a      	str	r2, [r3, #8]
      break;
 8002850:	e03c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f000 f8ca 	bl	80029f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2150      	movs	r1, #80	; 0x50
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f921 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 8002870:	e02c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	f000 f8e8 	bl	8002a54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2160      	movs	r1, #96	; 0x60
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f911 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 8002890:	e01c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 f8aa 	bl	80029f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2140      	movs	r1, #64	; 0x40
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f901 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e00c      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f000 f8f8 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 80028c2:	e003      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      break;
 80028c8:	e000      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
	...

08002930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <TIM_Base_SetConfig+0xc0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d007      	beq.n	8002958 <TIM_Base_SetConfig+0x28>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0x28>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a28      	ldr	r2, [pc, #160]	; (80029f4 <TIM_Base_SetConfig+0xc4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <TIM_Base_SetConfig+0xc0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <TIM_Base_SetConfig+0x52>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d003      	beq.n	8002982 <TIM_Base_SetConfig+0x52>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <TIM_Base_SetConfig+0xc4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <TIM_Base_SetConfig+0xc0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d103      	bne.n	80029c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]
  }
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	40000400 	.word	0x40000400

080029f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0201 	bic.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 030a 	bic.w	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0210 	bic.w	r2, r3, #16
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	031b      	lsls	r3, r3, #12
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f043 0307 	orr.w	r3, r3, #7
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	021a      	lsls	r2, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	609a      	str	r2, [r3, #8]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e041      	b.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d004      	beq.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10c      	bne.n	8002bae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	4d0c      	ldr	r5, [pc, #48]	; (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	f000 f822 	bl	8002c50 <_init>
 8002c0c:	2600      	movs	r6, #0
 8002c0e:	4d0a      	ldr	r5, [pc, #40]	; (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <__libc_init_array+0x44>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08002c8c 	.word	0x08002c8c
 8002c34:	08002c8c 	.word	0x08002c8c
 8002c38:	08002c8c 	.word	0x08002c8c
 8002c3c:	08002c90 	.word	0x08002c90

08002c40 <memset>:
 8002c40:	4603      	mov	r3, r0
 8002c42:	4402      	add	r2, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	bf00      	nop
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
