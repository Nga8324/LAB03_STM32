
LAB03_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f44  08002f44  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002f44  08002f44  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f44  08002f44  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000068  08002fb4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08002fb4  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c7f  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6d  00000000  00000000  00029d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f70  00000000  00000000  0002cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3a5  00000000  00000000  00043cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082738  00000000  00000000  00050065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d279d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  000d27f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f08 	.word	0x08002f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f08 	.word	0x08002f08

0800014c <isButton1Pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000084 	.word	0x20000084

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000088 	.word	0x20000088

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000008c 	.word	0x2000008c

080001b8 <getKeyInput>:

void getKeyInput(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	for(int but = 0; but < 3; but ++){
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e11c      	b.n	80003fe <getKeyInput+0x246>
		KeyReg0[but] = KeyReg1[but];
 80001c4:	4a92      	ldr	r2, [pc, #584]	; (8000410 <getKeyInput+0x258>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4991      	ldr	r1, [pc, #580]	; (8000414 <getKeyInput+0x25c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[but] = KeyReg2[but];
 80001d4:	4a90      	ldr	r2, [pc, #576]	; (8000418 <getKeyInput+0x260>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001dc:	498c      	ldr	r1, [pc, #560]	; (8000410 <getKeyInput+0x258>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(but == 0){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d158      	bne.n	800029c <getKeyInput+0xe4>
			KeyReg2[but] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001ea:	2110      	movs	r1, #16
 80001ec:	488b      	ldr	r0, [pc, #556]	; (800041c <getKeyInput+0x264>)
 80001ee:	f001 fe5f 	bl	8001eb0 <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4619      	mov	r1, r3
 80001f6:	4a88      	ldr	r2, [pc, #544]	; (8000418 <getKeyInput+0x260>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 80001fe:	4a85      	ldr	r2, [pc, #532]	; (8000414 <getKeyInput+0x25c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4982      	ldr	r1, [pc, #520]	; (8000410 <getKeyInput+0x258>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	f040 80f2 	bne.w	80003f8 <getKeyInput+0x240>
 8000214:	4a7e      	ldr	r2, [pc, #504]	; (8000410 <getKeyInput+0x258>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	497e      	ldr	r1, [pc, #504]	; (8000418 <getKeyInput+0x260>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	f040 80e7 	bne.w	80003f8 <getKeyInput+0x240>
				if(KeyReg3[but] != KeyReg2[but]){
 800022a:	4a7d      	ldr	r2, [pc, #500]	; (8000420 <getKeyInput+0x268>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4979      	ldr	r1, [pc, #484]	; (8000418 <getKeyInput+0x260>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d015      	beq.n	800026a <getKeyInput+0xb2>
					KeyReg3[but] = KeyReg2[but];
 800023e:	4a76      	ldr	r2, [pc, #472]	; (8000418 <getKeyInput+0x260>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	4976      	ldr	r1, [pc, #472]	; (8000420 <getKeyInput+0x268>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(KeyReg2[but] == PRESSED_STATE){
 800024e:	4a72      	ldr	r2, [pc, #456]	; (8000418 <getKeyInput+0x260>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b00      	cmp	r3, #0
 8000258:	f040 80ce 	bne.w	80003f8 <getKeyInput+0x240>
						//TODO
						button1_flag = 1;
 800025c:	4b71      	ldr	r3, [pc, #452]	; (8000424 <getKeyInput+0x26c>)
 800025e:	2201      	movs	r2, #1
 8000260:	601a      	str	r2, [r3, #0]
						TimerForKeyPress = 200;
 8000262:	4b71      	ldr	r3, [pc, #452]	; (8000428 <getKeyInput+0x270>)
 8000264:	22c8      	movs	r2, #200	; 0xc8
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	e0c6      	b.n	80003f8 <getKeyInput+0x240>
					}
				}else{
					TimerForKeyPress --;
 800026a:	4b6f      	ldr	r3, [pc, #444]	; (8000428 <getKeyInput+0x270>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	3b01      	subs	r3, #1
 8000270:	4a6d      	ldr	r2, [pc, #436]	; (8000428 <getKeyInput+0x270>)
 8000272:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 8000274:	4b6c      	ldr	r3, [pc, #432]	; (8000428 <getKeyInput+0x270>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	f040 80bd 	bne.w	80003f8 <getKeyInput+0x240>
						if(KeyReg2[but] == PRESSED_STATE){
 800027e:	4a66      	ldr	r2, [pc, #408]	; (8000418 <getKeyInput+0x260>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d104      	bne.n	8000294 <getKeyInput+0xdc>
							KeyReg3[but] = NORMAL_STATE;
 800028a:	4a65      	ldr	r2, [pc, #404]	; (8000420 <getKeyInput+0x268>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2101      	movs	r1, #1
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						TimerForKeyPress = 200;
 8000294:	4b64      	ldr	r3, [pc, #400]	; (8000428 <getKeyInput+0x270>)
 8000296:	22c8      	movs	r2, #200	; 0xc8
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	e0ad      	b.n	80003f8 <getKeyInput+0x240>
					}
				}
			}
		}else if(but == 1){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d156      	bne.n	8000350 <getKeyInput+0x198>
			KeyReg2[but] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80002a2:	2120      	movs	r1, #32
 80002a4:	485d      	ldr	r0, [pc, #372]	; (800041c <getKeyInput+0x264>)
 80002a6:	f001 fe03 	bl	8001eb0 <HAL_GPIO_ReadPin>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4619      	mov	r1, r3
 80002ae:	4a5a      	ldr	r2, [pc, #360]	; (8000418 <getKeyInput+0x260>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 80002b6:	4a57      	ldr	r2, [pc, #348]	; (8000414 <getKeyInput+0x25c>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002be:	4954      	ldr	r1, [pc, #336]	; (8000410 <getKeyInput+0x258>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	f040 8096 	bne.w	80003f8 <getKeyInput+0x240>
 80002cc:	4a50      	ldr	r2, [pc, #320]	; (8000410 <getKeyInput+0x258>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d4:	4950      	ldr	r1, [pc, #320]	; (8000418 <getKeyInput+0x260>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002dc:	429a      	cmp	r2, r3
 80002de:	f040 808b 	bne.w	80003f8 <getKeyInput+0x240>
				if(KeyReg3[but] != KeyReg2[but]){
 80002e2:	4a4f      	ldr	r2, [pc, #316]	; (8000420 <getKeyInput+0x268>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ea:	494b      	ldr	r1, [pc, #300]	; (8000418 <getKeyInput+0x260>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d014      	beq.n	8000320 <getKeyInput+0x168>
					KeyReg3[but] = KeyReg2[but];
 80002f6:	4a48      	ldr	r2, [pc, #288]	; (8000418 <getKeyInput+0x260>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fe:	4948      	ldr	r1, [pc, #288]	; (8000420 <getKeyInput+0x268>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(KeyReg2[but] == PRESSED_STATE){
 8000306:	4a44      	ldr	r2, [pc, #272]	; (8000418 <getKeyInput+0x260>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d172      	bne.n	80003f8 <getKeyInput+0x240>
						//TODO
						button2_flag = 1;
 8000312:	4b46      	ldr	r3, [pc, #280]	; (800042c <getKeyInput+0x274>)
 8000314:	2201      	movs	r2, #1
 8000316:	601a      	str	r2, [r3, #0]
						TimerForKeyPress = 200;
 8000318:	4b43      	ldr	r3, [pc, #268]	; (8000428 <getKeyInput+0x270>)
 800031a:	22c8      	movs	r2, #200	; 0xc8
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	e06b      	b.n	80003f8 <getKeyInput+0x240>
					}
				}else{
					TimerForKeyPress --;
 8000320:	4b41      	ldr	r3, [pc, #260]	; (8000428 <getKeyInput+0x270>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	4a40      	ldr	r2, [pc, #256]	; (8000428 <getKeyInput+0x270>)
 8000328:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 800032a:	4b3f      	ldr	r3, [pc, #252]	; (8000428 <getKeyInput+0x270>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d162      	bne.n	80003f8 <getKeyInput+0x240>
						if(KeyReg2[but] == PRESSED_STATE){
 8000332:	4a39      	ldr	r2, [pc, #228]	; (8000418 <getKeyInput+0x260>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d104      	bne.n	8000348 <getKeyInput+0x190>
							KeyReg3[but] = NORMAL_STATE;
 800033e:	4a38      	ldr	r2, [pc, #224]	; (8000420 <getKeyInput+0x268>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2101      	movs	r1, #1
 8000344:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						TimerForKeyPress = 200;
 8000348:	4b37      	ldr	r3, [pc, #220]	; (8000428 <getKeyInput+0x270>)
 800034a:	22c8      	movs	r2, #200	; 0xc8
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	e053      	b.n	80003f8 <getKeyInput+0x240>
					}
				}
			}
		}else{
			KeyReg2[but] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000350:	2140      	movs	r1, #64	; 0x40
 8000352:	4832      	ldr	r0, [pc, #200]	; (800041c <getKeyInput+0x264>)
 8000354:	f001 fdac 	bl	8001eb0 <HAL_GPIO_ReadPin>
 8000358:	4603      	mov	r3, r0
 800035a:	4619      	mov	r1, r3
 800035c:	4a2e      	ldr	r2, [pc, #184]	; (8000418 <getKeyInput+0x260>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((KeyReg0[but] == KeyReg1[but]) && (KeyReg1[but] == KeyReg2[but])){
 8000364:	4a2b      	ldr	r2, [pc, #172]	; (8000414 <getKeyInput+0x25c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800036c:	4928      	ldr	r1, [pc, #160]	; (8000410 <getKeyInput+0x258>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000374:	429a      	cmp	r2, r3
 8000376:	d13f      	bne.n	80003f8 <getKeyInput+0x240>
 8000378:	4a25      	ldr	r2, [pc, #148]	; (8000410 <getKeyInput+0x258>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000380:	4925      	ldr	r1, [pc, #148]	; (8000418 <getKeyInput+0x260>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000388:	429a      	cmp	r2, r3
 800038a:	d135      	bne.n	80003f8 <getKeyInput+0x240>
				if(KeyReg3[but] != KeyReg2[but]){
 800038c:	4a24      	ldr	r2, [pc, #144]	; (8000420 <getKeyInput+0x268>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000394:	4920      	ldr	r1, [pc, #128]	; (8000418 <getKeyInput+0x260>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039c:	429a      	cmp	r2, r3
 800039e:	d014      	beq.n	80003ca <getKeyInput+0x212>
					KeyReg3[but] = KeyReg2[but];
 80003a0:	4a1d      	ldr	r2, [pc, #116]	; (8000418 <getKeyInput+0x260>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003a8:	491d      	ldr	r1, [pc, #116]	; (8000420 <getKeyInput+0x268>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(KeyReg2[but] == PRESSED_STATE){
 80003b0:	4a19      	ldr	r2, [pc, #100]	; (8000418 <getKeyInput+0x260>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d11d      	bne.n	80003f8 <getKeyInput+0x240>
						//TODO
						button3_flag = 1;
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <getKeyInput+0x278>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
						TimerForKeyPress = 200;
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <getKeyInput+0x270>)
 80003c4:	22c8      	movs	r2, #200	; 0xc8
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	e016      	b.n	80003f8 <getKeyInput+0x240>
					}
				}else{
					TimerForKeyPress --;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <getKeyInput+0x270>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a15      	ldr	r2, [pc, #84]	; (8000428 <getKeyInput+0x270>)
 80003d2:	6013      	str	r3, [r2, #0]
					if(TimerForKeyPress == 0){
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <getKeyInput+0x270>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d10d      	bne.n	80003f8 <getKeyInput+0x240>
						if(KeyReg2[but] == PRESSED_STATE){
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <getKeyInput+0x260>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d104      	bne.n	80003f2 <getKeyInput+0x23a>
							KeyReg3[but] = NORMAL_STATE;
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <getKeyInput+0x268>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2101      	movs	r1, #1
 80003ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						TimerForKeyPress = 200;
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <getKeyInput+0x270>)
 80003f4:	22c8      	movs	r2, #200	; 0xc8
 80003f6:	601a      	str	r2, [r3, #0]
	for(int but = 0; but < 3; but ++){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3301      	adds	r3, #1
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b02      	cmp	r3, #2
 8000402:	f77f aedf 	ble.w	80001c4 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000000c 	.word	0x2000000c
 8000414:	20000000 	.word	0x20000000
 8000418:	20000018 	.word	0x20000018
 800041c:	40010800 	.word	0x40010800
 8000420:	20000024 	.word	0x20000024
 8000424:	20000084 	.word	0x20000084
 8000428:	20000030 	.word	0x20000030
 800042c:	20000088 	.word	0x20000088
 8000430:	2000008c 	.word	0x2000008c

08000434 <fsm_automatic_run>:
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	//
	switch(STATUS_LED1){
 8000438:	4b79      	ldr	r3, [pc, #484]	; (8000620 <fsm_automatic_run+0x1ec>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	2b03      	cmp	r3, #3
 8000440:	d869      	bhi.n	8000516 <fsm_automatic_run+0xe2>
 8000442:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <fsm_automatic_run+0x14>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	08000459 	.word	0x08000459
 800044c:	08000475 	.word	0x08000475
 8000450:	080004e1 	.word	0x080004e1
 8000454:	080004ab 	.word	0x080004ab
	case INIT:
		OffAll1();
 8000458:	f001 f914 	bl	8001684 <OffAll1>

		STATUS_LED1 = AUTO_RED1;
 800045c:	4b70      	ldr	r3, [pc, #448]	; (8000620 <fsm_automatic_run+0x1ec>)
 800045e:	2202      	movs	r2, #2
 8000460:	601a      	str	r2, [r3, #0]
		TimeForLed1 = TimeRed;
 8000462:	4b70      	ldr	r3, [pc, #448]	; (8000624 <fsm_automatic_run+0x1f0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a70      	ldr	r2, [pc, #448]	; (8000628 <fsm_automatic_run+0x1f4>)
 8000468:	6013      	str	r3, [r2, #0]
		setTimer3(1000);
 800046a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046e:	f000 ff3d 	bl	80012ec <setTimer3>
		break;
 8000472:	e057      	b.n	8000524 <fsm_automatic_run+0xf0>
	case AUTO_RED1:
		OnLedRed1();
 8000474:	f001 f936 	bl	80016e4 <OnLedRed1>

		if(timer3_flag == 1){
 8000478:	4b6c      	ldr	r3, [pc, #432]	; (800062c <fsm_automatic_run+0x1f8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d14c      	bne.n	800051a <fsm_automatic_run+0xe6>
			setTimer3(1000);
 8000480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000484:	f000 ff32 	bl	80012ec <setTimer3>
			TimeForLed1 --;
 8000488:	4b67      	ldr	r3, [pc, #412]	; (8000628 <fsm_automatic_run+0x1f4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b01      	subs	r3, #1
 800048e:	4a66      	ldr	r2, [pc, #408]	; (8000628 <fsm_automatic_run+0x1f4>)
 8000490:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 8000492:	4b65      	ldr	r3, [pc, #404]	; (8000628 <fsm_automatic_run+0x1f4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	dc3f      	bgt.n	800051a <fsm_automatic_run+0xe6>
				TimeForLed1 = TimeGreen;
 800049a:	4b65      	ldr	r3, [pc, #404]	; (8000630 <fsm_automatic_run+0x1fc>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a62      	ldr	r2, [pc, #392]	; (8000628 <fsm_automatic_run+0x1f4>)
 80004a0:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_GREEN1;
 80004a2:	4b5f      	ldr	r3, [pc, #380]	; (8000620 <fsm_automatic_run+0x1ec>)
 80004a4:	2204      	movs	r2, #4
 80004a6:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004a8:	e037      	b.n	800051a <fsm_automatic_run+0xe6>
	case AUTO_GREEN1:
		OnLedGreen1();
 80004aa:	f001 f97b 	bl	80017a4 <OnLedGreen1>

		if(timer3_flag == 1){
 80004ae:	4b5f      	ldr	r3, [pc, #380]	; (800062c <fsm_automatic_run+0x1f8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d133      	bne.n	800051e <fsm_automatic_run+0xea>
			setTimer3(1000);
 80004b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ba:	f000 ff17 	bl	80012ec <setTimer3>
			TimeForLed1 --;
 80004be:	4b5a      	ldr	r3, [pc, #360]	; (8000628 <fsm_automatic_run+0x1f4>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	4a58      	ldr	r2, [pc, #352]	; (8000628 <fsm_automatic_run+0x1f4>)
 80004c6:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 80004c8:	4b57      	ldr	r3, [pc, #348]	; (8000628 <fsm_automatic_run+0x1f4>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dc26      	bgt.n	800051e <fsm_automatic_run+0xea>
				TimeForLed1 = TimeYellow;
 80004d0:	4b58      	ldr	r3, [pc, #352]	; (8000634 <fsm_automatic_run+0x200>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a54      	ldr	r2, [pc, #336]	; (8000628 <fsm_automatic_run+0x1f4>)
 80004d6:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_YELLOW1;
 80004d8:	4b51      	ldr	r3, [pc, #324]	; (8000620 <fsm_automatic_run+0x1ec>)
 80004da:	2203      	movs	r2, #3
 80004dc:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80004de:	e01e      	b.n	800051e <fsm_automatic_run+0xea>
	case AUTO_YELLOW1:
		OnLedYellow1();
 80004e0:	f001 f930 	bl	8001744 <OnLedYellow1>

		if(timer3_flag == 1){
 80004e4:	4b51      	ldr	r3, [pc, #324]	; (800062c <fsm_automatic_run+0x1f8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d11a      	bne.n	8000522 <fsm_automatic_run+0xee>
			setTimer3(1000);
 80004ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f0:	f000 fefc 	bl	80012ec <setTimer3>
			TimeForLed1 --;
 80004f4:	4b4c      	ldr	r3, [pc, #304]	; (8000628 <fsm_automatic_run+0x1f4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	4a4b      	ldr	r2, [pc, #300]	; (8000628 <fsm_automatic_run+0x1f4>)
 80004fc:	6013      	str	r3, [r2, #0]
			if(TimeForLed1 <= 0){
 80004fe:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <fsm_automatic_run+0x1f4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dc0d      	bgt.n	8000522 <fsm_automatic_run+0xee>
				TimeForLed1 = TimeRed;
 8000506:	4b47      	ldr	r3, [pc, #284]	; (8000624 <fsm_automatic_run+0x1f0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a47      	ldr	r2, [pc, #284]	; (8000628 <fsm_automatic_run+0x1f4>)
 800050c:	6013      	str	r3, [r2, #0]
				STATUS_LED1 = AUTO_RED1;
 800050e:	4b44      	ldr	r3, [pc, #272]	; (8000620 <fsm_automatic_run+0x1ec>)
 8000510:	2202      	movs	r2, #2
 8000512:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000514:	e005      	b.n	8000522 <fsm_automatic_run+0xee>
	default:
		break;
 8000516:	bf00      	nop
 8000518:	e004      	b.n	8000524 <fsm_automatic_run+0xf0>
		break;
 800051a:	bf00      	nop
 800051c:	e002      	b.n	8000524 <fsm_automatic_run+0xf0>
		break;
 800051e:	bf00      	nop
 8000520:	e000      	b.n	8000524 <fsm_automatic_run+0xf0>
		break;
 8000522:	bf00      	nop
	}
	//
	switch(STATUS_LED2){
 8000524:	4b44      	ldr	r3, [pc, #272]	; (8000638 <fsm_automatic_run+0x204>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	2b06      	cmp	r3, #6
 800052c:	d86f      	bhi.n	800060e <fsm_automatic_run+0x1da>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <fsm_automatic_run+0x100>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000551 	.word	0x08000551
 8000538:	0800060f 	.word	0x0800060f
 800053c:	0800060f 	.word	0x0800060f
 8000540:	0800060f 	.word	0x0800060f
 8000544:	0800056d 	.word	0x0800056d
 8000548:	080005d9 	.word	0x080005d9
 800054c:	080005a3 	.word	0x080005a3
	case INIT:
		OffAll2();
 8000550:	f001 f8b0 	bl	80016b4 <OffAll2>

		STATUS_LED2 = AUTO_GREEN2;
 8000554:	4b38      	ldr	r3, [pc, #224]	; (8000638 <fsm_automatic_run+0x204>)
 8000556:	2207      	movs	r2, #7
 8000558:	601a      	str	r2, [r3, #0]
		TimeForLed2 = TimeGreen;
 800055a:	4b35      	ldr	r3, [pc, #212]	; (8000630 <fsm_automatic_run+0x1fc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a37      	ldr	r2, [pc, #220]	; (800063c <fsm_automatic_run+0x208>)
 8000560:	6013      	str	r3, [r2, #0]
		setTimer4(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fedd 	bl	8001324 <setTimer4>
		break;
 800056a:	e057      	b.n	800061c <fsm_automatic_run+0x1e8>
	case AUTO_RED2:
		OnLedRed2();
 800056c:	f001 f8d2 	bl	8001714 <OnLedRed2>

		if(timer4_flag == 1){
 8000570:	4b33      	ldr	r3, [pc, #204]	; (8000640 <fsm_automatic_run+0x20c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d14c      	bne.n	8000612 <fsm_automatic_run+0x1de>
			setTimer4(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fed2 	bl	8001324 <setTimer4>
			TimeForLed2 --;
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <fsm_automatic_run+0x208>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a2d      	ldr	r2, [pc, #180]	; (800063c <fsm_automatic_run+0x208>)
 8000588:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <fsm_automatic_run+0x208>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	dc3f      	bgt.n	8000612 <fsm_automatic_run+0x1de>
				TimeForLed2 = TimeGreen;
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <fsm_automatic_run+0x1fc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a29      	ldr	r2, [pc, #164]	; (800063c <fsm_automatic_run+0x208>)
 8000598:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_GREEN2;
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <fsm_automatic_run+0x204>)
 800059c:	2207      	movs	r2, #7
 800059e:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80005a0:	e037      	b.n	8000612 <fsm_automatic_run+0x1de>
	case AUTO_GREEN2:
		OnLedGreen2();
 80005a2:	f001 f917 	bl	80017d4 <OnLedGreen2>

		if(timer4_flag == 1){
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <fsm_automatic_run+0x20c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d133      	bne.n	8000616 <fsm_automatic_run+0x1e2>
			setTimer4(1000);
 80005ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b2:	f000 feb7 	bl	8001324 <setTimer4>
			TimeForLed2 --;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <fsm_automatic_run+0x208>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a1f      	ldr	r2, [pc, #124]	; (800063c <fsm_automatic_run+0x208>)
 80005be:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <fsm_automatic_run+0x208>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc26      	bgt.n	8000616 <fsm_automatic_run+0x1e2>
				TimeForLed2 = TimeYellow;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <fsm_automatic_run+0x200>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <fsm_automatic_run+0x208>)
 80005ce:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_YELLOW2;
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <fsm_automatic_run+0x204>)
 80005d2:	2206      	movs	r2, #6
 80005d4:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 80005d6:	e01e      	b.n	8000616 <fsm_automatic_run+0x1e2>
	case AUTO_YELLOW2:
		OnLedYellow2();
 80005d8:	f001 f8cc 	bl	8001774 <OnLedYellow2>

		if(timer4_flag == 1){
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <fsm_automatic_run+0x20c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d11a      	bne.n	800061a <fsm_automatic_run+0x1e6>
			setTimer4(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e8:	f000 fe9c 	bl	8001324 <setTimer4>
			TimeForLed2 --;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <fsm_automatic_run+0x208>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <fsm_automatic_run+0x208>)
 80005f4:	6013      	str	r3, [r2, #0]
			if(TimeForLed2 <= 0){
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <fsm_automatic_run+0x208>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	dc0d      	bgt.n	800061a <fsm_automatic_run+0x1e6>
				TimeForLed2 = TimeRed;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <fsm_automatic_run+0x1f0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <fsm_automatic_run+0x208>)
 8000604:	6013      	str	r3, [r2, #0]
				STATUS_LED2 = AUTO_RED2;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <fsm_automatic_run+0x204>)
 8000608:	2205      	movs	r2, #5
 800060a:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 800060c:	e005      	b.n	800061a <fsm_automatic_run+0x1e6>
	default:
		break;
 800060e:	bf00      	nop
 8000610:	e004      	b.n	800061c <fsm_automatic_run+0x1e8>
		break;
 8000612:	bf00      	nop
 8000614:	e002      	b.n	800061c <fsm_automatic_run+0x1e8>
		break;
 8000616:	bf00      	nop
 8000618:	e000      	b.n	800061c <fsm_automatic_run+0x1e8>
		break;
 800061a:	bf00      	nop
	}
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000034 	.word	0x20000034
 8000624:	20000048 	.word	0x20000048
 8000628:	20000054 	.word	0x20000054
 800062c:	200000b8 	.word	0x200000b8
 8000630:	2000004c 	.word	0x2000004c
 8000634:	20000050 	.word	0x20000050
 8000638:	20000038 	.word	0x20000038
 800063c:	20000058 	.word	0x20000058
 8000640:	200000c0 	.word	0x200000c0

08000644 <BlinkyLed>:
 *  Created on: Oct 26, 2024
 *      Author: Admin
 */
#include "fsm_manual.h"

void BlinkyLed(int led){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	switch(STATUS_BLINKY){
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <BlinkyLed+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b2a      	cmp	r3, #42	; 0x2a
 8000652:	d03c      	beq.n	80006ce <BlinkyLed+0x8a>
 8000654:	2b2a      	cmp	r3, #42	; 0x2a
 8000656:	dc46      	bgt.n	80006e6 <BlinkyLed+0xa2>
 8000658:	2b29      	cmp	r3, #41	; 0x29
 800065a:	d02c      	beq.n	80006b6 <BlinkyLed+0x72>
 800065c:	2b29      	cmp	r3, #41	; 0x29
 800065e:	dc42      	bgt.n	80006e6 <BlinkyLed+0xa2>
 8000660:	2b01      	cmp	r3, #1
 8000662:	d002      	beq.n	800066a <BlinkyLed+0x26>
 8000664:	2b28      	cmp	r3, #40	; 0x28
 8000666:	d01a      	beq.n	800069e <BlinkyLed+0x5a>
			BlinkyLedGreen1();
			BlinkyLedGreen2();
		}
		break;
	default:
		break;
 8000668:	e03d      	b.n	80006e6 <BlinkyLed+0xa2>
		OffAll1();
 800066a:	f001 f80b 	bl	8001684 <OffAll1>
		OffAll2();
 800066e:	f001 f821 	bl	80016b4 <OffAll2>
		setTimer5(250);
 8000672:	20fa      	movs	r0, #250	; 0xfa
 8000674:	f000 fe72 	bl	800135c <setTimer5>
		if(led == RED) STATUS_BLINKY = RED;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b28      	cmp	r3, #40	; 0x28
 800067c:	d102      	bne.n	8000684 <BlinkyLed+0x40>
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <BlinkyLed+0xbc>)
 8000680:	2228      	movs	r2, #40	; 0x28
 8000682:	601a      	str	r2, [r3, #0]
		if(led == YELLOW) STATUS_BLINKY = YELLOW;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b29      	cmp	r3, #41	; 0x29
 8000688:	d102      	bne.n	8000690 <BlinkyLed+0x4c>
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <BlinkyLed+0xbc>)
 800068c:	2229      	movs	r2, #41	; 0x29
 800068e:	601a      	str	r2, [r3, #0]
		if(led == GREEN) STATUS_BLINKY = GREEN;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b2a      	cmp	r3, #42	; 0x2a
 8000694:	d129      	bne.n	80006ea <BlinkyLed+0xa6>
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <BlinkyLed+0xbc>)
 8000698:	222a      	movs	r2, #42	; 0x2a
 800069a:	601a      	str	r2, [r3, #0]
		break;
 800069c:	e025      	b.n	80006ea <BlinkyLed+0xa6>
		if(timer5_flag == 1){
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <BlinkyLed+0xc0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d123      	bne.n	80006ee <BlinkyLed+0xaa>
			setTimer5(250);
 80006a6:	20fa      	movs	r0, #250	; 0xfa
 80006a8:	f000 fe58 	bl	800135c <setTimer5>
			BlinkyLedRed1();
 80006ac:	f001 f8aa 	bl	8001804 <BlinkyLedRed1>
			BlinkyLedRed2();
 80006b0:	f001 f8b2 	bl	8001818 <BlinkyLedRed2>
		break;
 80006b4:	e01b      	b.n	80006ee <BlinkyLed+0xaa>
		if(timer5_flag == 1){
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <BlinkyLed+0xc0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d119      	bne.n	80006f2 <BlinkyLed+0xae>
			setTimer5(250);
 80006be:	20fa      	movs	r0, #250	; 0xfa
 80006c0:	f000 fe4c 	bl	800135c <setTimer5>
			BlinkyLedYellow1();
 80006c4:	f001 f8b4 	bl	8001830 <BlinkyLedYellow1>
			BlinkyLedYellow2();
 80006c8:	f001 f8ca 	bl	8001860 <BlinkyLedYellow2>
		break;
 80006cc:	e011      	b.n	80006f2 <BlinkyLed+0xae>
		if(timer5_flag == 1){
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <BlinkyLed+0xc0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d10f      	bne.n	80006f6 <BlinkyLed+0xb2>
			setTimer5(250);
 80006d6:	20fa      	movs	r0, #250	; 0xfa
 80006d8:	f000 fe40 	bl	800135c <setTimer5>
			BlinkyLedGreen1();
 80006dc:	f001 f8b4 	bl	8001848 <BlinkyLedGreen1>
			BlinkyLedGreen2();
 80006e0:	f001 f8ca 	bl	8001878 <BlinkyLedGreen2>
		break;
 80006e4:	e007      	b.n	80006f6 <BlinkyLed+0xb2>
		break;
 80006e6:	bf00      	nop
 80006e8:	e006      	b.n	80006f8 <BlinkyLed+0xb4>
		break;
 80006ea:	bf00      	nop
 80006ec:	e004      	b.n	80006f8 <BlinkyLed+0xb4>
		break;
 80006ee:	bf00      	nop
 80006f0:	e002      	b.n	80006f8 <BlinkyLed+0xb4>
		break;
 80006f2:	bf00      	nop
 80006f4:	e000      	b.n	80006f8 <BlinkyLed+0xb4>
		break;
 80006f6:	bf00      	nop
	}
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000044 	.word	0x20000044
 8000704:	200000c8 	.word	0x200000c8

08000708 <fsm_manual_run>:
void fsm_manual_run(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	switch(STATUS_MODE){
 800070c:	4b91      	ldr	r3, [pc, #580]	; (8000954 <fsm_manual_run+0x24c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3b01      	subs	r3, #1
 8000712:	2b18      	cmp	r3, #24
 8000714:	f200 8113 	bhi.w	800093e <fsm_manual_run+0x236>
 8000718:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <fsm_manual_run+0x18>)
 800071a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071e:	bf00      	nop
 8000720:	08000785 	.word	0x08000785
 8000724:	0800093f 	.word	0x0800093f
 8000728:	0800093f 	.word	0x0800093f
 800072c:	0800093f 	.word	0x0800093f
 8000730:	0800093f 	.word	0x0800093f
 8000734:	0800093f 	.word	0x0800093f
 8000738:	0800093f 	.word	0x0800093f
 800073c:	0800093f 	.word	0x0800093f
 8000740:	0800093f 	.word	0x0800093f
 8000744:	0800093f 	.word	0x0800093f
 8000748:	0800093f 	.word	0x0800093f
 800074c:	0800093f 	.word	0x0800093f
 8000750:	0800093f 	.word	0x0800093f
 8000754:	0800093f 	.word	0x0800093f
 8000758:	0800093f 	.word	0x0800093f
 800075c:	0800093f 	.word	0x0800093f
 8000760:	0800093f 	.word	0x0800093f
 8000764:	0800093f 	.word	0x0800093f
 8000768:	0800093f 	.word	0x0800093f
 800076c:	0800093f 	.word	0x0800093f
 8000770:	0800093f 	.word	0x0800093f
 8000774:	08000797 	.word	0x08000797
 8000778:	080007ef 	.word	0x080007ef
 800077c:	0800085d 	.word	0x0800085d
 8000780:	080008c9 	.word	0x080008c9
	case INIT:	// Trang thái thông thường
		updateBuffer(MODE1);
 8000784:	2016      	movs	r0, #22
 8000786:	f000 fb3d 	bl	8000e04 <updateBuffer>
		display_led7seg();
 800078a:	f000 fc05 	bl	8000f98 <display_led7seg>
		STATUS_MODE = MODE1;
 800078e:	4b71      	ldr	r3, [pc, #452]	; (8000954 <fsm_manual_run+0x24c>)
 8000790:	2216      	movs	r2, #22
 8000792:	601a      	str	r2, [r3, #0]
		break;
 8000794:	e0dc      	b.n	8000950 <fsm_manual_run+0x248>
	case MODE1:
		if(TimeRed != TimeYellow + TimeGreen){
 8000796:	4b70      	ldr	r3, [pc, #448]	; (8000958 <fsm_manual_run+0x250>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b70      	ldr	r3, [pc, #448]	; (800095c <fsm_manual_run+0x254>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	441a      	add	r2, r3
 80007a0:	4b6f      	ldr	r3, [pc, #444]	; (8000960 <fsm_manual_run+0x258>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d008      	beq.n	80007ba <fsm_manual_run+0xb2>
			TimeRed = 5;
 80007a8:	4b6d      	ldr	r3, [pc, #436]	; (8000960 <fsm_manual_run+0x258>)
 80007aa:	2205      	movs	r2, #5
 80007ac:	601a      	str	r2, [r3, #0]
			TimeYellow = 2;
 80007ae:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <fsm_manual_run+0x250>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	601a      	str	r2, [r3, #0]
			TimeGreen = 3;
 80007b4:	4b69      	ldr	r3, [pc, #420]	; (800095c <fsm_manual_run+0x254>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	601a      	str	r2, [r3, #0]
		}

		fsm_automatic_run();
 80007ba:	f7ff fe3b 	bl	8000434 <fsm_automatic_run>
		updateBuffer(STATUS_MODE);
 80007be:	4b65      	ldr	r3, [pc, #404]	; (8000954 <fsm_manual_run+0x24c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fb1e 	bl	8000e04 <updateBuffer>
		display_led7seg();
 80007c8:	f000 fbe6 	bl	8000f98 <display_led7seg>

		if(isButton1Pressed()){
 80007cc:	f7ff fcbe 	bl	800014c <isButton1Pressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 80b5 	beq.w	8000942 <fsm_manual_run+0x23a>
			STATUS_MODE = MODE2;
 80007d8:	4b5e      	ldr	r3, [pc, #376]	; (8000954 <fsm_manual_run+0x24c>)
 80007da:	2217      	movs	r2, #23
 80007dc:	601a      	str	r2, [r3, #0]
			value = TimeRed;
 80007de:	4b60      	ldr	r3, [pc, #384]	; (8000960 <fsm_manual_run+0x258>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a60      	ldr	r2, [pc, #384]	; (8000964 <fsm_manual_run+0x25c>)
 80007e4:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 80007e6:	4b60      	ldr	r3, [pc, #384]	; (8000968 <fsm_manual_run+0x260>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ec:	e0a9      	b.n	8000942 <fsm_manual_run+0x23a>
	case MODE2:
		BlinkyLed(RED);
 80007ee:	2028      	movs	r0, #40	; 0x28
 80007f0:	f7ff ff28 	bl	8000644 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 80007f4:	4b57      	ldr	r3, [pc, #348]	; (8000954 <fsm_manual_run+0x24c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fb03 	bl	8000e04 <updateBuffer>
		display_led7seg();
 80007fe:	f000 fbcb 	bl	8000f98 <display_led7seg>
		if(isButton1Pressed()){
 8000802:	f7ff fca3 	bl	800014c <isButton1Pressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00a      	beq.n	8000822 <fsm_manual_run+0x11a>
			STATUS_MODE = MODE3;
 800080c:	4b51      	ldr	r3, [pc, #324]	; (8000954 <fsm_manual_run+0x24c>)
 800080e:	2218      	movs	r2, #24
 8000810:	601a      	str	r2, [r3, #0]
			value = TimeYellow;
 8000812:	4b51      	ldr	r3, [pc, #324]	; (8000958 <fsm_manual_run+0x250>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a53      	ldr	r2, [pc, #332]	; (8000964 <fsm_manual_run+0x25c>)
 8000818:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 800081a:	4b53      	ldr	r3, [pc, #332]	; (8000968 <fsm_manual_run+0x260>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
		}
		else if(isButton3Pressed()){
			TimeRed = value;
			//STATUS_MODE = MODE1;
		}
		break;
 8000820:	e091      	b.n	8000946 <fsm_manual_run+0x23e>
		else if(isButton2Pressed()){
 8000822:	f7ff fca5 	bl	8000170 <isButton2Pressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00d      	beq.n	8000848 <fsm_manual_run+0x140>
			value++;
 800082c:	4b4d      	ldr	r3, [pc, #308]	; (8000964 <fsm_manual_run+0x25c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	4a4c      	ldr	r2, [pc, #304]	; (8000964 <fsm_manual_run+0x25c>)
 8000834:	6013      	str	r3, [r2, #0]
			if(value > 99){
 8000836:	4b4b      	ldr	r3, [pc, #300]	; (8000964 <fsm_manual_run+0x25c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b63      	cmp	r3, #99	; 0x63
 800083c:	f340 8083 	ble.w	8000946 <fsm_manual_run+0x23e>
				value = 1;
 8000840:	4b48      	ldr	r3, [pc, #288]	; (8000964 <fsm_manual_run+0x25c>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
		break;
 8000846:	e07e      	b.n	8000946 <fsm_manual_run+0x23e>
		else if(isButton3Pressed()){
 8000848:	f7ff fca4 	bl	8000194 <isButton3Pressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d079      	beq.n	8000946 <fsm_manual_run+0x23e>
			TimeRed = value;
 8000852:	4b44      	ldr	r3, [pc, #272]	; (8000964 <fsm_manual_run+0x25c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a42      	ldr	r2, [pc, #264]	; (8000960 <fsm_manual_run+0x258>)
 8000858:	6013      	str	r3, [r2, #0]
		break;
 800085a:	e074      	b.n	8000946 <fsm_manual_run+0x23e>
	case MODE3:
		BlinkyLed(YELLOW);
 800085c:	2029      	movs	r0, #41	; 0x29
 800085e:	f7ff fef1 	bl	8000644 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 8000862:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <fsm_manual_run+0x24c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 facc 	bl	8000e04 <updateBuffer>
		display_led7seg();
 800086c:	f000 fb94 	bl	8000f98 <display_led7seg>
		if(isButton1Pressed()){
 8000870:	f7ff fc6c 	bl	800014c <isButton1Pressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00a      	beq.n	8000890 <fsm_manual_run+0x188>
			STATUS_MODE = MODE4;
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <fsm_manual_run+0x24c>)
 800087c:	2219      	movs	r2, #25
 800087e:	601a      	str	r2, [r3, #0]
			value = TimeGreen;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <fsm_manual_run+0x254>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a37      	ldr	r2, [pc, #220]	; (8000964 <fsm_manual_run+0x25c>)
 8000886:	6013      	str	r3, [r2, #0]
			STATUS_BLINKY = INIT;
 8000888:	4b37      	ldr	r3, [pc, #220]	; (8000968 <fsm_manual_run+0x260>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
		}
		else if(isButton3Pressed()){
			TimeYellow = value;
			//STATUS_MODE = MODE1;
		}
		break;
 800088e:	e05c      	b.n	800094a <fsm_manual_run+0x242>
		else if(isButton2Pressed()){
 8000890:	f7ff fc6e 	bl	8000170 <isButton2Pressed>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00c      	beq.n	80008b4 <fsm_manual_run+0x1ac>
			value++;
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <fsm_manual_run+0x25c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	4a30      	ldr	r2, [pc, #192]	; (8000964 <fsm_manual_run+0x25c>)
 80008a2:	6013      	str	r3, [r2, #0]
			if(value > 99){
 80008a4:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <fsm_manual_run+0x25c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b63      	cmp	r3, #99	; 0x63
 80008aa:	dd4e      	ble.n	800094a <fsm_manual_run+0x242>
				value = 1;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <fsm_manual_run+0x25c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
		break;
 80008b2:	e04a      	b.n	800094a <fsm_manual_run+0x242>
		else if(isButton3Pressed()){
 80008b4:	f7ff fc6e 	bl	8000194 <isButton3Pressed>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d045      	beq.n	800094a <fsm_manual_run+0x242>
			TimeYellow = value;
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <fsm_manual_run+0x25c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a25      	ldr	r2, [pc, #148]	; (8000958 <fsm_manual_run+0x250>)
 80008c4:	6013      	str	r3, [r2, #0]
		break;
 80008c6:	e040      	b.n	800094a <fsm_manual_run+0x242>
	case MODE4:
		BlinkyLed(GREEN);
 80008c8:	202a      	movs	r0, #42	; 0x2a
 80008ca:	f7ff febb 	bl	8000644 <BlinkyLed>
		updateBuffer(STATUS_MODE);
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <fsm_manual_run+0x24c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fa96 	bl	8000e04 <updateBuffer>
		display_led7seg();
 80008d8:	f000 fb5e 	bl	8000f98 <display_led7seg>
		if(isButton1Pressed()){
 80008dc:	f7ff fc36 	bl	800014c <isButton1Pressed>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00f      	beq.n	8000906 <fsm_manual_run+0x1fe>
			STATUS_MODE = MODE1;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <fsm_manual_run+0x24c>)
 80008e8:	2216      	movs	r2, #22
 80008ea:	601a      	str	r2, [r3, #0]

			STATUS_BLINKY = INIT;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <fsm_manual_run+0x260>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]

			STATUS_LED1 = INIT;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <fsm_manual_run+0x264>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
			STATUS_LED2 = INIT;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <fsm_manual_run+0x268>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
			STATUS_7SEG = INIT;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <fsm_manual_run+0x26c>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
		}
		else if(isButton3Pressed()){
			TimeGreen = value;
			//STATUS_MODE = MODE1;
		}
		break;
 8000904:	e023      	b.n	800094e <fsm_manual_run+0x246>
		else if(isButton2Pressed()){
 8000906:	f7ff fc33 	bl	8000170 <isButton2Pressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00c      	beq.n	800092a <fsm_manual_run+0x222>
			value++;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <fsm_manual_run+0x25c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <fsm_manual_run+0x25c>)
 8000918:	6013      	str	r3, [r2, #0]
			if(value > 99){
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <fsm_manual_run+0x25c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b63      	cmp	r3, #99	; 0x63
 8000920:	dd15      	ble.n	800094e <fsm_manual_run+0x246>
				value = 1;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <fsm_manual_run+0x25c>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
		break;
 8000928:	e011      	b.n	800094e <fsm_manual_run+0x246>
		else if(isButton3Pressed()){
 800092a:	f7ff fc33 	bl	8000194 <isButton3Pressed>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00c      	beq.n	800094e <fsm_manual_run+0x246>
			TimeGreen = value;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <fsm_manual_run+0x25c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <fsm_manual_run+0x254>)
 800093a:	6013      	str	r3, [r2, #0]
		break;
 800093c:	e007      	b.n	800094e <fsm_manual_run+0x246>
	default:
		break;
 800093e:	bf00      	nop
 8000940:	e006      	b.n	8000950 <fsm_manual_run+0x248>
		break;
 8000942:	bf00      	nop
 8000944:	e004      	b.n	8000950 <fsm_manual_run+0x248>
		break;
 8000946:	bf00      	nop
 8000948:	e002      	b.n	8000950 <fsm_manual_run+0x248>
		break;
 800094a:	bf00      	nop
 800094c:	e000      	b.n	8000950 <fsm_manual_run+0x248>
		break;
 800094e:	bf00      	nop
	}
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000040 	.word	0x20000040
 8000958:	20000050 	.word	0x20000050
 800095c:	2000004c 	.word	0x2000004c
 8000960:	20000048 	.word	0x20000048
 8000964:	200000a0 	.word	0x200000a0
 8000968:	20000044 	.word	0x20000044
 800096c:	20000034 	.word	0x20000034
 8000970:	20000038 	.word	0x20000038
 8000974:	2000003c 	.word	0x2000003c

08000978 <display7SEG>:
 *      Author: Admin
 */

#include "led7_segment.h"

void display7SEG(int num){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b09      	cmp	r3, #9
 8000984:	f200 819e 	bhi.w	8000cc4 <display7SEG+0x34c>
 8000988:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <display7SEG+0x18>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009b9 	.word	0x080009b9
 8000994:	08000a07 	.word	0x08000a07
 8000998:	08000a55 	.word	0x08000a55
 800099c:	08000aa3 	.word	0x08000aa3
 80009a0:	08000af1 	.word	0x08000af1
 80009a4:	08000b3f 	.word	0x08000b3f
 80009a8:	08000b8d 	.word	0x08000b8d
 80009ac:	08000bdb 	.word	0x08000bdb
 80009b0:	08000c29 	.word	0x08000c29
 80009b4:	08000c77 	.word	0x08000c77
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	48c4      	ldr	r0, [pc, #784]	; (8000cd0 <display7SEG+0x358>)
 80009c0:	f001 fa8d 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ca:	48c1      	ldr	r0, [pc, #772]	; (8000cd0 <display7SEG+0x358>)
 80009cc:	f001 fa87 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d6:	48be      	ldr	r0, [pc, #760]	; (8000cd0 <display7SEG+0x358>)
 80009d8:	f001 fa81 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2101      	movs	r1, #1
 80009e0:	48bc      	ldr	r0, [pc, #752]	; (8000cd4 <display7SEG+0x35c>)
 80009e2:	f001 fa7c 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2102      	movs	r1, #2
 80009ea:	48ba      	ldr	r0, [pc, #744]	; (8000cd4 <display7SEG+0x35c>)
 80009ec:	f001 fa77 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2104      	movs	r1, #4
 80009f4:	48b7      	ldr	r0, [pc, #732]	; (8000cd4 <display7SEG+0x35c>)
 80009f6:	f001 fa72 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2108      	movs	r1, #8
 80009fe:	48b5      	ldr	r0, [pc, #724]	; (8000cd4 <display7SEG+0x35c>)
 8000a00:	f001 fa6d 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000a04:	e15f      	b.n	8000cc6 <display7SEG+0x34e>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	48b0      	ldr	r0, [pc, #704]	; (8000cd0 <display7SEG+0x358>)
 8000a0e:	f001 fa66 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a18:	48ad      	ldr	r0, [pc, #692]	; (8000cd0 <display7SEG+0x358>)
 8000a1a:	f001 fa60 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a24:	48aa      	ldr	r0, [pc, #680]	; (8000cd0 <display7SEG+0x358>)
 8000a26:	f001 fa5a 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	48a9      	ldr	r0, [pc, #676]	; (8000cd4 <display7SEG+0x35c>)
 8000a30:	f001 fa55 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2102      	movs	r1, #2
 8000a38:	48a6      	ldr	r0, [pc, #664]	; (8000cd4 <display7SEG+0x35c>)
 8000a3a:	f001 fa50 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2104      	movs	r1, #4
 8000a42:	48a4      	ldr	r0, [pc, #656]	; (8000cd4 <display7SEG+0x35c>)
 8000a44:	f001 fa4b 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2108      	movs	r1, #8
 8000a4c:	48a1      	ldr	r0, [pc, #644]	; (8000cd4 <display7SEG+0x35c>)
 8000a4e:	f001 fa46 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000a52:	e138      	b.n	8000cc6 <display7SEG+0x34e>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	489d      	ldr	r0, [pc, #628]	; (8000cd0 <display7SEG+0x358>)
 8000a5c:	f001 fa3f 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a66:	489a      	ldr	r0, [pc, #616]	; (8000cd0 <display7SEG+0x358>)
 8000a68:	f001 fa39 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	4897      	ldr	r0, [pc, #604]	; (8000cd0 <display7SEG+0x358>)
 8000a74:	f001 fa33 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4895      	ldr	r0, [pc, #596]	; (8000cd4 <display7SEG+0x35c>)
 8000a7e:	f001 fa2e 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	4893      	ldr	r0, [pc, #588]	; (8000cd4 <display7SEG+0x35c>)
 8000a88:	f001 fa29 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4890      	ldr	r0, [pc, #576]	; (8000cd4 <display7SEG+0x35c>)
 8000a92:	f001 fa24 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2108      	movs	r1, #8
 8000a9a:	488e      	ldr	r0, [pc, #568]	; (8000cd4 <display7SEG+0x35c>)
 8000a9c:	f001 fa1f 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000aa0:	e111      	b.n	8000cc6 <display7SEG+0x34e>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	4889      	ldr	r0, [pc, #548]	; (8000cd0 <display7SEG+0x358>)
 8000aaa:	f001 fa18 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	4886      	ldr	r0, [pc, #536]	; (8000cd0 <display7SEG+0x358>)
 8000ab6:	f001 fa12 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	4883      	ldr	r0, [pc, #524]	; (8000cd0 <display7SEG+0x358>)
 8000ac2:	f001 fa0c 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4882      	ldr	r0, [pc, #520]	; (8000cd4 <display7SEG+0x35c>)
 8000acc:	f001 fa07 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	487f      	ldr	r0, [pc, #508]	; (8000cd4 <display7SEG+0x35c>)
 8000ad6:	f001 fa02 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2104      	movs	r1, #4
 8000ade:	487d      	ldr	r0, [pc, #500]	; (8000cd4 <display7SEG+0x35c>)
 8000ae0:	f001 f9fd 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	487a      	ldr	r0, [pc, #488]	; (8000cd4 <display7SEG+0x35c>)
 8000aea:	f001 f9f8 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000aee:	e0ea      	b.n	8000cc6 <display7SEG+0x34e>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af6:	4876      	ldr	r0, [pc, #472]	; (8000cd0 <display7SEG+0x358>)
 8000af8:	f001 f9f1 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b02:	4873      	ldr	r0, [pc, #460]	; (8000cd0 <display7SEG+0x358>)
 8000b04:	f001 f9eb 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0e:	4870      	ldr	r0, [pc, #448]	; (8000cd0 <display7SEG+0x358>)
 8000b10:	f001 f9e5 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	486e      	ldr	r0, [pc, #440]	; (8000cd4 <display7SEG+0x35c>)
 8000b1a:	f001 f9e0 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2102      	movs	r1, #2
 8000b22:	486c      	ldr	r0, [pc, #432]	; (8000cd4 <display7SEG+0x35c>)
 8000b24:	f001 f9db 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4869      	ldr	r0, [pc, #420]	; (8000cd4 <display7SEG+0x35c>)
 8000b2e:	f001 f9d6 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	4867      	ldr	r0, [pc, #412]	; (8000cd4 <display7SEG+0x35c>)
 8000b38:	f001 f9d1 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000b3c:	e0c3      	b.n	8000cc6 <display7SEG+0x34e>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b44:	4862      	ldr	r0, [pc, #392]	; (8000cd0 <display7SEG+0x358>)
 8000b46:	f001 f9ca 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	485f      	ldr	r0, [pc, #380]	; (8000cd0 <display7SEG+0x358>)
 8000b52:	f001 f9c4 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	485c      	ldr	r0, [pc, #368]	; (8000cd0 <display7SEG+0x358>)
 8000b5e:	f001 f9be 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2101      	movs	r1, #1
 8000b66:	485b      	ldr	r0, [pc, #364]	; (8000cd4 <display7SEG+0x35c>)
 8000b68:	f001 f9b9 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4858      	ldr	r0, [pc, #352]	; (8000cd4 <display7SEG+0x35c>)
 8000b72:	f001 f9b4 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2104      	movs	r1, #4
 8000b7a:	4856      	ldr	r0, [pc, #344]	; (8000cd4 <display7SEG+0x35c>)
 8000b7c:	f001 f9af 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2108      	movs	r1, #8
 8000b84:	4853      	ldr	r0, [pc, #332]	; (8000cd4 <display7SEG+0x35c>)
 8000b86:	f001 f9aa 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000b8a:	e09c      	b.n	8000cc6 <display7SEG+0x34e>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	484f      	ldr	r0, [pc, #316]	; (8000cd0 <display7SEG+0x358>)
 8000b94:	f001 f9a3 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9e:	484c      	ldr	r0, [pc, #304]	; (8000cd0 <display7SEG+0x358>)
 8000ba0:	f001 f99d 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000baa:	4849      	ldr	r0, [pc, #292]	; (8000cd0 <display7SEG+0x358>)
 8000bac:	f001 f997 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4847      	ldr	r0, [pc, #284]	; (8000cd4 <display7SEG+0x35c>)
 8000bb6:	f001 f992 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4845      	ldr	r0, [pc, #276]	; (8000cd4 <display7SEG+0x35c>)
 8000bc0:	f001 f98d 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4842      	ldr	r0, [pc, #264]	; (8000cd4 <display7SEG+0x35c>)
 8000bca:	f001 f988 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2108      	movs	r1, #8
 8000bd2:	4840      	ldr	r0, [pc, #256]	; (8000cd4 <display7SEG+0x35c>)
 8000bd4:	f001 f983 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000bd8:	e075      	b.n	8000cc6 <display7SEG+0x34e>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be0:	483b      	ldr	r0, [pc, #236]	; (8000cd0 <display7SEG+0x358>)
 8000be2:	f001 f97c 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	4838      	ldr	r0, [pc, #224]	; (8000cd0 <display7SEG+0x358>)
 8000bee:	f001 f976 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf8:	4835      	ldr	r0, [pc, #212]	; (8000cd0 <display7SEG+0x358>)
 8000bfa:	f001 f970 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2101      	movs	r1, #1
 8000c02:	4834      	ldr	r0, [pc, #208]	; (8000cd4 <display7SEG+0x35c>)
 8000c04:	f001 f96b 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4831      	ldr	r0, [pc, #196]	; (8000cd4 <display7SEG+0x35c>)
 8000c0e:	f001 f966 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2104      	movs	r1, #4
 8000c16:	482f      	ldr	r0, [pc, #188]	; (8000cd4 <display7SEG+0x35c>)
 8000c18:	f001 f961 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	482c      	ldr	r0, [pc, #176]	; (8000cd4 <display7SEG+0x35c>)
 8000c22:	f001 f95c 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000c26:	e04e      	b.n	8000cc6 <display7SEG+0x34e>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	4828      	ldr	r0, [pc, #160]	; (8000cd0 <display7SEG+0x358>)
 8000c30:	f001 f955 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3a:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <display7SEG+0x358>)
 8000c3c:	f001 f94f 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c46:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <display7SEG+0x358>)
 8000c48:	f001 f949 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4820      	ldr	r0, [pc, #128]	; (8000cd4 <display7SEG+0x35c>)
 8000c52:	f001 f944 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2102      	movs	r1, #2
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <display7SEG+0x35c>)
 8000c5c:	f001 f93f 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2104      	movs	r1, #4
 8000c64:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <display7SEG+0x35c>)
 8000c66:	f001 f93a 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <display7SEG+0x35c>)
 8000c70:	f001 f935 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000c74:	e027      	b.n	8000cc6 <display7SEG+0x34e>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <display7SEG+0x358>)
 8000c7e:	f001 f92e 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <display7SEG+0x358>)
 8000c8a:	f001 f928 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c94:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <display7SEG+0x358>)
 8000c96:	f001 f922 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <display7SEG+0x35c>)
 8000ca0:	f001 f91d 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <display7SEG+0x35c>)
 8000caa:	f001 f918 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <display7SEG+0x35c>)
 8000cb4:	f001 f913 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <display7SEG+0x35c>)
 8000cbe:	f001 f90e 	bl	8001ede <HAL_GPIO_WritePin>
		break;
 8000cc2:	e000      	b.n	8000cc6 <display7SEG+0x34e>
	default:
		break;
 8000cc4:	bf00      	nop
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <update7SEG>:


void update7SEG(int index){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	f200 8084 	bhi.w	8000df0 <update7SEG+0x118>
 8000ce8:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <update7SEG+0x18>)
 8000cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cee:	bf00      	nop
 8000cf0:	08000d01 	.word	0x08000d01
 8000cf4:	08000d3d 	.word	0x08000d3d
 8000cf8:	08000d79 	.word	0x08000d79
 8000cfc:	08000db5 	.word	0x08000db5
	switch (index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <update7SEG+0x124>)
 8000d08:	f001 f8e9 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d12:	483a      	ldr	r0, [pc, #232]	; (8000dfc <update7SEG+0x124>)
 8000d14:	f001 f8e3 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1e:	4837      	ldr	r0, [pc, #220]	; (8000dfc <update7SEG+0x124>)
 8000d20:	f001 f8dd 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2a:	4834      	ldr	r0, [pc, #208]	; (8000dfc <update7SEG+0x124>)
 8000d2c:	f001 f8d7 	bl	8001ede <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[0]);
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <update7SEG+0x128>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe1f 	bl	8000978 <display7SEG>
		break;
 8000d3a:	e05a      	b.n	8000df2 <update7SEG+0x11a>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d42:	482e      	ldr	r0, [pc, #184]	; (8000dfc <update7SEG+0x124>)
 8000d44:	f001 f8cb 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	482b      	ldr	r0, [pc, #172]	; (8000dfc <update7SEG+0x124>)
 8000d50:	f001 f8c5 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5a:	4828      	ldr	r0, [pc, #160]	; (8000dfc <update7SEG+0x124>)
 8000d5c:	f001 f8bf 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d66:	4825      	ldr	r0, [pc, #148]	; (8000dfc <update7SEG+0x124>)
 8000d68:	f001 f8b9 	bl	8001ede <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[1]);
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <update7SEG+0x128>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe01 	bl	8000978 <display7SEG>
		break;
 8000d76:	e03c      	b.n	8000df2 <update7SEG+0x11a>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	481f      	ldr	r0, [pc, #124]	; (8000dfc <update7SEG+0x124>)
 8000d80:	f001 f8ad 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	481c      	ldr	r0, [pc, #112]	; (8000dfc <update7SEG+0x124>)
 8000d8c:	f001 f8a7 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d96:	4819      	ldr	r0, [pc, #100]	; (8000dfc <update7SEG+0x124>)
 8000d98:	f001 f8a1 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da2:	4816      	ldr	r0, [pc, #88]	; (8000dfc <update7SEG+0x124>)
 8000da4:	f001 f89b 	bl	8001ede <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[2]);
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <update7SEG+0x128>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fde3 	bl	8000978 <display7SEG>
		break;
 8000db2:	e01e      	b.n	8000df2 <update7SEG+0x11a>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <update7SEG+0x124>)
 8000dbc:	f001 f88f 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <update7SEG+0x124>)
 8000dc8:	f001 f889 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd2:	480a      	ldr	r0, [pc, #40]	; (8000dfc <update7SEG+0x124>)
 8000dd4:	f001 f883 	bl	8001ede <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <update7SEG+0x124>)
 8000de0:	f001 f87d 	bl	8001ede <HAL_GPIO_WritePin>
		display7SEG(buffer_7seg[3]);
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <update7SEG+0x128>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fdc5 	bl	8000978 <display7SEG>
		break;
 8000dee:	e000      	b.n	8000df2 <update7SEG+0x11a>
	default:
		break;
 8000df0:	bf00      	nop
	}
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	20000090 	.word	0x20000090

08000e04 <updateBuffer>:

void updateBuffer(int mode){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b16      	subs	r3, #22
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	f200 80b0 	bhi.w	8000f76 <updateBuffer+0x172>
 8000e16:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <updateBuffer+0x18>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e31 	.word	0x08000e31
 8000e20:	08000e97 	.word	0x08000e97
 8000e24:	08000ed7 	.word	0x08000ed7
 8000e28:	08000f17 	.word	0x08000f17
 8000e2c:	08000f57 	.word	0x08000f57
	switch(mode){
	case MODE1:
		buffer_7seg[0] = TimeForLed1 / 10;
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <updateBuffer+0x180>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a54      	ldr	r2, [pc, #336]	; (8000f88 <updateBuffer+0x184>)
 8000e36:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3a:	1092      	asrs	r2, r2, #2
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	4a52      	ldr	r2, [pc, #328]	; (8000f8c <updateBuffer+0x188>)
 8000e42:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = TimeForLed1 % 10;
 8000e44:	4b4f      	ldr	r3, [pc, #316]	; (8000f84 <updateBuffer+0x180>)
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <updateBuffer+0x184>)
 8000e4a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e4e:	109a      	asrs	r2, r3, #2
 8000e50:	17cb      	asrs	r3, r1, #31
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	1aca      	subs	r2, r1, r3
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <updateBuffer+0x188>)
 8000e60:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = TimeForLed2 / 10;
 8000e62:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <updateBuffer+0x18c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <updateBuffer+0x184>)
 8000e68:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6c:	1092      	asrs	r2, r2, #2
 8000e6e:	17db      	asrs	r3, r3, #31
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	4a46      	ldr	r2, [pc, #280]	; (8000f8c <updateBuffer+0x188>)
 8000e74:	6093      	str	r3, [r2, #8]
		buffer_7seg[3] = TimeForLed2 % 10;
 8000e76:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <updateBuffer+0x18c>)
 8000e78:	6819      	ldr	r1, [r3, #0]
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <updateBuffer+0x184>)
 8000e7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e80:	109a      	asrs	r2, r3, #2
 8000e82:	17cb      	asrs	r3, r1, #31
 8000e84:	1ad2      	subs	r2, r2, r3
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	1aca      	subs	r2, r1, r3
 8000e90:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <updateBuffer+0x188>)
 8000e92:	60da      	str	r2, [r3, #12]
		break;
 8000e94:	e070      	b.n	8000f78 <updateBuffer+0x174>
	case MODE2:
		buffer_7seg[0] = value / 10;
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <updateBuffer+0x190>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a3b      	ldr	r2, [pc, #236]	; (8000f88 <updateBuffer+0x184>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1092      	asrs	r2, r2, #2
 8000ea2:	17db      	asrs	r3, r3, #31
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <updateBuffer+0x188>)
 8000ea8:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <updateBuffer+0x190>)
 8000eac:	6819      	ldr	r1, [r3, #0]
 8000eae:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <updateBuffer+0x184>)
 8000eb0:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb4:	109a      	asrs	r2, r3, #2
 8000eb6:	17cb      	asrs	r3, r1, #31
 8000eb8:	1ad2      	subs	r2, r2, r3
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	1aca      	subs	r2, r1, r3
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <updateBuffer+0x188>)
 8000ec6:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <updateBuffer+0x188>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 2;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <updateBuffer+0x188>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	60da      	str	r2, [r3, #12]
		break;
 8000ed4:	e050      	b.n	8000f78 <updateBuffer+0x174>
	case MODE3:
		buffer_7seg[0] = value / 10;
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <updateBuffer+0x190>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a2b      	ldr	r2, [pc, #172]	; (8000f88 <updateBuffer+0x184>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	1092      	asrs	r2, r2, #2
 8000ee2:	17db      	asrs	r3, r3, #31
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <updateBuffer+0x188>)
 8000ee8:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <updateBuffer+0x190>)
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <updateBuffer+0x184>)
 8000ef0:	fb83 2301 	smull	r2, r3, r3, r1
 8000ef4:	109a      	asrs	r2, r3, #2
 8000ef6:	17cb      	asrs	r3, r1, #31
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	1aca      	subs	r2, r1, r3
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <updateBuffer+0x188>)
 8000f06:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <updateBuffer+0x188>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 3;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <updateBuffer+0x188>)
 8000f10:	2203      	movs	r2, #3
 8000f12:	60da      	str	r2, [r3, #12]
		break;
 8000f14:	e030      	b.n	8000f78 <updateBuffer+0x174>
	case MODE4:
		buffer_7seg[0] = value / 10;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <updateBuffer+0x190>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <updateBuffer+0x184>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	1092      	asrs	r2, r2, #2
 8000f22:	17db      	asrs	r3, r3, #31
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <updateBuffer+0x188>)
 8000f28:	6013      	str	r3, [r2, #0]
		buffer_7seg[1] = value % 10;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <updateBuffer+0x190>)
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <updateBuffer+0x184>)
 8000f30:	fb83 2301 	smull	r2, r3, r3, r1
 8000f34:	109a      	asrs	r2, r3, #2
 8000f36:	17cb      	asrs	r3, r1, #31
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	1aca      	subs	r2, r1, r3
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <updateBuffer+0x188>)
 8000f46:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = 0;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <updateBuffer+0x188>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = 4;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <updateBuffer+0x188>)
 8000f50:	2204      	movs	r2, #4
 8000f52:	60da      	str	r2, [r3, #12]
		break;
 8000f54:	e010      	b.n	8000f78 <updateBuffer+0x174>
	case FAIL:
		buffer_7seg[0] = -1;
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <updateBuffer+0x188>)
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	601a      	str	r2, [r3, #0]
		buffer_7seg[1] = -1;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <updateBuffer+0x188>)
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	605a      	str	r2, [r3, #4]
		buffer_7seg[2] = -1;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <updateBuffer+0x188>)
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	609a      	str	r2, [r3, #8]
		buffer_7seg[3] = -1;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <updateBuffer+0x188>)
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	60da      	str	r2, [r3, #12]
	default:
		break;
 8000f76:	bf00      	nop
	}
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000054 	.word	0x20000054
 8000f88:	66666667 	.word	0x66666667
 8000f8c:	20000090 	.word	0x20000090
 8000f90:	20000058 	.word	0x20000058
 8000f94:	200000a0 	.word	0x200000a0

08000f98 <display_led7seg>:
// hiển thị led 7 đoạn với T = 0.25s
void display_led7seg(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	switch(STATUS_7SEG){
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <display_led7seg+0x130>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	2b20      	cmp	r3, #32
 8000fa4:	f200 8085 	bhi.w	80010b2 <display_led7seg+0x11a>
 8000fa8:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <display_led7seg+0x18>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08001035 	.word	0x08001035
 8000fb4:	080010b3 	.word	0x080010b3
 8000fb8:	080010b3 	.word	0x080010b3
 8000fbc:	080010b3 	.word	0x080010b3
 8000fc0:	080010b3 	.word	0x080010b3
 8000fc4:	080010b3 	.word	0x080010b3
 8000fc8:	080010b3 	.word	0x080010b3
 8000fcc:	080010b3 	.word	0x080010b3
 8000fd0:	080010b3 	.word	0x080010b3
 8000fd4:	080010b3 	.word	0x080010b3
 8000fd8:	080010b3 	.word	0x080010b3
 8000fdc:	080010b3 	.word	0x080010b3
 8000fe0:	080010b3 	.word	0x080010b3
 8000fe4:	080010b3 	.word	0x080010b3
 8000fe8:	080010b3 	.word	0x080010b3
 8000fec:	080010b3 	.word	0x080010b3
 8000ff0:	080010b3 	.word	0x080010b3
 8000ff4:	080010b3 	.word	0x080010b3
 8000ff8:	080010b3 	.word	0x080010b3
 8000ffc:	080010b3 	.word	0x080010b3
 8001000:	080010b3 	.word	0x080010b3
 8001004:	080010b3 	.word	0x080010b3
 8001008:	080010b3 	.word	0x080010b3
 800100c:	080010b3 	.word	0x080010b3
 8001010:	080010b3 	.word	0x080010b3
 8001014:	080010b3 	.word	0x080010b3
 8001018:	080010b3 	.word	0x080010b3
 800101c:	080010b3 	.word	0x080010b3
 8001020:	080010b3 	.word	0x080010b3
 8001024:	08001043 	.word	0x08001043
 8001028:	0800105f 	.word	0x0800105f
 800102c:	0800107b 	.word	0x0800107b
 8001030:	08001097 	.word	0x08001097
	case INIT:
		STATUS_7SEG = LED7SEG1;
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <display_led7seg+0x130>)
 8001036:	221e      	movs	r2, #30
 8001038:	601a      	str	r2, [r3, #0]
		setTimer6(250);
 800103a:	20fa      	movs	r0, #250	; 0xfa
 800103c:	f000 f9aa 	bl	8001394 <setTimer6>
		break;
 8001040:	e040      	b.n	80010c4 <display_led7seg+0x12c>
	case LED7SEG1:
		update7SEG(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fe48 	bl	8000cd8 <update7SEG>
		if(timer6_flag == 1){
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <display_led7seg+0x134>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d132      	bne.n	80010b6 <display_led7seg+0x11e>
			setTimer6(250);
 8001050:	20fa      	movs	r0, #250	; 0xfa
 8001052:	f000 f99f 	bl	8001394 <setTimer6>
			STATUS_7SEG = LED7SEG2;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <display_led7seg+0x130>)
 8001058:	221f      	movs	r2, #31
 800105a:	601a      	str	r2, [r3, #0]
		}
		break;
 800105c:	e02b      	b.n	80010b6 <display_led7seg+0x11e>
	case LED7SEG2:
		update7SEG(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f7ff fe3a 	bl	8000cd8 <update7SEG>
		if(timer6_flag == 1){
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <display_led7seg+0x134>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d126      	bne.n	80010ba <display_led7seg+0x122>
			setTimer6(250);
 800106c:	20fa      	movs	r0, #250	; 0xfa
 800106e:	f000 f991 	bl	8001394 <setTimer6>
			STATUS_7SEG = LED7SEG3;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <display_led7seg+0x130>)
 8001074:	2220      	movs	r2, #32
 8001076:	601a      	str	r2, [r3, #0]
		}
		break;
 8001078:	e01f      	b.n	80010ba <display_led7seg+0x122>
	case LED7SEG3:
		update7SEG(2);
 800107a:	2002      	movs	r0, #2
 800107c:	f7ff fe2c 	bl	8000cd8 <update7SEG>
		if(timer6_flag == 1){
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <display_led7seg+0x134>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d11a      	bne.n	80010be <display_led7seg+0x126>
			setTimer6(250);
 8001088:	20fa      	movs	r0, #250	; 0xfa
 800108a:	f000 f983 	bl	8001394 <setTimer6>
			STATUS_7SEG = LED7SEG4;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <display_led7seg+0x130>)
 8001090:	2221      	movs	r2, #33	; 0x21
 8001092:	601a      	str	r2, [r3, #0]
		}
		break;
 8001094:	e013      	b.n	80010be <display_led7seg+0x126>
	case LED7SEG4:
		update7SEG(3);
 8001096:	2003      	movs	r0, #3
 8001098:	f7ff fe1e 	bl	8000cd8 <update7SEG>
		if(timer6_flag == 1){
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <display_led7seg+0x134>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10e      	bne.n	80010c2 <display_led7seg+0x12a>
			setTimer6(250);
 80010a4:	20fa      	movs	r0, #250	; 0xfa
 80010a6:	f000 f975 	bl	8001394 <setTimer6>
			STATUS_7SEG = LED7SEG1;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <display_led7seg+0x130>)
 80010ac:	221e      	movs	r2, #30
 80010ae:	601a      	str	r2, [r3, #0]
		}
		break;
 80010b0:	e007      	b.n	80010c2 <display_led7seg+0x12a>
	default:
		break;
 80010b2:	bf00      	nop
 80010b4:	e006      	b.n	80010c4 <display_led7seg+0x12c>
		break;
 80010b6:	bf00      	nop
 80010b8:	e004      	b.n	80010c4 <display_led7seg+0x12c>
		break;
 80010ba:	bf00      	nop
 80010bc:	e002      	b.n	80010c4 <display_led7seg+0x12c>
		break;
 80010be:	bf00      	nop
 80010c0:	e000      	b.n	80010c4 <display_led7seg+0x12c>
		break;
 80010c2:	bf00      	nop
	}
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000003c 	.word	0x2000003c
 80010cc:	200000d0 	.word	0x200000d0

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f000 fc02 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f80c 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f000 f892 	bl	8001204 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010e0:	f000 f844 	bl	800116c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <main+0x20>)
 80010e6:	f001 fb57 	bl	8002798 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //fsm_automatic_run();
	fsm_manual_run();
 80010ea:	f7ff fb0d 	bl	8000708 <fsm_manual_run>
 80010ee:	e7fc      	b.n	80010ea <main+0x1a>
 80010f0:	200000f4 	.word	0x200000f4

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b090      	sub	sp, #64	; 0x40
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	2228      	movs	r2, #40	; 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f001 fef8 	bl	8002ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111a:	2301      	movs	r3, #1
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	4618      	mov	r0, r3
 800112c:	f000 ff08 	bl	8001f40 <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001136:	f000 f8d3 	bl	80012e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 f974 	bl	8002440 <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800115e:	f000 f8bf 	bl	80012e0 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3740      	adds	r7, #64	; 0x40
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM2_Init+0x94>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_TIM2_Init+0x94>)
 8001192:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001196:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_TIM2_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM2_Init+0x94>)
 80011a0:	2209      	movs	r2, #9
 80011a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_TIM2_Init+0x94>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b0:	4813      	ldr	r0, [pc, #76]	; (8001200 <MX_TIM2_Init+0x94>)
 80011b2:	f001 faa1 	bl	80026f8 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011bc:	f000 f890 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ce:	f001 fc1f 	bl	8002a10 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d8:	f000 f882 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM2_Init+0x94>)
 80011ea:	f001 fdf7 	bl	8002ddc <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f000 f874 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000f4 	.word	0x200000f4

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <MX_GPIO_Init+0xb8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a27      	ldr	r2, [pc, #156]	; (80012bc <MX_GPIO_Init+0xb8>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <MX_GPIO_Init+0xb8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MX_GPIO_Init+0xb8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <MX_GPIO_Init+0xb8>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MX_GPIO_Init+0xb8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 8001248:	2200      	movs	r2, #0
 800124a:	f64f 718e 	movw	r1, #65422	; 0xff8e
 800124e:	481c      	ldr	r0, [pc, #112]	; (80012c0 <MX_GPIO_Init+0xbc>)
 8001250:	f000 fe45 	bl	8001ede <HAL_GPIO_WritePin>
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 8001254:	2200      	movs	r2, #0
 8001256:	f24f 010f 	movw	r1, #61455	; 0xf00f
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <MX_GPIO_Init+0xc0>)
 800125c:	f000 fe3f 	bl	8001ede <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin RED1_Pin
                           YELLOW1_Pin GREEN1_Pin RED2_Pin YELLOW2_Pin
                           GREEN2_Pin SEG_0_Pin SEG_1_Pin SEG_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|RED1_Pin
 8001260:	f64f 738e 	movw	r3, #65422	; 0xff8e
 8001264:	60bb      	str	r3, [r7, #8]
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2302      	movs	r3, #2
 8001270:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4619      	mov	r1, r3
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <MX_GPIO_Init+0xbc>)
 800127a:	f000 fc9f 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800127e:	2370      	movs	r3, #112	; 0x70
 8001280:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <MX_GPIO_Init+0xbc>)
 8001292:	f000 fc93 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_3_Pin SEG_4_Pin SEG_5_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|EN0_Pin
 8001296:	f24f 030f 	movw	r3, #61455	; 0xf00f
 800129a:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2302      	movs	r3, #2
 80012a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_GPIO_Init+0xc0>)
 80012b0:	f000 fc84 	bl	8001bbc <HAL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40010c00 	.word	0x40010c00

080012c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	timerRun();
 80012d0:	f000 f87c 	bl	80013cc <timerRun>
	getKeyInput();
 80012d4:	f7fe ff70 	bl	80001b8 <getKeyInput>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <setTimer3>:
	timer2_flag = 0;
}

int timer3_counter = 0;
int timer3_flag = 0;
void setTimer3(int duration){
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TICK;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <setTimer3+0x2c>)
 80012f8:	fb82 1203 	smull	r1, r2, r2, r3
 80012fc:	1092      	asrs	r2, r2, #2
 80012fe:	17db      	asrs	r3, r3, #31
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <setTimer3+0x30>)
 8001304:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <setTimer3+0x34>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	66666667 	.word	0x66666667
 800131c:	200000b4 	.word	0x200000b4
 8001320:	200000b8 	.word	0x200000b8

08001324 <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;
void setTimer4(int duration){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TICK;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <setTimer4+0x2c>)
 8001330:	fb82 1203 	smull	r1, r2, r2, r3
 8001334:	1092      	asrs	r2, r2, #2
 8001336:	17db      	asrs	r3, r3, #31
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <setTimer4+0x30>)
 800133c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <setTimer4+0x34>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	66666667 	.word	0x66666667
 8001354:	200000bc 	.word	0x200000bc
 8001358:	200000c0 	.word	0x200000c0

0800135c <setTimer5>:

int timer5_counter = 0;
int timer5_flag = 0;
void setTimer5(int duration){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TICK;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <setTimer5+0x2c>)
 8001368:	fb82 1203 	smull	r1, r2, r2, r3
 800136c:	1092      	asrs	r2, r2, #2
 800136e:	17db      	asrs	r3, r3, #31
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4a06      	ldr	r2, [pc, #24]	; (800138c <setTimer5+0x30>)
 8001374:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <setTimer5+0x34>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	66666667 	.word	0x66666667
 800138c:	200000c4 	.word	0x200000c4
 8001390:	200000c8 	.word	0x200000c8

08001394 <setTimer6>:

int timer6_counter = 0;
int timer6_flag = 0;
void setTimer6(int duration){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TICK;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <setTimer6+0x2c>)
 80013a0:	fb82 1203 	smull	r1, r2, r2, r3
 80013a4:	1092      	asrs	r2, r2, #2
 80013a6:	17db      	asrs	r3, r3, #31
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <setTimer6+0x30>)
 80013ac:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <setTimer6+0x34>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	66666667 	.word	0x66666667
 80013c4:	200000cc 	.word	0x200000cc
 80013c8:	200000d0 	.word	0x200000d0

080013cc <timerRun>:
int timer10_flag = 0;
void setTimer10(int duration){
	timer10_counter = duration / TICK;
	timer10_flag = 0;
}
void timerRun(){
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80013d0:	4b51      	ldr	r3, [pc, #324]	; (8001518 <timerRun+0x14c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dd0b      	ble.n	80013f0 <timerRun+0x24>
		timer1_counter --;
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <timerRun+0x14c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <timerRun+0x14c>)
 80013e0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <timerRun+0x14c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	dc02      	bgt.n	80013f0 <timerRun+0x24>
			timer1_flag = 1;
 80013ea:	4b4c      	ldr	r3, [pc, #304]	; (800151c <timerRun+0x150>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <timerRun+0x154>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	dd0b      	ble.n	8001410 <timerRun+0x44>
		timer2_counter --;
 80013f8:	4b49      	ldr	r3, [pc, #292]	; (8001520 <timerRun+0x154>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a48      	ldr	r2, [pc, #288]	; (8001520 <timerRun+0x154>)
 8001400:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <timerRun+0x154>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	dc02      	bgt.n	8001410 <timerRun+0x44>
			timer2_flag = 1;
 800140a:	4b46      	ldr	r3, [pc, #280]	; (8001524 <timerRun+0x158>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001410:	4b45      	ldr	r3, [pc, #276]	; (8001528 <timerRun+0x15c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	dd0b      	ble.n	8001430 <timerRun+0x64>
		timer3_counter --;
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <timerRun+0x15c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	4a42      	ldr	r2, [pc, #264]	; (8001528 <timerRun+0x15c>)
 8001420:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <timerRun+0x15c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	dc02      	bgt.n	8001430 <timerRun+0x64>
			timer3_flag = 1;
 800142a:	4b40      	ldr	r3, [pc, #256]	; (800152c <timerRun+0x160>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <timerRun+0x164>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	dd0b      	ble.n	8001450 <timerRun+0x84>
		timer4_counter --;
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <timerRun+0x164>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3b01      	subs	r3, #1
 800143e:	4a3c      	ldr	r2, [pc, #240]	; (8001530 <timerRun+0x164>)
 8001440:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <timerRun+0x164>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dc02      	bgt.n	8001450 <timerRun+0x84>
			timer4_flag = 1;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <timerRun+0x168>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <timerRun+0x16c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	dd0b      	ble.n	8001470 <timerRun+0xa4>
		timer5_counter --;
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <timerRun+0x16c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a36      	ldr	r2, [pc, #216]	; (8001538 <timerRun+0x16c>)
 8001460:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8001462:	4b35      	ldr	r3, [pc, #212]	; (8001538 <timerRun+0x16c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	dc02      	bgt.n	8001470 <timerRun+0xa4>
			timer5_flag = 1;
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <timerRun+0x170>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8001470:	4b33      	ldr	r3, [pc, #204]	; (8001540 <timerRun+0x174>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	dd0b      	ble.n	8001490 <timerRun+0xc4>
		timer6_counter --;
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <timerRun+0x174>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	4a30      	ldr	r2, [pc, #192]	; (8001540 <timerRun+0x174>)
 8001480:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <timerRun+0x174>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	dc02      	bgt.n	8001490 <timerRun+0xc4>
			timer6_flag = 1;
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <timerRun+0x178>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0){
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <timerRun+0x17c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dd0b      	ble.n	80014b0 <timerRun+0xe4>
		timer7_counter --;
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <timerRun+0x17c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <timerRun+0x17c>)
 80014a0:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0){
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <timerRun+0x17c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc02      	bgt.n	80014b0 <timerRun+0xe4>
			timer7_flag = 1;
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <timerRun+0x180>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0){
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <timerRun+0x184>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd0b      	ble.n	80014d0 <timerRun+0x104>
		timer8_counter --;
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <timerRun+0x184>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a24      	ldr	r2, [pc, #144]	; (8001550 <timerRun+0x184>)
 80014c0:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0){
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <timerRun+0x184>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc02      	bgt.n	80014d0 <timerRun+0x104>
			timer8_flag = 1;
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <timerRun+0x188>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer9_counter > 0){
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <timerRun+0x18c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd0b      	ble.n	80014f0 <timerRun+0x124>
		timer9_counter --;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <timerRun+0x18c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <timerRun+0x18c>)
 80014e0:	6013      	str	r3, [r2, #0]
		if(timer9_counter <= 0){
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <timerRun+0x18c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dc02      	bgt.n	80014f0 <timerRun+0x124>
			timer9_flag = 1;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <timerRun+0x190>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer10_counter > 0){
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <timerRun+0x194>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dd0b      	ble.n	8001510 <timerRun+0x144>
		timer10_counter --;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <timerRun+0x194>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <timerRun+0x194>)
 8001500:	6013      	str	r3, [r2, #0]
		if(timer10_counter <= 0){
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <timerRun+0x194>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	dc02      	bgt.n	8001510 <timerRun+0x144>
			timer10_flag = 1;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <timerRun+0x198>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	200000a4 	.word	0x200000a4
 800151c:	200000a8 	.word	0x200000a8
 8001520:	200000ac 	.word	0x200000ac
 8001524:	200000b0 	.word	0x200000b0
 8001528:	200000b4 	.word	0x200000b4
 800152c:	200000b8 	.word	0x200000b8
 8001530:	200000bc 	.word	0x200000bc
 8001534:	200000c0 	.word	0x200000c0
 8001538:	200000c4 	.word	0x200000c4
 800153c:	200000c8 	.word	0x200000c8
 8001540:	200000cc 	.word	0x200000cc
 8001544:	200000d0 	.word	0x200000d0
 8001548:	200000d4 	.word	0x200000d4
 800154c:	200000d8 	.word	0x200000d8
 8001550:	200000dc 	.word	0x200000dc
 8001554:	200000e0 	.word	0x200000e0
 8001558:	200000e4 	.word	0x200000e4
 800155c:	200000e8 	.word	0x200000e8
 8001560:	200000ec 	.word	0x200000ec
 8001564:	200000f0 	.word	0x200000f0

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_MspInit+0x5c>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_MspInit+0x5c>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_MspInit+0x5c>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_MspInit+0x5c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_MspInit+0x5c>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_MspInit+0x5c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_MspInit+0x60>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <HAL_MspInit+0x60>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000

080015cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015dc:	d113      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	201c      	movs	r0, #28
 80015fc:	f000 faa7 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001600:	201c      	movs	r0, #28
 8001602:	f000 fac0 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165a:	f000 f985 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM2_IRQHandler+0x10>)
 800166a:	f001 f8e1 	bl	8002830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200000f4 	.word	0x200000f4

08001678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <OffAll1>:
 *  Created on: Oct 31, 2024
 *      Author: Admin
 */
#include "traffic_light.h"

void OffAll1(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <OffAll1+0x2c>)
 800168e:	f000 fc26 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <OffAll1+0x2c>)
 800169a:	f000 fc20 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <OffAll1+0x2c>)
 80016a6:	f000 fc1a 	bl	8001ede <HAL_GPIO_WritePin>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010800 	.word	0x40010800

080016b4 <OffAll2>:
void OffAll2(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <OffAll2+0x2c>)
 80016c0:	f000 fc0d 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <OffAll2+0x2c>)
 80016cc:	f000 fc07 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d6:	4802      	ldr	r0, [pc, #8]	; (80016e0 <OffAll2+0x2c>)
 80016d8:	f000 fc01 	bl	8001ede <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40010800 	.word	0x40010800

080016e4 <OnLedRed1>:
void OnLedRed1(){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <OnLedRed1+0x2c>)
 80016ee:	f000 fbf6 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <OnLedRed1+0x2c>)
 80016fa:	f000 fbf0 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <OnLedRed1+0x2c>)
 8001706:	f000 fbea 	bl	8001ede <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40010800 	.word	0x40010800

08001714 <OnLedRed2>:
void OnLedRed2(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4808      	ldr	r0, [pc, #32]	; (8001740 <OnLedRed2+0x2c>)
 8001720:	f000 fbdd 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <OnLedRed2+0x2c>)
 800172c:	f000 fbd7 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001736:	4802      	ldr	r0, [pc, #8]	; (8001740 <OnLedRed2+0x2c>)
 8001738:	f000 fbd1 	bl	8001ede <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010800 	.word	0x40010800

08001744 <OnLedYellow1>:
void OnLedYellow1(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <OnLedYellow1+0x2c>)
 800174e:	f000 fbc6 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <OnLedYellow1+0x2c>)
 800175a:	f000 fbc0 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <OnLedYellow1+0x2c>)
 8001766:	f000 fbba 	bl	8001ede <HAL_GPIO_WritePin>
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40010800 	.word	0x40010800

08001774 <OnLedYellow2>:
void OnLedYellow2(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800177e:	4808      	ldr	r0, [pc, #32]	; (80017a0 <OnLedYellow2+0x2c>)
 8001780:	f000 fbad 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <OnLedYellow2+0x2c>)
 800178c:	f000 fba7 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001796:	4802      	ldr	r0, [pc, #8]	; (80017a0 <OnLedYellow2+0x2c>)
 8001798:	f000 fba1 	bl	8001ede <HAL_GPIO_WritePin>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40010800 	.word	0x40010800

080017a4 <OnLedGreen1>:
void OnLedGreen1(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <OnLedGreen1+0x2c>)
 80017ae:	f000 fb96 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <OnLedGreen1+0x2c>)
 80017ba:	f000 fb90 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <OnLedGreen1+0x2c>)
 80017c6:	f000 fb8a 	bl	8001ede <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010800 	.word	0x40010800

080017d4 <OnLedGreen2>:
void OnLedGreen2(){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <OnLedGreen2+0x2c>)
 80017e0:	f000 fb7d 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <OnLedGreen2+0x2c>)
 80017ec:	f000 fb77 	bl	8001ede <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f6:	4802      	ldr	r0, [pc, #8]	; (8001800 <OnLedGreen2+0x2c>)
 80017f8:	f000 fb71 	bl	8001ede <HAL_GPIO_WritePin>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40010800 	.word	0x40010800

08001804 <BlinkyLedRed1>:

void BlinkyLedRed1(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <BlinkyLedRed1+0x10>)
 800180c:	f000 fb7f 	bl	8001f0e <HAL_GPIO_TogglePin>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40010800 	.word	0x40010800

08001818 <BlinkyLedRed2>:
void BlinkyLedRed2(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 800181c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <BlinkyLedRed2+0x14>)
 8001822:	f000 fb74 	bl	8001f0e <HAL_GPIO_TogglePin>
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40010800 	.word	0x40010800

08001830 <BlinkyLedYellow1>:
void BlinkyLedYellow1(){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <BlinkyLedYellow1+0x14>)
 800183a:	f000 fb68 	bl	8001f0e <HAL_GPIO_TogglePin>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40010800 	.word	0x40010800

08001848 <BlinkyLedGreen1>:
void BlinkyLedGreen1(){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800184c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <BlinkyLedGreen1+0x14>)
 8001852:	f000 fb5c 	bl	8001f0e <HAL_GPIO_TogglePin>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40010800 	.word	0x40010800

08001860 <BlinkyLedYellow2>:
void BlinkyLedYellow2(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 8001864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <BlinkyLedYellow2+0x14>)
 800186a:	f000 fb50 	bl	8001f0e <HAL_GPIO_TogglePin>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010800 	.word	0x40010800

08001878 <BlinkyLedGreen2>:
void BlinkyLedGreen2(){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 800187c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <BlinkyLedGreen2+0x14>)
 8001882:	f000 fb44 	bl	8001f0e <HAL_GPIO_TogglePin>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40010800 	.word	0x40010800

08001890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001890:	f7ff fef2 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001896:	490c      	ldr	r1, [pc, #48]	; (80018c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018ac:	4c09      	ldr	r4, [pc, #36]	; (80018d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ba:	f001 faf9 	bl	8002eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018be:	f7ff fc07 	bl	80010d0 <main>
  bx lr
 80018c2:	4770      	bx	lr
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018cc:	08002f4c 	.word	0x08002f4c
  ldr r2, =_sbss
 80018d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018d4:	20000140 	.word	0x20000140

080018d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_2_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_Init+0x28>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_Init+0x28>)
 80018e6:	f043 0310 	orr.w	r3, r3, #16
 80018ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f923 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fe36 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f93b 	bl	8001ba2 <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f903 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000005c 	.word	0x2000005c
 8001960:	20000064 	.word	0x20000064
 8001964:	20000060 	.word	0x20000060

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_IncTick+0x1c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_IncTick+0x20>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <HAL_IncTick+0x20>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000064 	.word	0x20000064
 8001988:	2000013c 	.word	0x2000013c

0800198c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <HAL_GetTick+0x10>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	2000013c 	.word	0x2000013c

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4906      	ldr	r1, [pc, #24]	; (8001a38 <__NVIC_EnableIRQ+0x34>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff90 	bl	8001a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff2d 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff42 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff90 	bl	8001a90 <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5f 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff35 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b08b      	sub	sp, #44	; 0x2c
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	e148      	b.n	8001e62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f040 8137 	bne.w	8001e5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4aa3      	ldr	r2, [pc, #652]	; (8001e80 <HAL_GPIO_Init+0x2c4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d05e      	beq.n	8001cb6 <HAL_GPIO_Init+0xfa>
 8001bf8:	4aa1      	ldr	r2, [pc, #644]	; (8001e80 <HAL_GPIO_Init+0x2c4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d875      	bhi.n	8001cea <HAL_GPIO_Init+0x12e>
 8001bfe:	4aa1      	ldr	r2, [pc, #644]	; (8001e84 <HAL_GPIO_Init+0x2c8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d058      	beq.n	8001cb6 <HAL_GPIO_Init+0xfa>
 8001c04:	4a9f      	ldr	r2, [pc, #636]	; (8001e84 <HAL_GPIO_Init+0x2c8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d86f      	bhi.n	8001cea <HAL_GPIO_Init+0x12e>
 8001c0a:	4a9f      	ldr	r2, [pc, #636]	; (8001e88 <HAL_GPIO_Init+0x2cc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d052      	beq.n	8001cb6 <HAL_GPIO_Init+0xfa>
 8001c10:	4a9d      	ldr	r2, [pc, #628]	; (8001e88 <HAL_GPIO_Init+0x2cc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d869      	bhi.n	8001cea <HAL_GPIO_Init+0x12e>
 8001c16:	4a9d      	ldr	r2, [pc, #628]	; (8001e8c <HAL_GPIO_Init+0x2d0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d04c      	beq.n	8001cb6 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a9b      	ldr	r2, [pc, #620]	; (8001e8c <HAL_GPIO_Init+0x2d0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d863      	bhi.n	8001cea <HAL_GPIO_Init+0x12e>
 8001c22:	4a9b      	ldr	r2, [pc, #620]	; (8001e90 <HAL_GPIO_Init+0x2d4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d046      	beq.n	8001cb6 <HAL_GPIO_Init+0xfa>
 8001c28:	4a99      	ldr	r2, [pc, #612]	; (8001e90 <HAL_GPIO_Init+0x2d4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d85d      	bhi.n	8001cea <HAL_GPIO_Init+0x12e>
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d82a      	bhi.n	8001c88 <HAL_GPIO_Init+0xcc>
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d859      	bhi.n	8001cea <HAL_GPIO_Init+0x12e>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <HAL_GPIO_Init+0x80>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001cb7 	.word	0x08001cb7
 8001c40:	08001c91 	.word	0x08001c91
 8001c44:	08001ca3 	.word	0x08001ca3
 8001c48:	08001ce5 	.word	0x08001ce5
 8001c4c:	08001ceb 	.word	0x08001ceb
 8001c50:	08001ceb 	.word	0x08001ceb
 8001c54:	08001ceb 	.word	0x08001ceb
 8001c58:	08001ceb 	.word	0x08001ceb
 8001c5c:	08001ceb 	.word	0x08001ceb
 8001c60:	08001ceb 	.word	0x08001ceb
 8001c64:	08001ceb 	.word	0x08001ceb
 8001c68:	08001ceb 	.word	0x08001ceb
 8001c6c:	08001ceb 	.word	0x08001ceb
 8001c70:	08001ceb 	.word	0x08001ceb
 8001c74:	08001ceb 	.word	0x08001ceb
 8001c78:	08001ceb 	.word	0x08001ceb
 8001c7c:	08001ceb 	.word	0x08001ceb
 8001c80:	08001c99 	.word	0x08001c99
 8001c84:	08001cad 	.word	0x08001cad
 8001c88:	4a82      	ldr	r2, [pc, #520]	; (8001e94 <HAL_GPIO_Init+0x2d8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c8e:	e02c      	b.n	8001cea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e029      	b.n	8001cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e024      	b.n	8001cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	623b      	str	r3, [r7, #32]
          break;
 8001caa:	e01f      	b.n	8001cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	330c      	adds	r3, #12
 8001cb2:	623b      	str	r3, [r7, #32]
          break;
 8001cb4:	e01a      	b.n	8001cec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e013      	b.n	8001cec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	611a      	str	r2, [r3, #16]
          break;
 8001cd6:	e009      	b.n	8001cec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	615a      	str	r2, [r3, #20]
          break;
 8001ce2:	e003      	b.n	8001cec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
          break;
 8001ce8:	e000      	b.n	8001cec <HAL_GPIO_Init+0x130>
          break;
 8001cea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2bff      	cmp	r3, #255	; 0xff
 8001cf0:	d801      	bhi.n	8001cf6 <HAL_GPIO_Init+0x13a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	e001      	b.n	8001cfa <HAL_GPIO_Init+0x13e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2bff      	cmp	r3, #255	; 0xff
 8001d00:	d802      	bhi.n	8001d08 <HAL_GPIO_Init+0x14c>
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	e002      	b.n	8001d0e <HAL_GPIO_Init+0x152>
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	3b08      	subs	r3, #8
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	210f      	movs	r1, #15
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	401a      	ands	r2, r3
 8001d20:	6a39      	ldr	r1, [r7, #32]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8090 	beq.w	8001e5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d3c:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <HAL_GPIO_Init+0x2dc>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a55      	ldr	r2, [pc, #340]	; (8001e98 <HAL_GPIO_Init+0x2dc>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_GPIO_Init+0x2dc>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d54:	4a51      	ldr	r2, [pc, #324]	; (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_GPIO_Init+0x2e4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00d      	beq.n	8001d9c <HAL_GPIO_Init+0x1e0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <HAL_GPIO_Init+0x2e8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <HAL_GPIO_Init+0x1dc>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <HAL_GPIO_Init+0x2ec>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_GPIO_Init+0x1d8>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e004      	b.n	8001d9e <HAL_GPIO_Init+0x1e2>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x1e2>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_GPIO_Init+0x1e2>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4093      	lsls	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dae:	493b      	ldr	r1, [pc, #236]	; (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc8:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4937      	ldr	r1, [pc, #220]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4933      	ldr	r1, [pc, #204]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df0:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	492d      	ldr	r1, [pc, #180]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	4929      	ldr	r1, [pc, #164]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4923      	ldr	r1, [pc, #140]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	491f      	ldr	r1, [pc, #124]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4919      	ldr	r1, [pc, #100]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4915      	ldr	r1, [pc, #84]	; (8001eac <HAL_GPIO_Init+0x2f0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3301      	adds	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f47f aeaf 	bne.w	8001bd0 <HAL_GPIO_Init+0x14>
  }
}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	372c      	adds	r7, #44	; 0x2c
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	10320000 	.word	0x10320000
 8001e84:	10310000 	.word	0x10310000
 8001e88:	10220000 	.word	0x10220000
 8001e8c:	10210000 	.word	0x10210000
 8001e90:	10120000 	.word	0x10120000
 8001e94:	10110000 	.word	0x10110000
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]
 8001eea:	4613      	mov	r3, r2
 8001eec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eee:	787b      	ldrb	r3, [r7, #1]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef4:	887a      	ldrh	r2, [r7, #2]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001efa:	e003      	b.n	8001f04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	041a      	lsls	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	611a      	str	r2, [r3, #16]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4013      	ands	r3, r2
 8001f26:	041a      	lsls	r2, r3, #16
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	400b      	ands	r3, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e26c      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8087 	beq.w	800206e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f60:	4b92      	ldr	r3, [pc, #584]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d00c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d112      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d10b      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f86:	4b89      	ldr	r3, [pc, #548]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d06c      	beq.n	800206c <HAL_RCC_OscConfig+0x12c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d168      	bne.n	800206c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e246      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x76>
 8001fa8:	4b80      	ldr	r3, [pc, #512]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a7f      	ldr	r2, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e02e      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x98>
 8001fbe:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7a      	ldr	r2, [pc, #488]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a77      	ldr	r2, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xbc>
 8001fe2:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a71      	ldr	r2, [pc, #452]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a67      	ldr	r2, [pc, #412]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fcb6 	bl	800198c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fcb2 	bl	800198c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1fa      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xe4>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fca2 	bl	800198c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fc9e 	bl	800198c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1e6      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x10c>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b08      	cmp	r3, #8
 8002090:	d11c      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1ba      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4939      	ldr	r1, [pc, #228]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7ff fc57 	bl	800198c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff fc53 	bl	800198c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e19b      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4927      	ldr	r1, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_RCC_OscConfig+0x270>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fc36 	bl	800198c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002124:	f7ff fc32 	bl	800198c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e17a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03a      	beq.n	80021c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d019      	beq.n	800218a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff fc16 	bl	800198c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff fc12 	bl	800198c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e15a      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCC_OscConfig+0x26c>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f000 fa9a 	bl	80026bc <RCC_Delay>
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_OscConfig+0x274>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7ff fbfc 	bl	800198c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002196:	e00f      	b.n	80021b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff fbf8 	bl	800198c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d908      	bls.n	80021b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e140      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	42420000 	.word	0x42420000
 80021b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b9e      	ldr	r3, [pc, #632]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e9      	bne.n	8002198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a6 	beq.w	800231e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b94      	ldr	r3, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a93      	ldr	r2, [pc, #588]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b91      	ldr	r3, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7ff fbb9 	bl	800198c <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7ff fbb5 	bl	800198c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0fd      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b81      	ldr	r3, [pc, #516]	; (8002438 <HAL_RCC_OscConfig+0x4f8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x312>
 8002244:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a7a      	ldr	r2, [pc, #488]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6213      	str	r3, [r2, #32]
 8002250:	e02d      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x334>
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b73      	ldr	r3, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a72      	ldr	r2, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x356>
 800227c:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a69      	ldr	r2, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x36e>
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a66      	ldr	r2, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a63      	ldr	r2, [pc, #396]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7ff fb69 	bl	800198c <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff fb65 	bl	800198c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0ab      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b57      	ldr	r3, [pc, #348]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCC_OscConfig+0x37e>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fb53 	bl	800198c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fb4f 	bl	800198c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e095      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a47      	ldr	r2, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8081 	beq.w	800242a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d061      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d146      	bne.n	80023ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fb23 	bl	800198c <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7ff fb1f 	bl	800198c <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e067      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235c:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d108      	bne.n	8002384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	492d      	ldr	r1, [pc, #180]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a19      	ldr	r1, [r3, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	430b      	orrs	r3, r1
 8002396:	4927      	ldr	r1, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7ff faf3 	bl	800198c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7ff faef 	bl	800198c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e037      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x46a>
 80023c8:	e02f      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_RCC_OscConfig+0x4fc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fadc 	bl	800198c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff fad8 	bl	800198c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e020      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x498>
 80023f6:	e018      	b.n	800242a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	42420060 	.word	0x42420060

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7ff fa2c 	bl	800198c <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7ff fa28 	bl	800198c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f98a 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	08002f20 	.word	0x08002f20
 800260c:	2000005c 	.word	0x2000005c
 8002610:	20000060 	.word	0x20000060

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x30>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x36>
 8002642:	e027      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	e027      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	fb02 f203 	mul.w	r2, r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e004      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	613b      	str	r3, [r7, #16]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	693b      	ldr	r3, [r7, #16]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	08002f30 	.word	0x08002f30
 80026b4:	08002f40 	.word	0x08002f40
 80026b8:	003d0900 	.word	0x003d0900

080026bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <RCC_Delay+0x34>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <RCC_Delay+0x38>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0a5b      	lsrs	r3, r3, #9
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026d8:	bf00      	nop
  }
  while (Delay --);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	60fa      	str	r2, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f9      	bne.n	80026d8 <RCC_Delay+0x1c>
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	2000005c 	.word	0x2000005c
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e041      	b.n	800278e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe ff54 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 fa56 	bl	8002be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d001      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e035      	b.n	800281c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_TIM_Base_Start_IT+0x90>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x4e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027da:	d004      	beq.n	80027e6 <HAL_TIM_Base_Start_IT+0x4e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_TIM_Base_Start_IT+0x94>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d111      	bne.n	800280a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d010      	beq.n	800281a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	e007      	b.n	800281a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40000400 	.word	0x40000400

08002830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0202 	mvn.w	r2, #2
 8002864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f998 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f98b 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f99a 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d020      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0204 	mvn.w	r2, #4
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f972 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f965 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f974 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d020      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0208 	mvn.w	r2, #8
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f94c 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f93f 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f94e 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d020      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0210 	mvn.w	r2, #16
 8002948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2208      	movs	r2, #8
 800294e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f926 	bl	8002bb0 <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f919 	bl	8002b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f928 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe fc96 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa6f 	bl	8002e9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8f8 	bl	8002bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0220 	mvn.w	r2, #32
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa42 	bl	8002e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_TIM_ConfigClockSource+0x1c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0b4      	b.n	8002b96 <HAL_TIM_ConfigClockSource+0x186>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a64:	d03e      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	f200 8087 	bhi.w	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a72:	f000 8086 	beq.w	8002b82 <HAL_TIM_ConfigClockSource+0x172>
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7a:	d87f      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b70      	cmp	r3, #112	; 0x70
 8002a7e:	d01a      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8002a80:	2b70      	cmp	r3, #112	; 0x70
 8002a82:	d87b      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b60      	cmp	r3, #96	; 0x60
 8002a86:	d050      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x11a>
 8002a88:	2b60      	cmp	r3, #96	; 0x60
 8002a8a:	d877      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b50      	cmp	r3, #80	; 0x50
 8002a8e:	d03c      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0xfa>
 8002a90:	2b50      	cmp	r3, #80	; 0x50
 8002a92:	d873      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d058      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x13a>
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d86f      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b30      	cmp	r3, #48	; 0x30
 8002a9e:	d064      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	d86b      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d060      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d867      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d05c      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d05a      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	e062      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6899      	ldr	r1, [r3, #8]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f000 f96a 	bl	8002d9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	609a      	str	r2, [r3, #8]
      break;
 8002ae2:	e04f      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f000 f953 	bl	8002d9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b06:	609a      	str	r2, [r3, #8]
      break;
 8002b08:	e03c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f8ca 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2150      	movs	r1, #80	; 0x50
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f921 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b28:	e02c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 f8e8 	bl	8002d0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2160      	movs	r1, #96	; 0x60
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f911 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b48:	e01c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f000 f8aa 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2140      	movs	r1, #64	; 0x40
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f901 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b68:	e00c      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f000 f8f8 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b7a:	e003      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e000      	b.n	8002b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
	...

08002be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <TIM_Base_SetConfig+0xc0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <TIM_Base_SetConfig+0x28>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c06:	d003      	beq.n	8002c10 <TIM_Base_SetConfig+0x28>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a28      	ldr	r2, [pc, #160]	; (8002cac <TIM_Base_SetConfig+0xc4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d108      	bne.n	8002c22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a20      	ldr	r2, [pc, #128]	; (8002ca8 <TIM_Base_SetConfig+0xc0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_Base_SetConfig+0x52>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c30:	d003      	beq.n	8002c3a <TIM_Base_SetConfig+0x52>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <TIM_Base_SetConfig+0xc4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <TIM_Base_SetConfig+0xc0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d103      	bne.n	8002c80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f023 0201 	bic.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400

08002cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0201 	bic.w	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f023 030a 	bic.w	r3, r3, #10
 8002cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f023 0210 	bic.w	r2, r3, #16
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	031b      	lsls	r3, r3, #12
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	621a      	str	r2, [r3, #32]
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f043 0307 	orr.w	r3, r3, #7
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b087      	sub	sp, #28
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	021a      	lsls	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	609a      	str	r2, [r3, #8]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e041      	b.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d004      	beq.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a10      	ldr	r2, [pc, #64]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10c      	bne.n	8002e66 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40000400 	.word	0x40000400

08002e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <__libc_init_array>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	4d0c      	ldr	r5, [pc, #48]	; (8002ee8 <__libc_init_array+0x38>)
 8002eb6:	4c0d      	ldr	r4, [pc, #52]	; (8002eec <__libc_init_array+0x3c>)
 8002eb8:	1b64      	subs	r4, r4, r5
 8002eba:	10a4      	asrs	r4, r4, #2
 8002ebc:	42a6      	cmp	r6, r4
 8002ebe:	d109      	bne.n	8002ed4 <__libc_init_array+0x24>
 8002ec0:	f000 f822 	bl	8002f08 <_init>
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	4d0a      	ldr	r5, [pc, #40]	; (8002ef0 <__libc_init_array+0x40>)
 8002ec8:	4c0a      	ldr	r4, [pc, #40]	; (8002ef4 <__libc_init_array+0x44>)
 8002eca:	1b64      	subs	r4, r4, r5
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	42a6      	cmp	r6, r4
 8002ed0:	d105      	bne.n	8002ede <__libc_init_array+0x2e>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed8:	4798      	blx	r3
 8002eda:	3601      	adds	r6, #1
 8002edc:	e7ee      	b.n	8002ebc <__libc_init_array+0xc>
 8002ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee2:	4798      	blx	r3
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	e7f2      	b.n	8002ece <__libc_init_array+0x1e>
 8002ee8:	08002f44 	.word	0x08002f44
 8002eec:	08002f44 	.word	0x08002f44
 8002ef0:	08002f44 	.word	0x08002f44
 8002ef4:	08002f48 	.word	0x08002f48

08002ef8 <memset>:
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4402      	add	r2, r0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d100      	bne.n	8002f02 <memset+0xa>
 8002f00:	4770      	bx	lr
 8002f02:	f803 1b01 	strb.w	r1, [r3], #1
 8002f06:	e7f9      	b.n	8002efc <memset+0x4>

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
